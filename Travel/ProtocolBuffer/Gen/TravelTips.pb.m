// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TravelTips.pb.h"

@implementation TravelTipsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TravelTipsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL TravelTipTypeIsValidValue(TravelTipType value) {
  switch (value) {
    case TravelTipTypeGuide:
    case TravelTipTypeRoute:
      return YES;
    default:
      return NO;
  }
}
@interface CommonTravelTip ()
@property int32_t tipId;
@property int32_t cityId;
@property (retain) NSString* name;
@property (retain) NSString* html;
@property (retain) NSString* briefIntro;
@property (retain) NSString* icon;
@property (retain) NSMutableArray* mutableImagesList;
@property (retain) NSString* detailIntro;
@end

@implementation CommonTravelTip

- (BOOL) hasTipId {
  return !!hasTipId_;
}
- (void) setHasTipId:(BOOL) value {
  hasTipId_ = !!value;
}
@synthesize tipId;
- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasHtml {
  return !!hasHtml_;
}
- (void) setHasHtml:(BOOL) value {
  hasHtml_ = !!value;
}
@synthesize html;
- (BOOL) hasBriefIntro {
  return !!hasBriefIntro_;
}
- (void) setHasBriefIntro:(BOOL) value {
  hasBriefIntro_ = !!value;
}
@synthesize briefIntro;
- (BOOL) hasIcon {
  return !!hasIcon_;
}
- (void) setHasIcon:(BOOL) value {
  hasIcon_ = !!value;
}
@synthesize icon;
@synthesize mutableImagesList;
- (BOOL) hasDetailIntro {
  return !!hasDetailIntro_;
}
- (void) setHasDetailIntro:(BOOL) value {
  hasDetailIntro_ = !!value;
}
@synthesize detailIntro;
- (void) dealloc {
  self.name = nil;
  self.html = nil;
  self.briefIntro = nil;
  self.icon = nil;
  self.mutableImagesList = nil;
  self.detailIntro = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tipId = 0;
    self.cityId = 0;
    self.name = @"";
    self.html = @"";
    self.briefIntro = @"";
    self.icon = @"";
    self.detailIntro = @"";
  }
  return self;
}
static CommonTravelTip* defaultCommonTravelTipInstance = nil;
+ (void) initialize {
  if (self == [CommonTravelTip class]) {
    defaultCommonTravelTipInstance = [[CommonTravelTip alloc] init];
  }
}
+ (CommonTravelTip*) defaultInstance {
  return defaultCommonTravelTipInstance;
}
- (CommonTravelTip*) defaultInstance {
  return defaultCommonTravelTipInstance;
}
- (NSArray*) imagesList {
  return mutableImagesList;
}
- (NSString*) imagesAtIndex:(int32_t) index {
  id value = [mutableImagesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTipId) {
    [output writeInt32:1 value:self.tipId];
  }
  if (self.hasCityId) {
    [output writeInt32:2 value:self.cityId];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasHtml) {
    [output writeString:4 value:self.html];
  }
  if (self.hasBriefIntro) {
    [output writeString:5 value:self.briefIntro];
  }
  if (self.hasIcon) {
    [output writeString:6 value:self.icon];
  }
  for (NSString* element in self.mutableImagesList) {
    [output writeString:7 value:element];
  }
  if (self.hasDetailIntro) {
    [output writeString:8 value:self.detailIntro];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTipId) {
    size += computeInt32Size(1, self.tipId);
  }
  if (self.hasCityId) {
    size += computeInt32Size(2, self.cityId);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasHtml) {
    size += computeStringSize(4, self.html);
  }
  if (self.hasBriefIntro) {
    size += computeStringSize(5, self.briefIntro);
  }
  if (self.hasIcon) {
    size += computeStringSize(6, self.icon);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableImagesList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableImagesList.count;
  }
  if (self.hasDetailIntro) {
    size += computeStringSize(8, self.detailIntro);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CommonTravelTip*) parseFromData:(NSData*) data {
  return (CommonTravelTip*)[[[CommonTravelTip builder] mergeFromData:data] build];
}
+ (CommonTravelTip*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommonTravelTip*)[[[CommonTravelTip builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CommonTravelTip*) parseFromInputStream:(NSInputStream*) input {
  return (CommonTravelTip*)[[[CommonTravelTip builder] mergeFromInputStream:input] build];
}
+ (CommonTravelTip*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommonTravelTip*)[[[CommonTravelTip builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommonTravelTip*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CommonTravelTip*)[[[CommonTravelTip builder] mergeFromCodedInputStream:input] build];
}
+ (CommonTravelTip*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommonTravelTip*)[[[CommonTravelTip builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommonTravelTip_Builder*) builder {
  return [[[CommonTravelTip_Builder alloc] init] autorelease];
}
+ (CommonTravelTip_Builder*) builderWithPrototype:(CommonTravelTip*) prototype {
  return [[CommonTravelTip builder] mergeFrom:prototype];
}
- (CommonTravelTip_Builder*) builder {
  return [CommonTravelTip builder];
}
@end

@interface CommonTravelTip_Builder()
@property (retain) CommonTravelTip* result;
@end

@implementation CommonTravelTip_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CommonTravelTip alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CommonTravelTip_Builder*) clear {
  self.result = [[[CommonTravelTip alloc] init] autorelease];
  return self;
}
- (CommonTravelTip_Builder*) clone {
  return [CommonTravelTip builderWithPrototype:result];
}
- (CommonTravelTip*) defaultInstance {
  return [CommonTravelTip defaultInstance];
}
- (CommonTravelTip*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CommonTravelTip*) buildPartial {
  CommonTravelTip* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CommonTravelTip_Builder*) mergeFrom:(CommonTravelTip*) other {
  if (other == [CommonTravelTip defaultInstance]) {
    return self;
  }
  if (other.hasTipId) {
    [self setTipId:other.tipId];
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasHtml) {
    [self setHtml:other.html];
  }
  if (other.hasBriefIntro) {
    [self setBriefIntro:other.briefIntro];
  }
  if (other.hasIcon) {
    [self setIcon:other.icon];
  }
  if (other.mutableImagesList.count > 0) {
    if (result.mutableImagesList == nil) {
      result.mutableImagesList = [NSMutableArray array];
    }
    [result.mutableImagesList addObjectsFromArray:other.mutableImagesList];
  }
  if (other.hasDetailIntro) {
    [self setDetailIntro:other.detailIntro];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CommonTravelTip_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CommonTravelTip_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTipId:[input readInt32]];
        break;
      }
      case 16: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setHtml:[input readString]];
        break;
      }
      case 42: {
        [self setBriefIntro:[input readString]];
        break;
      }
      case 50: {
        [self setIcon:[input readString]];
        break;
      }
      case 58: {
        [self addImages:[input readString]];
        break;
      }
      case 66: {
        [self setDetailIntro:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTipId {
  return result.hasTipId;
}
- (int32_t) tipId {
  return result.tipId;
}
- (CommonTravelTip_Builder*) setTipId:(int32_t) value {
  result.hasTipId = YES;
  result.tipId = value;
  return self;
}
- (CommonTravelTip_Builder*) clearTipId {
  result.hasTipId = NO;
  result.tipId = 0;
  return self;
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (CommonTravelTip_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (CommonTravelTip_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (CommonTravelTip_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (CommonTravelTip_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasHtml {
  return result.hasHtml;
}
- (NSString*) html {
  return result.html;
}
- (CommonTravelTip_Builder*) setHtml:(NSString*) value {
  result.hasHtml = YES;
  result.html = value;
  return self;
}
- (CommonTravelTip_Builder*) clearHtml {
  result.hasHtml = NO;
  result.html = @"";
  return self;
}
- (BOOL) hasBriefIntro {
  return result.hasBriefIntro;
}
- (NSString*) briefIntro {
  return result.briefIntro;
}
- (CommonTravelTip_Builder*) setBriefIntro:(NSString*) value {
  result.hasBriefIntro = YES;
  result.briefIntro = value;
  return self;
}
- (CommonTravelTip_Builder*) clearBriefIntro {
  result.hasBriefIntro = NO;
  result.briefIntro = @"";
  return self;
}
- (BOOL) hasIcon {
  return result.hasIcon;
}
- (NSString*) icon {
  return result.icon;
}
- (CommonTravelTip_Builder*) setIcon:(NSString*) value {
  result.hasIcon = YES;
  result.icon = value;
  return self;
}
- (CommonTravelTip_Builder*) clearIcon {
  result.hasIcon = NO;
  result.icon = @"";
  return self;
}
- (NSArray*) imagesList {
  if (result.mutableImagesList == nil) {
    return [NSArray array];
  }
  return result.mutableImagesList;
}
- (NSString*) imagesAtIndex:(int32_t) index {
  return [result imagesAtIndex:index];
}
- (CommonTravelTip_Builder*) replaceImagesAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableImagesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CommonTravelTip_Builder*) addImages:(NSString*) value {
  if (result.mutableImagesList == nil) {
    result.mutableImagesList = [NSMutableArray array];
  }
  [result.mutableImagesList addObject:value];
  return self;
}
- (CommonTravelTip_Builder*) addAllImages:(NSArray*) values {
  if (result.mutableImagesList == nil) {
    result.mutableImagesList = [NSMutableArray array];
  }
  [result.mutableImagesList addObjectsFromArray:values];
  return self;
}
- (CommonTravelTip_Builder*) clearImagesList {
  result.mutableImagesList = nil;
  return self;
}
- (BOOL) hasDetailIntro {
  return result.hasDetailIntro;
}
- (NSString*) detailIntro {
  return result.detailIntro;
}
- (CommonTravelTip_Builder*) setDetailIntro:(NSString*) value {
  result.hasDetailIntro = YES;
  result.detailIntro = value;
  return self;
}
- (CommonTravelTip_Builder*) clearDetailIntro {
  result.hasDetailIntro = NO;
  result.detailIntro = @"";
  return self;
}
@end

@interface CommonTravelTipList ()
@property (retain) NSMutableArray* mutableTipListList;
@end

@implementation CommonTravelTipList

@synthesize mutableTipListList;
- (void) dealloc {
  self.mutableTipListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CommonTravelTipList* defaultCommonTravelTipListInstance = nil;
+ (void) initialize {
  if (self == [CommonTravelTipList class]) {
    defaultCommonTravelTipListInstance = [[CommonTravelTipList alloc] init];
  }
}
+ (CommonTravelTipList*) defaultInstance {
  return defaultCommonTravelTipListInstance;
}
- (CommonTravelTipList*) defaultInstance {
  return defaultCommonTravelTipListInstance;
}
- (NSArray*) tipListList {
  return mutableTipListList;
}
- (CommonTravelTip*) tipListAtIndex:(int32_t) index {
  id value = [mutableTipListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (CommonTravelTip* element in self.tipListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CommonTravelTip* element in self.tipListList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (CommonTravelTip* element in self.tipListList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CommonTravelTipList*) parseFromData:(NSData*) data {
  return (CommonTravelTipList*)[[[CommonTravelTipList builder] mergeFromData:data] build];
}
+ (CommonTravelTipList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommonTravelTipList*)[[[CommonTravelTipList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CommonTravelTipList*) parseFromInputStream:(NSInputStream*) input {
  return (CommonTravelTipList*)[[[CommonTravelTipList builder] mergeFromInputStream:input] build];
}
+ (CommonTravelTipList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommonTravelTipList*)[[[CommonTravelTipList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommonTravelTipList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CommonTravelTipList*)[[[CommonTravelTipList builder] mergeFromCodedInputStream:input] build];
}
+ (CommonTravelTipList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommonTravelTipList*)[[[CommonTravelTipList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommonTravelTipList_Builder*) builder {
  return [[[CommonTravelTipList_Builder alloc] init] autorelease];
}
+ (CommonTravelTipList_Builder*) builderWithPrototype:(CommonTravelTipList*) prototype {
  return [[CommonTravelTipList builder] mergeFrom:prototype];
}
- (CommonTravelTipList_Builder*) builder {
  return [CommonTravelTipList builder];
}
@end

@interface CommonTravelTipList_Builder()
@property (retain) CommonTravelTipList* result;
@end

@implementation CommonTravelTipList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CommonTravelTipList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CommonTravelTipList_Builder*) clear {
  self.result = [[[CommonTravelTipList alloc] init] autorelease];
  return self;
}
- (CommonTravelTipList_Builder*) clone {
  return [CommonTravelTipList builderWithPrototype:result];
}
- (CommonTravelTipList*) defaultInstance {
  return [CommonTravelTipList defaultInstance];
}
- (CommonTravelTipList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CommonTravelTipList*) buildPartial {
  CommonTravelTipList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CommonTravelTipList_Builder*) mergeFrom:(CommonTravelTipList*) other {
  if (other == [CommonTravelTipList defaultInstance]) {
    return self;
  }
  if (other.mutableTipListList.count > 0) {
    if (result.mutableTipListList == nil) {
      result.mutableTipListList = [NSMutableArray array];
    }
    [result.mutableTipListList addObjectsFromArray:other.mutableTipListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CommonTravelTipList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CommonTravelTipList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CommonTravelTip_Builder* subBuilder = [CommonTravelTip builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTipList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) tipListList {
  if (result.mutableTipListList == nil) { return [NSArray array]; }
  return result.mutableTipListList;
}
- (CommonTravelTip*) tipListAtIndex:(int32_t) index {
  return [result tipListAtIndex:index];
}
- (CommonTravelTipList_Builder*) replaceTipListAtIndex:(int32_t) index with:(CommonTravelTip*) value {
  [result.mutableTipListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CommonTravelTipList_Builder*) addAllTipList:(NSArray*) values {
  if (result.mutableTipListList == nil) {
    result.mutableTipListList = [NSMutableArray array];
  }
  [result.mutableTipListList addObjectsFromArray:values];
  return self;
}
- (CommonTravelTipList_Builder*) clearTipListList {
  result.mutableTipListList = nil;
  return self;
}
- (CommonTravelTipList_Builder*) addTipList:(CommonTravelTip*) value {
  if (result.mutableTipListList == nil) {
    result.mutableTipListList = [NSMutableArray array];
  }
  [result.mutableTipListList addObject:value];
  return self;
}
@end

@interface TravelTips ()
@property (retain) NSMutableArray* mutableGuideListList;
@property (retain) NSMutableArray* mutableRouteListList;
@property int32_t cityId;
@end

@implementation TravelTips

@synthesize mutableGuideListList;
@synthesize mutableRouteListList;
- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (void) dealloc {
  self.mutableGuideListList = nil;
  self.mutableRouteListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cityId = 0;
  }
  return self;
}
static TravelTips* defaultTravelTipsInstance = nil;
+ (void) initialize {
  if (self == [TravelTips class]) {
    defaultTravelTipsInstance = [[TravelTips alloc] init];
  }
}
+ (TravelTips*) defaultInstance {
  return defaultTravelTipsInstance;
}
- (TravelTips*) defaultInstance {
  return defaultTravelTipsInstance;
}
- (NSArray*) guideListList {
  return mutableGuideListList;
}
- (CommonTravelTip*) guideListAtIndex:(int32_t) index {
  id value = [mutableGuideListList objectAtIndex:index];
  return value;
}
- (NSArray*) routeListList {
  return mutableRouteListList;
}
- (CommonTravelTip*) routeListAtIndex:(int32_t) index {
  id value = [mutableRouteListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (CommonTravelTip* element in self.guideListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (CommonTravelTip* element in self.routeListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CommonTravelTip* element in self.guideListList) {
    [output writeMessage:1 value:element];
  }
  for (CommonTravelTip* element in self.routeListList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasCityId) {
    [output writeInt32:3 value:self.cityId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (CommonTravelTip* element in self.guideListList) {
    size += computeMessageSize(1, element);
  }
  for (CommonTravelTip* element in self.routeListList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasCityId) {
    size += computeInt32Size(3, self.cityId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TravelTips*) parseFromData:(NSData*) data {
  return (TravelTips*)[[[TravelTips builder] mergeFromData:data] build];
}
+ (TravelTips*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelTips*)[[[TravelTips builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TravelTips*) parseFromInputStream:(NSInputStream*) input {
  return (TravelTips*)[[[TravelTips builder] mergeFromInputStream:input] build];
}
+ (TravelTips*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelTips*)[[[TravelTips builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TravelTips*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TravelTips*)[[[TravelTips builder] mergeFromCodedInputStream:input] build];
}
+ (TravelTips*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelTips*)[[[TravelTips builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TravelTips_Builder*) builder {
  return [[[TravelTips_Builder alloc] init] autorelease];
}
+ (TravelTips_Builder*) builderWithPrototype:(TravelTips*) prototype {
  return [[TravelTips builder] mergeFrom:prototype];
}
- (TravelTips_Builder*) builder {
  return [TravelTips builder];
}
@end

@interface TravelTips_Builder()
@property (retain) TravelTips* result;
@end

@implementation TravelTips_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TravelTips alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TravelTips_Builder*) clear {
  self.result = [[[TravelTips alloc] init] autorelease];
  return self;
}
- (TravelTips_Builder*) clone {
  return [TravelTips builderWithPrototype:result];
}
- (TravelTips*) defaultInstance {
  return [TravelTips defaultInstance];
}
- (TravelTips*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TravelTips*) buildPartial {
  TravelTips* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TravelTips_Builder*) mergeFrom:(TravelTips*) other {
  if (other == [TravelTips defaultInstance]) {
    return self;
  }
  if (other.mutableGuideListList.count > 0) {
    if (result.mutableGuideListList == nil) {
      result.mutableGuideListList = [NSMutableArray array];
    }
    [result.mutableGuideListList addObjectsFromArray:other.mutableGuideListList];
  }
  if (other.mutableRouteListList.count > 0) {
    if (result.mutableRouteListList == nil) {
      result.mutableRouteListList = [NSMutableArray array];
    }
    [result.mutableRouteListList addObjectsFromArray:other.mutableRouteListList];
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TravelTips_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TravelTips_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CommonTravelTip_Builder* subBuilder = [CommonTravelTip builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGuideList:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CommonTravelTip_Builder* subBuilder = [CommonTravelTip builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRouteList:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setCityId:[input readInt32]];
        break;
      }
    }
  }
}
- (NSArray*) guideListList {
  if (result.mutableGuideListList == nil) { return [NSArray array]; }
  return result.mutableGuideListList;
}
- (CommonTravelTip*) guideListAtIndex:(int32_t) index {
  return [result guideListAtIndex:index];
}
- (TravelTips_Builder*) replaceGuideListAtIndex:(int32_t) index with:(CommonTravelTip*) value {
  [result.mutableGuideListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TravelTips_Builder*) addAllGuideList:(NSArray*) values {
  if (result.mutableGuideListList == nil) {
    result.mutableGuideListList = [NSMutableArray array];
  }
  [result.mutableGuideListList addObjectsFromArray:values];
  return self;
}
- (TravelTips_Builder*) clearGuideListList {
  result.mutableGuideListList = nil;
  return self;
}
- (TravelTips_Builder*) addGuideList:(CommonTravelTip*) value {
  if (result.mutableGuideListList == nil) {
    result.mutableGuideListList = [NSMutableArray array];
  }
  [result.mutableGuideListList addObject:value];
  return self;
}
- (NSArray*) routeListList {
  if (result.mutableRouteListList == nil) { return [NSArray array]; }
  return result.mutableRouteListList;
}
- (CommonTravelTip*) routeListAtIndex:(int32_t) index {
  return [result routeListAtIndex:index];
}
- (TravelTips_Builder*) replaceRouteListAtIndex:(int32_t) index with:(CommonTravelTip*) value {
  [result.mutableRouteListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TravelTips_Builder*) addAllRouteList:(NSArray*) values {
  if (result.mutableRouteListList == nil) {
    result.mutableRouteListList = [NSMutableArray array];
  }
  [result.mutableRouteListList addObjectsFromArray:values];
  return self;
}
- (TravelTips_Builder*) clearRouteListList {
  result.mutableRouteListList = nil;
  return self;
}
- (TravelTips_Builder*) addRouteList:(CommonTravelTip*) value {
  if (result.mutableRouteListList == nil) {
    result.mutableRouteListList = [NSMutableArray array];
  }
  [result.mutableRouteListList addObject:value];
  return self;
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (TravelTips_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (TravelTips_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
@end

