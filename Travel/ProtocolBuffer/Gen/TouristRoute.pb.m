// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TouristRoute.pb.h"

@implementation TouristRouteRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TouristRouteRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TouristRouteList ()
@property (retain) NSMutableArray* mutableRoutesList;
@end

@implementation TouristRouteList

@synthesize mutableRoutesList;
- (void) dealloc {
  self.mutableRoutesList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static TouristRouteList* defaultTouristRouteListInstance = nil;
+ (void) initialize {
  if (self == [TouristRouteList class]) {
    defaultTouristRouteListInstance = [[TouristRouteList alloc] init];
  }
}
+ (TouristRouteList*) defaultInstance {
  return defaultTouristRouteListInstance;
}
- (TouristRouteList*) defaultInstance {
  return defaultTouristRouteListInstance;
}
- (NSArray*) routesList {
  return mutableRoutesList;
}
- (TouristRoute*) routesAtIndex:(int32_t) index {
  id value = [mutableRoutesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (TouristRoute* element in self.routesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (TouristRoute* element in self.routesList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (TouristRoute* element in self.routesList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TouristRouteList*) parseFromData:(NSData*) data {
  return (TouristRouteList*)[[[TouristRouteList builder] mergeFromData:data] build];
}
+ (TouristRouteList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouristRouteList*)[[[TouristRouteList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TouristRouteList*) parseFromInputStream:(NSInputStream*) input {
  return (TouristRouteList*)[[[TouristRouteList builder] mergeFromInputStream:input] build];
}
+ (TouristRouteList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouristRouteList*)[[[TouristRouteList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TouristRouteList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TouristRouteList*)[[[TouristRouteList builder] mergeFromCodedInputStream:input] build];
}
+ (TouristRouteList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouristRouteList*)[[[TouristRouteList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TouristRouteList_Builder*) builder {
  return [[[TouristRouteList_Builder alloc] init] autorelease];
}
+ (TouristRouteList_Builder*) builderWithPrototype:(TouristRouteList*) prototype {
  return [[TouristRouteList builder] mergeFrom:prototype];
}
- (TouristRouteList_Builder*) builder {
  return [TouristRouteList builder];
}
@end

@interface TouristRouteList_Builder()
@property (retain) TouristRouteList* result;
@end

@implementation TouristRouteList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TouristRouteList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TouristRouteList_Builder*) clear {
  self.result = [[[TouristRouteList alloc] init] autorelease];
  return self;
}
- (TouristRouteList_Builder*) clone {
  return [TouristRouteList builderWithPrototype:result];
}
- (TouristRouteList*) defaultInstance {
  return [TouristRouteList defaultInstance];
}
- (TouristRouteList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TouristRouteList*) buildPartial {
  TouristRouteList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TouristRouteList_Builder*) mergeFrom:(TouristRouteList*) other {
  if (other == [TouristRouteList defaultInstance]) {
    return self;
  }
  if (other.mutableRoutesList.count > 0) {
    if (result.mutableRoutesList == nil) {
      result.mutableRoutesList = [NSMutableArray array];
    }
    [result.mutableRoutesList addObjectsFromArray:other.mutableRoutesList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TouristRouteList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TouristRouteList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TouristRoute_Builder* subBuilder = [TouristRoute builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRoutes:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) routesList {
  if (result.mutableRoutesList == nil) { return [NSArray array]; }
  return result.mutableRoutesList;
}
- (TouristRoute*) routesAtIndex:(int32_t) index {
  return [result routesAtIndex:index];
}
- (TouristRouteList_Builder*) replaceRoutesAtIndex:(int32_t) index with:(TouristRoute*) value {
  [result.mutableRoutesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TouristRouteList_Builder*) addAllRoutes:(NSArray*) values {
  if (result.mutableRoutesList == nil) {
    result.mutableRoutesList = [NSMutableArray array];
  }
  [result.mutableRoutesList addObjectsFromArray:values];
  return self;
}
- (TouristRouteList_Builder*) clearRoutesList {
  result.mutableRoutesList = nil;
  return self;
}
- (TouristRouteList_Builder*) addRoutes:(TouristRoute*) value {
  if (result.mutableRoutesList == nil) {
    result.mutableRoutesList = [NSMutableArray array];
  }
  [result.mutableRoutesList addObject:value];
  return self;
}
@end

@interface TouristRoute ()
@property int32_t routeId;
@property (retain) NSString* name;
@property int32_t departCityId;
@property (retain) NSMutableArray* mutableDestinationCityIdsList;
@property (retain) NSString* price;
@property int32_t agencyId;
@property int32_t averageRank;
@property (retain) NSString* thumbImage;
@property (retain) NSString* tour;
@property int32_t days;
@property (retain) NSMutableArray* mutableThemeIdsList;
@property int32_t categoryId;
@property int32_t followUserCount;
@property (retain) NSString* customerServiceTelephone;
@property (retain) NSMutableArray* mutableDetailImagesList;
@property (retain) NSString* characteristic;
@property (retain) NSMutableArray* mutableDailySchedulesList;
@property (retain) NSMutableArray* mutablePackagesList;
@property (retain) NSMutableArray* mutableBookingsList;
@property (retain) NSString* reference;
@property (retain) NSMutableArray* mutableRelatedplacesList;
@property (retain) NSString* fee;
@property (retain) NSString* bookingNotice;
@end

@implementation TouristRoute

- (BOOL) hasRouteId {
  return !!hasRouteId_;
}
- (void) setHasRouteId:(BOOL) value {
  hasRouteId_ = !!value;
}
@synthesize routeId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasDepartCityId {
  return !!hasDepartCityId_;
}
- (void) setHasDepartCityId:(BOOL) value {
  hasDepartCityId_ = !!value;
}
@synthesize departCityId;
@synthesize mutableDestinationCityIdsList;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasAgencyId {
  return !!hasAgencyId_;
}
- (void) setHasAgencyId:(BOOL) value {
  hasAgencyId_ = !!value;
}
@synthesize agencyId;
- (BOOL) hasAverageRank {
  return !!hasAverageRank_;
}
- (void) setHasAverageRank:(BOOL) value {
  hasAverageRank_ = !!value;
}
@synthesize averageRank;
- (BOOL) hasThumbImage {
  return !!hasThumbImage_;
}
- (void) setHasThumbImage:(BOOL) value {
  hasThumbImage_ = !!value;
}
@synthesize thumbImage;
- (BOOL) hasTour {
  return !!hasTour_;
}
- (void) setHasTour:(BOOL) value {
  hasTour_ = !!value;
}
@synthesize tour;
- (BOOL) hasDays {
  return !!hasDays_;
}
- (void) setHasDays:(BOOL) value {
  hasDays_ = !!value;
}
@synthesize days;
@synthesize mutableThemeIdsList;
- (BOOL) hasCategoryId {
  return !!hasCategoryId_;
}
- (void) setHasCategoryId:(BOOL) value {
  hasCategoryId_ = !!value;
}
@synthesize categoryId;
- (BOOL) hasFollowUserCount {
  return !!hasFollowUserCount_;
}
- (void) setHasFollowUserCount:(BOOL) value {
  hasFollowUserCount_ = !!value;
}
@synthesize followUserCount;
- (BOOL) hasCustomerServiceTelephone {
  return !!hasCustomerServiceTelephone_;
}
- (void) setHasCustomerServiceTelephone:(BOOL) value {
  hasCustomerServiceTelephone_ = !!value;
}
@synthesize customerServiceTelephone;
@synthesize mutableDetailImagesList;
- (BOOL) hasCharacteristic {
  return !!hasCharacteristic_;
}
- (void) setHasCharacteristic:(BOOL) value {
  hasCharacteristic_ = !!value;
}
@synthesize characteristic;
@synthesize mutableDailySchedulesList;
@synthesize mutablePackagesList;
@synthesize mutableBookingsList;
- (BOOL) hasReference {
  return !!hasReference_;
}
- (void) setHasReference:(BOOL) value {
  hasReference_ = !!value;
}
@synthesize reference;
@synthesize mutableRelatedplacesList;
- (BOOL) hasFee {
  return !!hasFee_;
}
- (void) setHasFee:(BOOL) value {
  hasFee_ = !!value;
}
@synthesize fee;
- (BOOL) hasBookingNotice {
  return !!hasBookingNotice_;
}
- (void) setHasBookingNotice:(BOOL) value {
  hasBookingNotice_ = !!value;
}
@synthesize bookingNotice;
- (void) dealloc {
  self.name = nil;
  self.mutableDestinationCityIdsList = nil;
  self.price = nil;
  self.thumbImage = nil;
  self.tour = nil;
  self.mutableThemeIdsList = nil;
  self.customerServiceTelephone = nil;
  self.mutableDetailImagesList = nil;
  self.characteristic = nil;
  self.mutableDailySchedulesList = nil;
  self.mutablePackagesList = nil;
  self.mutableBookingsList = nil;
  self.reference = nil;
  self.mutableRelatedplacesList = nil;
  self.fee = nil;
  self.bookingNotice = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.routeId = 0;
    self.name = @"";
    self.departCityId = 0;
    self.price = @"";
    self.agencyId = 0;
    self.averageRank = 0;
    self.thumbImage = @"";
    self.tour = @"";
    self.days = 0;
    self.categoryId = 0;
    self.followUserCount = 0;
    self.customerServiceTelephone = @"";
    self.characteristic = @"";
    self.reference = @"";
    self.fee = @"";
    self.bookingNotice = @"";
  }
  return self;
}
static TouristRoute* defaultTouristRouteInstance = nil;
+ (void) initialize {
  if (self == [TouristRoute class]) {
    defaultTouristRouteInstance = [[TouristRoute alloc] init];
  }
}
+ (TouristRoute*) defaultInstance {
  return defaultTouristRouteInstance;
}
- (TouristRoute*) defaultInstance {
  return defaultTouristRouteInstance;
}
- (NSArray*) destinationCityIdsList {
  return mutableDestinationCityIdsList;
}
- (int32_t) destinationCityIdsAtIndex:(int32_t) index {
  id value = [mutableDestinationCityIdsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) themeIdsList {
  return mutableThemeIdsList;
}
- (int32_t) themeIdsAtIndex:(int32_t) index {
  id value = [mutableThemeIdsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) detailImagesList {
  return mutableDetailImagesList;
}
- (NSString*) detailImagesAtIndex:(int32_t) index {
  id value = [mutableDetailImagesList objectAtIndex:index];
  return value;
}
- (NSArray*) dailySchedulesList {
  return mutableDailySchedulesList;
}
- (DailySchedule*) dailySchedulesAtIndex:(int32_t) index {
  id value = [mutableDailySchedulesList objectAtIndex:index];
  return value;
}
- (NSArray*) packagesList {
  return mutablePackagesList;
}
- (TravelPackage*) packagesAtIndex:(int32_t) index {
  id value = [mutablePackagesList objectAtIndex:index];
  return value;
}
- (NSArray*) bookingsList {
  return mutableBookingsList;
}
- (Booking*) bookingsAtIndex:(int32_t) index {
  id value = [mutableBookingsList objectAtIndex:index];
  return value;
}
- (NSArray*) relatedplacesList {
  return mutableRelatedplacesList;
}
- (PlaceTour*) relatedplacesAtIndex:(int32_t) index {
  id value = [mutableRelatedplacesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasRouteId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasDepartCityId) {
    return NO;
  }
  for (DailySchedule* element in self.dailySchedulesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (TravelPackage* element in self.packagesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Booking* element in self.bookingsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PlaceTour* element in self.relatedplacesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRouteId) {
    [output writeInt32:1 value:self.routeId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDepartCityId) {
    [output writeInt32:3 value:self.departCityId];
  }
  for (NSNumber* value in self.mutableDestinationCityIdsList) {
    [output writeInt32:4 value:[value intValue]];
  }
  if (self.hasPrice) {
    [output writeString:5 value:self.price];
  }
  if (self.hasAgencyId) {
    [output writeInt32:6 value:self.agencyId];
  }
  if (self.hasAverageRank) {
    [output writeInt32:7 value:self.averageRank];
  }
  if (self.hasThumbImage) {
    [output writeString:10 value:self.thumbImage];
  }
  if (self.hasTour) {
    [output writeString:11 value:self.tour];
  }
  if (self.hasDays) {
    [output writeInt32:12 value:self.days];
  }
  for (NSNumber* value in self.mutableThemeIdsList) {
    [output writeInt32:13 value:[value intValue]];
  }
  if (self.hasCategoryId) {
    [output writeInt32:14 value:self.categoryId];
  }
  if (self.hasFollowUserCount) {
    [output writeInt32:15 value:self.followUserCount];
  }
  if (self.hasCustomerServiceTelephone) {
    [output writeString:20 value:self.customerServiceTelephone];
  }
  for (NSString* element in self.mutableDetailImagesList) {
    [output writeString:21 value:element];
  }
  if (self.hasCharacteristic) {
    [output writeString:22 value:self.characteristic];
  }
  for (DailySchedule* element in self.dailySchedulesList) {
    [output writeMessage:23 value:element];
  }
  for (TravelPackage* element in self.packagesList) {
    [output writeMessage:24 value:element];
  }
  for (Booking* element in self.bookingsList) {
    [output writeMessage:25 value:element];
  }
  if (self.hasReference) {
    [output writeString:26 value:self.reference];
  }
  for (PlaceTour* element in self.relatedplacesList) {
    [output writeMessage:27 value:element];
  }
  if (self.hasFee) {
    [output writeString:50 value:self.fee];
  }
  if (self.hasBookingNotice) {
    [output writeString:51 value:self.bookingNotice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRouteId) {
    size += computeInt32Size(1, self.routeId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasDepartCityId) {
    size += computeInt32Size(3, self.departCityId);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableDestinationCityIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableDestinationCityIdsList.count;
  }
  if (self.hasPrice) {
    size += computeStringSize(5, self.price);
  }
  if (self.hasAgencyId) {
    size += computeInt32Size(6, self.agencyId);
  }
  if (self.hasAverageRank) {
    size += computeInt32Size(7, self.averageRank);
  }
  if (self.hasThumbImage) {
    size += computeStringSize(10, self.thumbImage);
  }
  if (self.hasTour) {
    size += computeStringSize(11, self.tour);
  }
  if (self.hasDays) {
    size += computeInt32Size(12, self.days);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableThemeIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableThemeIdsList.count;
  }
  if (self.hasCategoryId) {
    size += computeInt32Size(14, self.categoryId);
  }
  if (self.hasFollowUserCount) {
    size += computeInt32Size(15, self.followUserCount);
  }
  if (self.hasCustomerServiceTelephone) {
    size += computeStringSize(20, self.customerServiceTelephone);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableDetailImagesList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 2 * self.mutableDetailImagesList.count;
  }
  if (self.hasCharacteristic) {
    size += computeStringSize(22, self.characteristic);
  }
  for (DailySchedule* element in self.dailySchedulesList) {
    size += computeMessageSize(23, element);
  }
  for (TravelPackage* element in self.packagesList) {
    size += computeMessageSize(24, element);
  }
  for (Booking* element in self.bookingsList) {
    size += computeMessageSize(25, element);
  }
  if (self.hasReference) {
    size += computeStringSize(26, self.reference);
  }
  for (PlaceTour* element in self.relatedplacesList) {
    size += computeMessageSize(27, element);
  }
  if (self.hasFee) {
    size += computeStringSize(50, self.fee);
  }
  if (self.hasBookingNotice) {
    size += computeStringSize(51, self.bookingNotice);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TouristRoute*) parseFromData:(NSData*) data {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromData:data] build];
}
+ (TouristRoute*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TouristRoute*) parseFromInputStream:(NSInputStream*) input {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromInputStream:input] build];
}
+ (TouristRoute*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TouristRoute*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromCodedInputStream:input] build];
}
+ (TouristRoute*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TouristRoute_Builder*) builder {
  return [[[TouristRoute_Builder alloc] init] autorelease];
}
+ (TouristRoute_Builder*) builderWithPrototype:(TouristRoute*) prototype {
  return [[TouristRoute builder] mergeFrom:prototype];
}
- (TouristRoute_Builder*) builder {
  return [TouristRoute builder];
}
@end

@interface TouristRoute_Builder()
@property (retain) TouristRoute* result;
@end

@implementation TouristRoute_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TouristRoute alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TouristRoute_Builder*) clear {
  self.result = [[[TouristRoute alloc] init] autorelease];
  return self;
}
- (TouristRoute_Builder*) clone {
  return [TouristRoute builderWithPrototype:result];
}
- (TouristRoute*) defaultInstance {
  return [TouristRoute defaultInstance];
}
- (TouristRoute*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TouristRoute*) buildPartial {
  TouristRoute* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TouristRoute_Builder*) mergeFrom:(TouristRoute*) other {
  if (other == [TouristRoute defaultInstance]) {
    return self;
  }
  if (other.hasRouteId) {
    [self setRouteId:other.routeId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDepartCityId) {
    [self setDepartCityId:other.departCityId];
  }
  if (other.mutableDestinationCityIdsList.count > 0) {
    if (result.mutableDestinationCityIdsList == nil) {
      result.mutableDestinationCityIdsList = [NSMutableArray array];
    }
    [result.mutableDestinationCityIdsList addObjectsFromArray:other.mutableDestinationCityIdsList];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasAgencyId) {
    [self setAgencyId:other.agencyId];
  }
  if (other.hasAverageRank) {
    [self setAverageRank:other.averageRank];
  }
  if (other.hasThumbImage) {
    [self setThumbImage:other.thumbImage];
  }
  if (other.hasTour) {
    [self setTour:other.tour];
  }
  if (other.hasDays) {
    [self setDays:other.days];
  }
  if (other.mutableThemeIdsList.count > 0) {
    if (result.mutableThemeIdsList == nil) {
      result.mutableThemeIdsList = [NSMutableArray array];
    }
    [result.mutableThemeIdsList addObjectsFromArray:other.mutableThemeIdsList];
  }
  if (other.hasCategoryId) {
    [self setCategoryId:other.categoryId];
  }
  if (other.hasFollowUserCount) {
    [self setFollowUserCount:other.followUserCount];
  }
  if (other.hasCustomerServiceTelephone) {
    [self setCustomerServiceTelephone:other.customerServiceTelephone];
  }
  if (other.mutableDetailImagesList.count > 0) {
    if (result.mutableDetailImagesList == nil) {
      result.mutableDetailImagesList = [NSMutableArray array];
    }
    [result.mutableDetailImagesList addObjectsFromArray:other.mutableDetailImagesList];
  }
  if (other.hasCharacteristic) {
    [self setCharacteristic:other.characteristic];
  }
  if (other.mutableDailySchedulesList.count > 0) {
    if (result.mutableDailySchedulesList == nil) {
      result.mutableDailySchedulesList = [NSMutableArray array];
    }
    [result.mutableDailySchedulesList addObjectsFromArray:other.mutableDailySchedulesList];
  }
  if (other.mutablePackagesList.count > 0) {
    if (result.mutablePackagesList == nil) {
      result.mutablePackagesList = [NSMutableArray array];
    }
    [result.mutablePackagesList addObjectsFromArray:other.mutablePackagesList];
  }
  if (other.mutableBookingsList.count > 0) {
    if (result.mutableBookingsList == nil) {
      result.mutableBookingsList = [NSMutableArray array];
    }
    [result.mutableBookingsList addObjectsFromArray:other.mutableBookingsList];
  }
  if (other.hasReference) {
    [self setReference:other.reference];
  }
  if (other.mutableRelatedplacesList.count > 0) {
    if (result.mutableRelatedplacesList == nil) {
      result.mutableRelatedplacesList = [NSMutableArray array];
    }
    [result.mutableRelatedplacesList addObjectsFromArray:other.mutableRelatedplacesList];
  }
  if (other.hasFee) {
    [self setFee:other.fee];
  }
  if (other.hasBookingNotice) {
    [self setBookingNotice:other.bookingNotice];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TouristRoute_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TouristRoute_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRouteId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setDepartCityId:[input readInt32]];
        break;
      }
      case 32: {
        [self addDestinationCityIds:[input readInt32]];
        break;
      }
      case 42: {
        [self setPrice:[input readString]];
        break;
      }
      case 48: {
        [self setAgencyId:[input readInt32]];
        break;
      }
      case 56: {
        [self setAverageRank:[input readInt32]];
        break;
      }
      case 82: {
        [self setThumbImage:[input readString]];
        break;
      }
      case 90: {
        [self setTour:[input readString]];
        break;
      }
      case 96: {
        [self setDays:[input readInt32]];
        break;
      }
      case 104: {
        [self addThemeIds:[input readInt32]];
        break;
      }
      case 112: {
        [self setCategoryId:[input readInt32]];
        break;
      }
      case 120: {
        [self setFollowUserCount:[input readInt32]];
        break;
      }
      case 162: {
        [self setCustomerServiceTelephone:[input readString]];
        break;
      }
      case 170: {
        [self addDetailImages:[input readString]];
        break;
      }
      case 178: {
        [self setCharacteristic:[input readString]];
        break;
      }
      case 186: {
        DailySchedule_Builder* subBuilder = [DailySchedule builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDailySchedules:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        TravelPackage_Builder* subBuilder = [TravelPackage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPackages:[subBuilder buildPartial]];
        break;
      }
      case 202: {
        Booking_Builder* subBuilder = [Booking builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBookings:[subBuilder buildPartial]];
        break;
      }
      case 210: {
        [self setReference:[input readString]];
        break;
      }
      case 218: {
        PlaceTour_Builder* subBuilder = [PlaceTour builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRelatedplaces:[subBuilder buildPartial]];
        break;
      }
      case 402: {
        [self setFee:[input readString]];
        break;
      }
      case 410: {
        [self setBookingNotice:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRouteId {
  return result.hasRouteId;
}
- (int32_t) routeId {
  return result.routeId;
}
- (TouristRoute_Builder*) setRouteId:(int32_t) value {
  result.hasRouteId = YES;
  result.routeId = value;
  return self;
}
- (TouristRoute_Builder*) clearRouteId {
  result.hasRouteId = NO;
  result.routeId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TouristRoute_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TouristRoute_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDepartCityId {
  return result.hasDepartCityId;
}
- (int32_t) departCityId {
  return result.departCityId;
}
- (TouristRoute_Builder*) setDepartCityId:(int32_t) value {
  result.hasDepartCityId = YES;
  result.departCityId = value;
  return self;
}
- (TouristRoute_Builder*) clearDepartCityId {
  result.hasDepartCityId = NO;
  result.departCityId = 0;
  return self;
}
- (NSArray*) destinationCityIdsList {
  if (result.mutableDestinationCityIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableDestinationCityIdsList;
}
- (int32_t) destinationCityIdsAtIndex:(int32_t) index {
  return [result destinationCityIdsAtIndex:index];
}
- (TouristRoute_Builder*) replaceDestinationCityIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableDestinationCityIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addDestinationCityIds:(int32_t) value {
  if (result.mutableDestinationCityIdsList == nil) {
    result.mutableDestinationCityIdsList = [NSMutableArray array];
  }
  [result.mutableDestinationCityIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addAllDestinationCityIds:(NSArray*) values {
  if (result.mutableDestinationCityIdsList == nil) {
    result.mutableDestinationCityIdsList = [NSMutableArray array];
  }
  [result.mutableDestinationCityIdsList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearDestinationCityIdsList {
  result.mutableDestinationCityIdsList = nil;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (NSString*) price {
  return result.price;
}
- (TouristRoute_Builder*) setPrice:(NSString*) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (TouristRoute_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = @"";
  return self;
}
- (BOOL) hasAgencyId {
  return result.hasAgencyId;
}
- (int32_t) agencyId {
  return result.agencyId;
}
- (TouristRoute_Builder*) setAgencyId:(int32_t) value {
  result.hasAgencyId = YES;
  result.agencyId = value;
  return self;
}
- (TouristRoute_Builder*) clearAgencyId {
  result.hasAgencyId = NO;
  result.agencyId = 0;
  return self;
}
- (BOOL) hasAverageRank {
  return result.hasAverageRank;
}
- (int32_t) averageRank {
  return result.averageRank;
}
- (TouristRoute_Builder*) setAverageRank:(int32_t) value {
  result.hasAverageRank = YES;
  result.averageRank = value;
  return self;
}
- (TouristRoute_Builder*) clearAverageRank {
  result.hasAverageRank = NO;
  result.averageRank = 0;
  return self;
}
- (BOOL) hasThumbImage {
  return result.hasThumbImage;
}
- (NSString*) thumbImage {
  return result.thumbImage;
}
- (TouristRoute_Builder*) setThumbImage:(NSString*) value {
  result.hasThumbImage = YES;
  result.thumbImage = value;
  return self;
}
- (TouristRoute_Builder*) clearThumbImage {
  result.hasThumbImage = NO;
  result.thumbImage = @"";
  return self;
}
- (BOOL) hasTour {
  return result.hasTour;
}
- (NSString*) tour {
  return result.tour;
}
- (TouristRoute_Builder*) setTour:(NSString*) value {
  result.hasTour = YES;
  result.tour = value;
  return self;
}
- (TouristRoute_Builder*) clearTour {
  result.hasTour = NO;
  result.tour = @"";
  return self;
}
- (BOOL) hasDays {
  return result.hasDays;
}
- (int32_t) days {
  return result.days;
}
- (TouristRoute_Builder*) setDays:(int32_t) value {
  result.hasDays = YES;
  result.days = value;
  return self;
}
- (TouristRoute_Builder*) clearDays {
  result.hasDays = NO;
  result.days = 0;
  return self;
}
- (NSArray*) themeIdsList {
  if (result.mutableThemeIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableThemeIdsList;
}
- (int32_t) themeIdsAtIndex:(int32_t) index {
  return [result themeIdsAtIndex:index];
}
- (TouristRoute_Builder*) replaceThemeIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableThemeIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addThemeIds:(int32_t) value {
  if (result.mutableThemeIdsList == nil) {
    result.mutableThemeIdsList = [NSMutableArray array];
  }
  [result.mutableThemeIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addAllThemeIds:(NSArray*) values {
  if (result.mutableThemeIdsList == nil) {
    result.mutableThemeIdsList = [NSMutableArray array];
  }
  [result.mutableThemeIdsList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearThemeIdsList {
  result.mutableThemeIdsList = nil;
  return self;
}
- (BOOL) hasCategoryId {
  return result.hasCategoryId;
}
- (int32_t) categoryId {
  return result.categoryId;
}
- (TouristRoute_Builder*) setCategoryId:(int32_t) value {
  result.hasCategoryId = YES;
  result.categoryId = value;
  return self;
}
- (TouristRoute_Builder*) clearCategoryId {
  result.hasCategoryId = NO;
  result.categoryId = 0;
  return self;
}
- (BOOL) hasFollowUserCount {
  return result.hasFollowUserCount;
}
- (int32_t) followUserCount {
  return result.followUserCount;
}
- (TouristRoute_Builder*) setFollowUserCount:(int32_t) value {
  result.hasFollowUserCount = YES;
  result.followUserCount = value;
  return self;
}
- (TouristRoute_Builder*) clearFollowUserCount {
  result.hasFollowUserCount = NO;
  result.followUserCount = 0;
  return self;
}
- (BOOL) hasCustomerServiceTelephone {
  return result.hasCustomerServiceTelephone;
}
- (NSString*) customerServiceTelephone {
  return result.customerServiceTelephone;
}
- (TouristRoute_Builder*) setCustomerServiceTelephone:(NSString*) value {
  result.hasCustomerServiceTelephone = YES;
  result.customerServiceTelephone = value;
  return self;
}
- (TouristRoute_Builder*) clearCustomerServiceTelephone {
  result.hasCustomerServiceTelephone = NO;
  result.customerServiceTelephone = @"";
  return self;
}
- (NSArray*) detailImagesList {
  if (result.mutableDetailImagesList == nil) {
    return [NSArray array];
  }
  return result.mutableDetailImagesList;
}
- (NSString*) detailImagesAtIndex:(int32_t) index {
  return [result detailImagesAtIndex:index];
}
- (TouristRoute_Builder*) replaceDetailImagesAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableDetailImagesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TouristRoute_Builder*) addDetailImages:(NSString*) value {
  if (result.mutableDetailImagesList == nil) {
    result.mutableDetailImagesList = [NSMutableArray array];
  }
  [result.mutableDetailImagesList addObject:value];
  return self;
}
- (TouristRoute_Builder*) addAllDetailImages:(NSArray*) values {
  if (result.mutableDetailImagesList == nil) {
    result.mutableDetailImagesList = [NSMutableArray array];
  }
  [result.mutableDetailImagesList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearDetailImagesList {
  result.mutableDetailImagesList = nil;
  return self;
}
- (BOOL) hasCharacteristic {
  return result.hasCharacteristic;
}
- (NSString*) characteristic {
  return result.characteristic;
}
- (TouristRoute_Builder*) setCharacteristic:(NSString*) value {
  result.hasCharacteristic = YES;
  result.characteristic = value;
  return self;
}
- (TouristRoute_Builder*) clearCharacteristic {
  result.hasCharacteristic = NO;
  result.characteristic = @"";
  return self;
}
- (NSArray*) dailySchedulesList {
  if (result.mutableDailySchedulesList == nil) { return [NSArray array]; }
  return result.mutableDailySchedulesList;
}
- (DailySchedule*) dailySchedulesAtIndex:(int32_t) index {
  return [result dailySchedulesAtIndex:index];
}
- (TouristRoute_Builder*) replaceDailySchedulesAtIndex:(int32_t) index with:(DailySchedule*) value {
  [result.mutableDailySchedulesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TouristRoute_Builder*) addAllDailySchedules:(NSArray*) values {
  if (result.mutableDailySchedulesList == nil) {
    result.mutableDailySchedulesList = [NSMutableArray array];
  }
  [result.mutableDailySchedulesList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearDailySchedulesList {
  result.mutableDailySchedulesList = nil;
  return self;
}
- (TouristRoute_Builder*) addDailySchedules:(DailySchedule*) value {
  if (result.mutableDailySchedulesList == nil) {
    result.mutableDailySchedulesList = [NSMutableArray array];
  }
  [result.mutableDailySchedulesList addObject:value];
  return self;
}
- (NSArray*) packagesList {
  if (result.mutablePackagesList == nil) { return [NSArray array]; }
  return result.mutablePackagesList;
}
- (TravelPackage*) packagesAtIndex:(int32_t) index {
  return [result packagesAtIndex:index];
}
- (TouristRoute_Builder*) replacePackagesAtIndex:(int32_t) index with:(TravelPackage*) value {
  [result.mutablePackagesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TouristRoute_Builder*) addAllPackages:(NSArray*) values {
  if (result.mutablePackagesList == nil) {
    result.mutablePackagesList = [NSMutableArray array];
  }
  [result.mutablePackagesList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearPackagesList {
  result.mutablePackagesList = nil;
  return self;
}
- (TouristRoute_Builder*) addPackages:(TravelPackage*) value {
  if (result.mutablePackagesList == nil) {
    result.mutablePackagesList = [NSMutableArray array];
  }
  [result.mutablePackagesList addObject:value];
  return self;
}
- (NSArray*) bookingsList {
  if (result.mutableBookingsList == nil) { return [NSArray array]; }
  return result.mutableBookingsList;
}
- (Booking*) bookingsAtIndex:(int32_t) index {
  return [result bookingsAtIndex:index];
}
- (TouristRoute_Builder*) replaceBookingsAtIndex:(int32_t) index with:(Booking*) value {
  [result.mutableBookingsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TouristRoute_Builder*) addAllBookings:(NSArray*) values {
  if (result.mutableBookingsList == nil) {
    result.mutableBookingsList = [NSMutableArray array];
  }
  [result.mutableBookingsList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearBookingsList {
  result.mutableBookingsList = nil;
  return self;
}
- (TouristRoute_Builder*) addBookings:(Booking*) value {
  if (result.mutableBookingsList == nil) {
    result.mutableBookingsList = [NSMutableArray array];
  }
  [result.mutableBookingsList addObject:value];
  return self;
}
- (BOOL) hasReference {
  return result.hasReference;
}
- (NSString*) reference {
  return result.reference;
}
- (TouristRoute_Builder*) setReference:(NSString*) value {
  result.hasReference = YES;
  result.reference = value;
  return self;
}
- (TouristRoute_Builder*) clearReference {
  result.hasReference = NO;
  result.reference = @"";
  return self;
}
- (NSArray*) relatedplacesList {
  if (result.mutableRelatedplacesList == nil) { return [NSArray array]; }
  return result.mutableRelatedplacesList;
}
- (PlaceTour*) relatedplacesAtIndex:(int32_t) index {
  return [result relatedplacesAtIndex:index];
}
- (TouristRoute_Builder*) replaceRelatedplacesAtIndex:(int32_t) index with:(PlaceTour*) value {
  [result.mutableRelatedplacesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TouristRoute_Builder*) addAllRelatedplaces:(NSArray*) values {
  if (result.mutableRelatedplacesList == nil) {
    result.mutableRelatedplacesList = [NSMutableArray array];
  }
  [result.mutableRelatedplacesList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearRelatedplacesList {
  result.mutableRelatedplacesList = nil;
  return self;
}
- (TouristRoute_Builder*) addRelatedplaces:(PlaceTour*) value {
  if (result.mutableRelatedplacesList == nil) {
    result.mutableRelatedplacesList = [NSMutableArray array];
  }
  [result.mutableRelatedplacesList addObject:value];
  return self;
}
- (BOOL) hasFee {
  return result.hasFee;
}
- (NSString*) fee {
  return result.fee;
}
- (TouristRoute_Builder*) setFee:(NSString*) value {
  result.hasFee = YES;
  result.fee = value;
  return self;
}
- (TouristRoute_Builder*) clearFee {
  result.hasFee = NO;
  result.fee = @"";
  return self;
}
- (BOOL) hasBookingNotice {
  return result.hasBookingNotice;
}
- (NSString*) bookingNotice {
  return result.bookingNotice;
}
- (TouristRoute_Builder*) setBookingNotice:(NSString*) value {
  result.hasBookingNotice = YES;
  result.bookingNotice = value;
  return self;
}
- (TouristRoute_Builder*) clearBookingNotice {
  result.hasBookingNotice = NO;
  result.bookingNotice = @"";
  return self;
}
@end

@interface DailySchedule ()
@property int32_t day;
@property (retain) NSString* title;
@property (retain) NSMutableArray* mutablePlaceToursList;
@property (retain) NSString* breakfast;
@property (retain) NSString* lunch;
@property (retain) NSString* dinner;
@property (retain) Accommodation* accommodation;
@end

@implementation DailySchedule

- (BOOL) hasDay {
  return !!hasDay_;
}
- (void) setHasDay:(BOOL) value {
  hasDay_ = !!value;
}
@synthesize day;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
@synthesize mutablePlaceToursList;
- (BOOL) hasBreakfast {
  return !!hasBreakfast_;
}
- (void) setHasBreakfast:(BOOL) value {
  hasBreakfast_ = !!value;
}
@synthesize breakfast;
- (BOOL) hasLunch {
  return !!hasLunch_;
}
- (void) setHasLunch:(BOOL) value {
  hasLunch_ = !!value;
}
@synthesize lunch;
- (BOOL) hasDinner {
  return !!hasDinner_;
}
- (void) setHasDinner:(BOOL) value {
  hasDinner_ = !!value;
}
@synthesize dinner;
- (BOOL) hasAccommodation {
  return !!hasAccommodation_;
}
- (void) setHasAccommodation:(BOOL) value {
  hasAccommodation_ = !!value;
}
@synthesize accommodation;
- (void) dealloc {
  self.title = nil;
  self.mutablePlaceToursList = nil;
  self.breakfast = nil;
  self.lunch = nil;
  self.dinner = nil;
  self.accommodation = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.day = 0;
    self.title = @"";
    self.breakfast = @"";
    self.lunch = @"";
    self.dinner = @"";
    self.accommodation = [Accommodation defaultInstance];
  }
  return self;
}
static DailySchedule* defaultDailyScheduleInstance = nil;
+ (void) initialize {
  if (self == [DailySchedule class]) {
    defaultDailyScheduleInstance = [[DailySchedule alloc] init];
  }
}
+ (DailySchedule*) defaultInstance {
  return defaultDailyScheduleInstance;
}
- (DailySchedule*) defaultInstance {
  return defaultDailyScheduleInstance;
}
- (NSArray*) placeToursList {
  return mutablePlaceToursList;
}
- (PlaceTour*) placeToursAtIndex:(int32_t) index {
  id value = [mutablePlaceToursList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasDay) {
    return NO;
  }
  if (!self.hasTitle) {
    return NO;
  }
  for (PlaceTour* element in self.placeToursList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasAccommodation) {
    if (!self.accommodation.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDay) {
    [output writeInt32:1 value:self.day];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  for (PlaceTour* element in self.placeToursList) {
    [output writeMessage:3 value:element];
  }
  if (self.hasBreakfast) {
    [output writeString:4 value:self.breakfast];
  }
  if (self.hasLunch) {
    [output writeString:5 value:self.lunch];
  }
  if (self.hasDinner) {
    [output writeString:6 value:self.dinner];
  }
  if (self.hasAccommodation) {
    [output writeMessage:7 value:self.accommodation];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDay) {
    size += computeInt32Size(1, self.day);
  }
  if (self.hasTitle) {
    size += computeStringSize(2, self.title);
  }
  for (PlaceTour* element in self.placeToursList) {
    size += computeMessageSize(3, element);
  }
  if (self.hasBreakfast) {
    size += computeStringSize(4, self.breakfast);
  }
  if (self.hasLunch) {
    size += computeStringSize(5, self.lunch);
  }
  if (self.hasDinner) {
    size += computeStringSize(6, self.dinner);
  }
  if (self.hasAccommodation) {
    size += computeMessageSize(7, self.accommodation);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DailySchedule*) parseFromData:(NSData*) data {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromData:data] build];
}
+ (DailySchedule*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DailySchedule*) parseFromInputStream:(NSInputStream*) input {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromInputStream:input] build];
}
+ (DailySchedule*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DailySchedule*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromCodedInputStream:input] build];
}
+ (DailySchedule*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DailySchedule_Builder*) builder {
  return [[[DailySchedule_Builder alloc] init] autorelease];
}
+ (DailySchedule_Builder*) builderWithPrototype:(DailySchedule*) prototype {
  return [[DailySchedule builder] mergeFrom:prototype];
}
- (DailySchedule_Builder*) builder {
  return [DailySchedule builder];
}
@end

@interface DailySchedule_Builder()
@property (retain) DailySchedule* result;
@end

@implementation DailySchedule_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DailySchedule alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DailySchedule_Builder*) clear {
  self.result = [[[DailySchedule alloc] init] autorelease];
  return self;
}
- (DailySchedule_Builder*) clone {
  return [DailySchedule builderWithPrototype:result];
}
- (DailySchedule*) defaultInstance {
  return [DailySchedule defaultInstance];
}
- (DailySchedule*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DailySchedule*) buildPartial {
  DailySchedule* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DailySchedule_Builder*) mergeFrom:(DailySchedule*) other {
  if (other == [DailySchedule defaultInstance]) {
    return self;
  }
  if (other.hasDay) {
    [self setDay:other.day];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.mutablePlaceToursList.count > 0) {
    if (result.mutablePlaceToursList == nil) {
      result.mutablePlaceToursList = [NSMutableArray array];
    }
    [result.mutablePlaceToursList addObjectsFromArray:other.mutablePlaceToursList];
  }
  if (other.hasBreakfast) {
    [self setBreakfast:other.breakfast];
  }
  if (other.hasLunch) {
    [self setLunch:other.lunch];
  }
  if (other.hasDinner) {
    [self setDinner:other.dinner];
  }
  if (other.hasAccommodation) {
    [self mergeAccommodation:other.accommodation];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DailySchedule_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DailySchedule_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDay:[input readInt32]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 26: {
        PlaceTour_Builder* subBuilder = [PlaceTour builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlaceTours:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setBreakfast:[input readString]];
        break;
      }
      case 42: {
        [self setLunch:[input readString]];
        break;
      }
      case 50: {
        [self setDinner:[input readString]];
        break;
      }
      case 58: {
        Accommodation_Builder* subBuilder = [Accommodation builder];
        if (self.hasAccommodation) {
          [subBuilder mergeFrom:self.accommodation];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAccommodation:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDay {
  return result.hasDay;
}
- (int32_t) day {
  return result.day;
}
- (DailySchedule_Builder*) setDay:(int32_t) value {
  result.hasDay = YES;
  result.day = value;
  return self;
}
- (DailySchedule_Builder*) clearDay {
  result.hasDay = NO;
  result.day = 0;
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (DailySchedule_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (DailySchedule_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (NSArray*) placeToursList {
  if (result.mutablePlaceToursList == nil) { return [NSArray array]; }
  return result.mutablePlaceToursList;
}
- (PlaceTour*) placeToursAtIndex:(int32_t) index {
  return [result placeToursAtIndex:index];
}
- (DailySchedule_Builder*) replacePlaceToursAtIndex:(int32_t) index with:(PlaceTour*) value {
  [result.mutablePlaceToursList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DailySchedule_Builder*) addAllPlaceTours:(NSArray*) values {
  if (result.mutablePlaceToursList == nil) {
    result.mutablePlaceToursList = [NSMutableArray array];
  }
  [result.mutablePlaceToursList addObjectsFromArray:values];
  return self;
}
- (DailySchedule_Builder*) clearPlaceToursList {
  result.mutablePlaceToursList = nil;
  return self;
}
- (DailySchedule_Builder*) addPlaceTours:(PlaceTour*) value {
  if (result.mutablePlaceToursList == nil) {
    result.mutablePlaceToursList = [NSMutableArray array];
  }
  [result.mutablePlaceToursList addObject:value];
  return self;
}
- (BOOL) hasBreakfast {
  return result.hasBreakfast;
}
- (NSString*) breakfast {
  return result.breakfast;
}
- (DailySchedule_Builder*) setBreakfast:(NSString*) value {
  result.hasBreakfast = YES;
  result.breakfast = value;
  return self;
}
- (DailySchedule_Builder*) clearBreakfast {
  result.hasBreakfast = NO;
  result.breakfast = @"";
  return self;
}
- (BOOL) hasLunch {
  return result.hasLunch;
}
- (NSString*) lunch {
  return result.lunch;
}
- (DailySchedule_Builder*) setLunch:(NSString*) value {
  result.hasLunch = YES;
  result.lunch = value;
  return self;
}
- (DailySchedule_Builder*) clearLunch {
  result.hasLunch = NO;
  result.lunch = @"";
  return self;
}
- (BOOL) hasDinner {
  return result.hasDinner;
}
- (NSString*) dinner {
  return result.dinner;
}
- (DailySchedule_Builder*) setDinner:(NSString*) value {
  result.hasDinner = YES;
  result.dinner = value;
  return self;
}
- (DailySchedule_Builder*) clearDinner {
  result.hasDinner = NO;
  result.dinner = @"";
  return self;
}
- (BOOL) hasAccommodation {
  return result.hasAccommodation;
}
- (Accommodation*) accommodation {
  return result.accommodation;
}
- (DailySchedule_Builder*) setAccommodation:(Accommodation*) value {
  result.hasAccommodation = YES;
  result.accommodation = value;
  return self;
}
- (DailySchedule_Builder*) setAccommodationBuilder:(Accommodation_Builder*) builderForValue {
  return [self setAccommodation:[builderForValue build]];
}
- (DailySchedule_Builder*) mergeAccommodation:(Accommodation*) value {
  if (result.hasAccommodation &&
      result.accommodation != [Accommodation defaultInstance]) {
    result.accommodation =
      [[[Accommodation builderWithPrototype:result.accommodation] mergeFrom:value] buildPartial];
  } else {
    result.accommodation = value;
  }
  result.hasAccommodation = YES;
  return self;
}
- (DailySchedule_Builder*) clearAccommodation {
  result.hasAccommodation = NO;
  result.accommodation = [Accommodation defaultInstance];
  return self;
}
@end

@interface TravelPackage ()
@property int32_t packageId;
@property (retain) Flight* departFlight;
@property (retain) Flight* returnFlight;
@property (retain) NSMutableArray* mutableAccommodationsList;
@end

@implementation TravelPackage

- (BOOL) hasPackageId {
  return !!hasPackageId_;
}
- (void) setHasPackageId:(BOOL) value {
  hasPackageId_ = !!value;
}
@synthesize packageId;
- (BOOL) hasDepartFlight {
  return !!hasDepartFlight_;
}
- (void) setHasDepartFlight:(BOOL) value {
  hasDepartFlight_ = !!value;
}
@synthesize departFlight;
- (BOOL) hasReturnFlight {
  return !!hasReturnFlight_;
}
- (void) setHasReturnFlight:(BOOL) value {
  hasReturnFlight_ = !!value;
}
@synthesize returnFlight;
@synthesize mutableAccommodationsList;
- (void) dealloc {
  self.departFlight = nil;
  self.returnFlight = nil;
  self.mutableAccommodationsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.packageId = 0;
    self.departFlight = [Flight defaultInstance];
    self.returnFlight = [Flight defaultInstance];
  }
  return self;
}
static TravelPackage* defaultTravelPackageInstance = nil;
+ (void) initialize {
  if (self == [TravelPackage class]) {
    defaultTravelPackageInstance = [[TravelPackage alloc] init];
  }
}
+ (TravelPackage*) defaultInstance {
  return defaultTravelPackageInstance;
}
- (TravelPackage*) defaultInstance {
  return defaultTravelPackageInstance;
}
- (NSArray*) accommodationsList {
  return mutableAccommodationsList;
}
- (Accommodation*) accommodationsAtIndex:(int32_t) index {
  id value = [mutableAccommodationsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasPackageId) {
    return NO;
  }
  if (self.hasDepartFlight) {
    if (!self.departFlight.isInitialized) {
      return NO;
    }
  }
  if (self.hasReturnFlight) {
    if (!self.returnFlight.isInitialized) {
      return NO;
    }
  }
  for (Accommodation* element in self.accommodationsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPackageId) {
    [output writeInt32:1 value:self.packageId];
  }
  if (self.hasDepartFlight) {
    [output writeMessage:2 value:self.departFlight];
  }
  if (self.hasReturnFlight) {
    [output writeMessage:3 value:self.returnFlight];
  }
  for (Accommodation* element in self.accommodationsList) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPackageId) {
    size += computeInt32Size(1, self.packageId);
  }
  if (self.hasDepartFlight) {
    size += computeMessageSize(2, self.departFlight);
  }
  if (self.hasReturnFlight) {
    size += computeMessageSize(3, self.returnFlight);
  }
  for (Accommodation* element in self.accommodationsList) {
    size += computeMessageSize(4, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TravelPackage*) parseFromData:(NSData*) data {
  return (TravelPackage*)[[[TravelPackage builder] mergeFromData:data] build];
}
+ (TravelPackage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelPackage*)[[[TravelPackage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TravelPackage*) parseFromInputStream:(NSInputStream*) input {
  return (TravelPackage*)[[[TravelPackage builder] mergeFromInputStream:input] build];
}
+ (TravelPackage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelPackage*)[[[TravelPackage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TravelPackage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TravelPackage*)[[[TravelPackage builder] mergeFromCodedInputStream:input] build];
}
+ (TravelPackage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelPackage*)[[[TravelPackage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TravelPackage_Builder*) builder {
  return [[[TravelPackage_Builder alloc] init] autorelease];
}
+ (TravelPackage_Builder*) builderWithPrototype:(TravelPackage*) prototype {
  return [[TravelPackage builder] mergeFrom:prototype];
}
- (TravelPackage_Builder*) builder {
  return [TravelPackage builder];
}
@end

@interface TravelPackage_Builder()
@property (retain) TravelPackage* result;
@end

@implementation TravelPackage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TravelPackage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TravelPackage_Builder*) clear {
  self.result = [[[TravelPackage alloc] init] autorelease];
  return self;
}
- (TravelPackage_Builder*) clone {
  return [TravelPackage builderWithPrototype:result];
}
- (TravelPackage*) defaultInstance {
  return [TravelPackage defaultInstance];
}
- (TravelPackage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TravelPackage*) buildPartial {
  TravelPackage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TravelPackage_Builder*) mergeFrom:(TravelPackage*) other {
  if (other == [TravelPackage defaultInstance]) {
    return self;
  }
  if (other.hasPackageId) {
    [self setPackageId:other.packageId];
  }
  if (other.hasDepartFlight) {
    [self mergeDepartFlight:other.departFlight];
  }
  if (other.hasReturnFlight) {
    [self mergeReturnFlight:other.returnFlight];
  }
  if (other.mutableAccommodationsList.count > 0) {
    if (result.mutableAccommodationsList == nil) {
      result.mutableAccommodationsList = [NSMutableArray array];
    }
    [result.mutableAccommodationsList addObjectsFromArray:other.mutableAccommodationsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TravelPackage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TravelPackage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPackageId:[input readInt32]];
        break;
      }
      case 18: {
        Flight_Builder* subBuilder = [Flight builder];
        if (self.hasDepartFlight) {
          [subBuilder mergeFrom:self.departFlight];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDepartFlight:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        Flight_Builder* subBuilder = [Flight builder];
        if (self.hasReturnFlight) {
          [subBuilder mergeFrom:self.returnFlight];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setReturnFlight:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        Accommodation_Builder* subBuilder = [Accommodation builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAccommodations:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPackageId {
  return result.hasPackageId;
}
- (int32_t) packageId {
  return result.packageId;
}
- (TravelPackage_Builder*) setPackageId:(int32_t) value {
  result.hasPackageId = YES;
  result.packageId = value;
  return self;
}
- (TravelPackage_Builder*) clearPackageId {
  result.hasPackageId = NO;
  result.packageId = 0;
  return self;
}
- (BOOL) hasDepartFlight {
  return result.hasDepartFlight;
}
- (Flight*) departFlight {
  return result.departFlight;
}
- (TravelPackage_Builder*) setDepartFlight:(Flight*) value {
  result.hasDepartFlight = YES;
  result.departFlight = value;
  return self;
}
- (TravelPackage_Builder*) setDepartFlightBuilder:(Flight_Builder*) builderForValue {
  return [self setDepartFlight:[builderForValue build]];
}
- (TravelPackage_Builder*) mergeDepartFlight:(Flight*) value {
  if (result.hasDepartFlight &&
      result.departFlight != [Flight defaultInstance]) {
    result.departFlight =
      [[[Flight builderWithPrototype:result.departFlight] mergeFrom:value] buildPartial];
  } else {
    result.departFlight = value;
  }
  result.hasDepartFlight = YES;
  return self;
}
- (TravelPackage_Builder*) clearDepartFlight {
  result.hasDepartFlight = NO;
  result.departFlight = [Flight defaultInstance];
  return self;
}
- (BOOL) hasReturnFlight {
  return result.hasReturnFlight;
}
- (Flight*) returnFlight {
  return result.returnFlight;
}
- (TravelPackage_Builder*) setReturnFlight:(Flight*) value {
  result.hasReturnFlight = YES;
  result.returnFlight = value;
  return self;
}
- (TravelPackage_Builder*) setReturnFlightBuilder:(Flight_Builder*) builderForValue {
  return [self setReturnFlight:[builderForValue build]];
}
- (TravelPackage_Builder*) mergeReturnFlight:(Flight*) value {
  if (result.hasReturnFlight &&
      result.returnFlight != [Flight defaultInstance]) {
    result.returnFlight =
      [[[Flight builderWithPrototype:result.returnFlight] mergeFrom:value] buildPartial];
  } else {
    result.returnFlight = value;
  }
  result.hasReturnFlight = YES;
  return self;
}
- (TravelPackage_Builder*) clearReturnFlight {
  result.hasReturnFlight = NO;
  result.returnFlight = [Flight defaultInstance];
  return self;
}
- (NSArray*) accommodationsList {
  if (result.mutableAccommodationsList == nil) { return [NSArray array]; }
  return result.mutableAccommodationsList;
}
- (Accommodation*) accommodationsAtIndex:(int32_t) index {
  return [result accommodationsAtIndex:index];
}
- (TravelPackage_Builder*) replaceAccommodationsAtIndex:(int32_t) index with:(Accommodation*) value {
  [result.mutableAccommodationsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TravelPackage_Builder*) addAllAccommodations:(NSArray*) values {
  if (result.mutableAccommodationsList == nil) {
    result.mutableAccommodationsList = [NSMutableArray array];
  }
  [result.mutableAccommodationsList addObjectsFromArray:values];
  return self;
}
- (TravelPackage_Builder*) clearAccommodationsList {
  result.mutableAccommodationsList = nil;
  return self;
}
- (TravelPackage_Builder*) addAccommodations:(Accommodation*) value {
  if (result.mutableAccommodationsList == nil) {
    result.mutableAccommodationsList = [NSMutableArray array];
  }
  [result.mutableAccommodationsList addObject:value];
  return self;
}
@end

@interface Booking ()
@property int32_t date;
@property int32_t status;
@property (retain) NSString* remainder;
@property (retain) NSString* adultPrice;
@property (retain) NSString* childrenPrice;
@end

@implementation Booking

- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasRemainder {
  return !!hasRemainder_;
}
- (void) setHasRemainder:(BOOL) value {
  hasRemainder_ = !!value;
}
@synthesize remainder;
- (BOOL) hasAdultPrice {
  return !!hasAdultPrice_;
}
- (void) setHasAdultPrice:(BOOL) value {
  hasAdultPrice_ = !!value;
}
@synthesize adultPrice;
- (BOOL) hasChildrenPrice {
  return !!hasChildrenPrice_;
}
- (void) setHasChildrenPrice:(BOOL) value {
  hasChildrenPrice_ = !!value;
}
@synthesize childrenPrice;
- (void) dealloc {
  self.remainder = nil;
  self.adultPrice = nil;
  self.childrenPrice = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.date = 0;
    self.status = 0;
    self.remainder = @"";
    self.adultPrice = @"";
    self.childrenPrice = @"";
  }
  return self;
}
static Booking* defaultBookingInstance = nil;
+ (void) initialize {
  if (self == [Booking class]) {
    defaultBookingInstance = [[Booking alloc] init];
  }
}
+ (Booking*) defaultInstance {
  return defaultBookingInstance;
}
- (Booking*) defaultInstance {
  return defaultBookingInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDate) {
    [output writeInt32:1 value:self.date];
  }
  if (self.hasStatus) {
    [output writeInt32:2 value:self.status];
  }
  if (self.hasRemainder) {
    [output writeString:3 value:self.remainder];
  }
  if (self.hasAdultPrice) {
    [output writeString:4 value:self.adultPrice];
  }
  if (self.hasChildrenPrice) {
    [output writeString:5 value:self.childrenPrice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDate) {
    size += computeInt32Size(1, self.date);
  }
  if (self.hasStatus) {
    size += computeInt32Size(2, self.status);
  }
  if (self.hasRemainder) {
    size += computeStringSize(3, self.remainder);
  }
  if (self.hasAdultPrice) {
    size += computeStringSize(4, self.adultPrice);
  }
  if (self.hasChildrenPrice) {
    size += computeStringSize(5, self.childrenPrice);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Booking*) parseFromData:(NSData*) data {
  return (Booking*)[[[Booking builder] mergeFromData:data] build];
}
+ (Booking*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Booking*)[[[Booking builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Booking*) parseFromInputStream:(NSInputStream*) input {
  return (Booking*)[[[Booking builder] mergeFromInputStream:input] build];
}
+ (Booking*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Booking*)[[[Booking builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Booking*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Booking*)[[[Booking builder] mergeFromCodedInputStream:input] build];
}
+ (Booking*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Booking*)[[[Booking builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Booking_Builder*) builder {
  return [[[Booking_Builder alloc] init] autorelease];
}
+ (Booking_Builder*) builderWithPrototype:(Booking*) prototype {
  return [[Booking builder] mergeFrom:prototype];
}
- (Booking_Builder*) builder {
  return [Booking builder];
}
@end

@interface Booking_Builder()
@property (retain) Booking* result;
@end

@implementation Booking_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Booking alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Booking_Builder*) clear {
  self.result = [[[Booking alloc] init] autorelease];
  return self;
}
- (Booking_Builder*) clone {
  return [Booking builderWithPrototype:result];
}
- (Booking*) defaultInstance {
  return [Booking defaultInstance];
}
- (Booking*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Booking*) buildPartial {
  Booking* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Booking_Builder*) mergeFrom:(Booking*) other {
  if (other == [Booking defaultInstance]) {
    return self;
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasRemainder) {
    [self setRemainder:other.remainder];
  }
  if (other.hasAdultPrice) {
    [self setAdultPrice:other.adultPrice];
  }
  if (other.hasChildrenPrice) {
    [self setChildrenPrice:other.childrenPrice];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Booking_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Booking_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDate:[input readInt32]];
        break;
      }
      case 16: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 26: {
        [self setRemainder:[input readString]];
        break;
      }
      case 34: {
        [self setAdultPrice:[input readString]];
        break;
      }
      case 42: {
        [self setChildrenPrice:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (Booking_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (Booking_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (Booking_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (Booking_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasRemainder {
  return result.hasRemainder;
}
- (NSString*) remainder {
  return result.remainder;
}
- (Booking_Builder*) setRemainder:(NSString*) value {
  result.hasRemainder = YES;
  result.remainder = value;
  return self;
}
- (Booking_Builder*) clearRemainder {
  result.hasRemainder = NO;
  result.remainder = @"";
  return self;
}
- (BOOL) hasAdultPrice {
  return result.hasAdultPrice;
}
- (NSString*) adultPrice {
  return result.adultPrice;
}
- (Booking_Builder*) setAdultPrice:(NSString*) value {
  result.hasAdultPrice = YES;
  result.adultPrice = value;
  return self;
}
- (Booking_Builder*) clearAdultPrice {
  result.hasAdultPrice = NO;
  result.adultPrice = @"";
  return self;
}
- (BOOL) hasChildrenPrice {
  return result.hasChildrenPrice;
}
- (NSString*) childrenPrice {
  return result.childrenPrice;
}
- (Booking_Builder*) setChildrenPrice:(NSString*) value {
  result.hasChildrenPrice = YES;
  result.childrenPrice = value;
  return self;
}
- (Booking_Builder*) clearChildrenPrice {
  result.hasChildrenPrice = NO;
  result.childrenPrice = @"";
  return self;
}
@end

@interface Flight ()
@property (retain) NSString* flightId;
@property (retain) NSString* company;
@property (retain) NSString* mode;
@property (retain) NSString* departCityName;
@property (retain) NSString* departTime;
@property (retain) NSString* departAirport;
@property (retain) NSString* arriveCityName;
@property (retain) NSString* arriveTime;
@property (retain) NSString* arriveAirport;
@end

@implementation Flight

- (BOOL) hasFlightId {
  return !!hasFlightId_;
}
- (void) setHasFlightId:(BOOL) value {
  hasFlightId_ = !!value;
}
@synthesize flightId;
- (BOOL) hasCompany {
  return !!hasCompany_;
}
- (void) setHasCompany:(BOOL) value {
  hasCompany_ = !!value;
}
@synthesize company;
- (BOOL) hasMode {
  return !!hasMode_;
}
- (void) setHasMode:(BOOL) value {
  hasMode_ = !!value;
}
@synthesize mode;
- (BOOL) hasDepartCityName {
  return !!hasDepartCityName_;
}
- (void) setHasDepartCityName:(BOOL) value {
  hasDepartCityName_ = !!value;
}
@synthesize departCityName;
- (BOOL) hasDepartTime {
  return !!hasDepartTime_;
}
- (void) setHasDepartTime:(BOOL) value {
  hasDepartTime_ = !!value;
}
@synthesize departTime;
- (BOOL) hasDepartAirport {
  return !!hasDepartAirport_;
}
- (void) setHasDepartAirport:(BOOL) value {
  hasDepartAirport_ = !!value;
}
@synthesize departAirport;
- (BOOL) hasArriveCityName {
  return !!hasArriveCityName_;
}
- (void) setHasArriveCityName:(BOOL) value {
  hasArriveCityName_ = !!value;
}
@synthesize arriveCityName;
- (BOOL) hasArriveTime {
  return !!hasArriveTime_;
}
- (void) setHasArriveTime:(BOOL) value {
  hasArriveTime_ = !!value;
}
@synthesize arriveTime;
- (BOOL) hasArriveAirport {
  return !!hasArriveAirport_;
}
- (void) setHasArriveAirport:(BOOL) value {
  hasArriveAirport_ = !!value;
}
@synthesize arriveAirport;
- (void) dealloc {
  self.flightId = nil;
  self.company = nil;
  self.mode = nil;
  self.departCityName = nil;
  self.departTime = nil;
  self.departAirport = nil;
  self.arriveCityName = nil;
  self.arriveTime = nil;
  self.arriveAirport = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.flightId = @"";
    self.company = @"";
    self.mode = @"";
    self.departCityName = @"";
    self.departTime = @"";
    self.departAirport = @"";
    self.arriveCityName = @"";
    self.arriveTime = @"";
    self.arriveAirport = @"";
  }
  return self;
}
static Flight* defaultFlightInstance = nil;
+ (void) initialize {
  if (self == [Flight class]) {
    defaultFlightInstance = [[Flight alloc] init];
  }
}
+ (Flight*) defaultInstance {
  return defaultFlightInstance;
}
- (Flight*) defaultInstance {
  return defaultFlightInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFlightId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFlightId) {
    [output writeString:1 value:self.flightId];
  }
  if (self.hasCompany) {
    [output writeString:2 value:self.company];
  }
  if (self.hasMode) {
    [output writeString:3 value:self.mode];
  }
  if (self.hasDepartCityName) {
    [output writeString:4 value:self.departCityName];
  }
  if (self.hasDepartTime) {
    [output writeString:5 value:self.departTime];
  }
  if (self.hasDepartAirport) {
    [output writeString:6 value:self.departAirport];
  }
  if (self.hasArriveCityName) {
    [output writeString:7 value:self.arriveCityName];
  }
  if (self.hasArriveTime) {
    [output writeString:8 value:self.arriveTime];
  }
  if (self.hasArriveAirport) {
    [output writeString:9 value:self.arriveAirport];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasFlightId) {
    size += computeStringSize(1, self.flightId);
  }
  if (self.hasCompany) {
    size += computeStringSize(2, self.company);
  }
  if (self.hasMode) {
    size += computeStringSize(3, self.mode);
  }
  if (self.hasDepartCityName) {
    size += computeStringSize(4, self.departCityName);
  }
  if (self.hasDepartTime) {
    size += computeStringSize(5, self.departTime);
  }
  if (self.hasDepartAirport) {
    size += computeStringSize(6, self.departAirport);
  }
  if (self.hasArriveCityName) {
    size += computeStringSize(7, self.arriveCityName);
  }
  if (self.hasArriveTime) {
    size += computeStringSize(8, self.arriveTime);
  }
  if (self.hasArriveAirport) {
    size += computeStringSize(9, self.arriveAirport);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Flight*) parseFromData:(NSData*) data {
  return (Flight*)[[[Flight builder] mergeFromData:data] build];
}
+ (Flight*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Flight*)[[[Flight builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Flight*) parseFromInputStream:(NSInputStream*) input {
  return (Flight*)[[[Flight builder] mergeFromInputStream:input] build];
}
+ (Flight*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Flight*)[[[Flight builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Flight*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Flight*)[[[Flight builder] mergeFromCodedInputStream:input] build];
}
+ (Flight*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Flight*)[[[Flight builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Flight_Builder*) builder {
  return [[[Flight_Builder alloc] init] autorelease];
}
+ (Flight_Builder*) builderWithPrototype:(Flight*) prototype {
  return [[Flight builder] mergeFrom:prototype];
}
- (Flight_Builder*) builder {
  return [Flight builder];
}
@end

@interface Flight_Builder()
@property (retain) Flight* result;
@end

@implementation Flight_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Flight alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Flight_Builder*) clear {
  self.result = [[[Flight alloc] init] autorelease];
  return self;
}
- (Flight_Builder*) clone {
  return [Flight builderWithPrototype:result];
}
- (Flight*) defaultInstance {
  return [Flight defaultInstance];
}
- (Flight*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Flight*) buildPartial {
  Flight* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Flight_Builder*) mergeFrom:(Flight*) other {
  if (other == [Flight defaultInstance]) {
    return self;
  }
  if (other.hasFlightId) {
    [self setFlightId:other.flightId];
  }
  if (other.hasCompany) {
    [self setCompany:other.company];
  }
  if (other.hasMode) {
    [self setMode:other.mode];
  }
  if (other.hasDepartCityName) {
    [self setDepartCityName:other.departCityName];
  }
  if (other.hasDepartTime) {
    [self setDepartTime:other.departTime];
  }
  if (other.hasDepartAirport) {
    [self setDepartAirport:other.departAirport];
  }
  if (other.hasArriveCityName) {
    [self setArriveCityName:other.arriveCityName];
  }
  if (other.hasArriveTime) {
    [self setArriveTime:other.arriveTime];
  }
  if (other.hasArriveAirport) {
    [self setArriveAirport:other.arriveAirport];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Flight_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Flight_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFlightId:[input readString]];
        break;
      }
      case 18: {
        [self setCompany:[input readString]];
        break;
      }
      case 26: {
        [self setMode:[input readString]];
        break;
      }
      case 34: {
        [self setDepartCityName:[input readString]];
        break;
      }
      case 42: {
        [self setDepartTime:[input readString]];
        break;
      }
      case 50: {
        [self setDepartAirport:[input readString]];
        break;
      }
      case 58: {
        [self setArriveCityName:[input readString]];
        break;
      }
      case 66: {
        [self setArriveTime:[input readString]];
        break;
      }
      case 74: {
        [self setArriveAirport:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFlightId {
  return result.hasFlightId;
}
- (NSString*) flightId {
  return result.flightId;
}
- (Flight_Builder*) setFlightId:(NSString*) value {
  result.hasFlightId = YES;
  result.flightId = value;
  return self;
}
- (Flight_Builder*) clearFlightId {
  result.hasFlightId = NO;
  result.flightId = @"";
  return self;
}
- (BOOL) hasCompany {
  return result.hasCompany;
}
- (NSString*) company {
  return result.company;
}
- (Flight_Builder*) setCompany:(NSString*) value {
  result.hasCompany = YES;
  result.company = value;
  return self;
}
- (Flight_Builder*) clearCompany {
  result.hasCompany = NO;
  result.company = @"";
  return self;
}
- (BOOL) hasMode {
  return result.hasMode;
}
- (NSString*) mode {
  return result.mode;
}
- (Flight_Builder*) setMode:(NSString*) value {
  result.hasMode = YES;
  result.mode = value;
  return self;
}
- (Flight_Builder*) clearMode {
  result.hasMode = NO;
  result.mode = @"";
  return self;
}
- (BOOL) hasDepartCityName {
  return result.hasDepartCityName;
}
- (NSString*) departCityName {
  return result.departCityName;
}
- (Flight_Builder*) setDepartCityName:(NSString*) value {
  result.hasDepartCityName = YES;
  result.departCityName = value;
  return self;
}
- (Flight_Builder*) clearDepartCityName {
  result.hasDepartCityName = NO;
  result.departCityName = @"";
  return self;
}
- (BOOL) hasDepartTime {
  return result.hasDepartTime;
}
- (NSString*) departTime {
  return result.departTime;
}
- (Flight_Builder*) setDepartTime:(NSString*) value {
  result.hasDepartTime = YES;
  result.departTime = value;
  return self;
}
- (Flight_Builder*) clearDepartTime {
  result.hasDepartTime = NO;
  result.departTime = @"";
  return self;
}
- (BOOL) hasDepartAirport {
  return result.hasDepartAirport;
}
- (NSString*) departAirport {
  return result.departAirport;
}
- (Flight_Builder*) setDepartAirport:(NSString*) value {
  result.hasDepartAirport = YES;
  result.departAirport = value;
  return self;
}
- (Flight_Builder*) clearDepartAirport {
  result.hasDepartAirport = NO;
  result.departAirport = @"";
  return self;
}
- (BOOL) hasArriveCityName {
  return result.hasArriveCityName;
}
- (NSString*) arriveCityName {
  return result.arriveCityName;
}
- (Flight_Builder*) setArriveCityName:(NSString*) value {
  result.hasArriveCityName = YES;
  result.arriveCityName = value;
  return self;
}
- (Flight_Builder*) clearArriveCityName {
  result.hasArriveCityName = NO;
  result.arriveCityName = @"";
  return self;
}
- (BOOL) hasArriveTime {
  return result.hasArriveTime;
}
- (NSString*) arriveTime {
  return result.arriveTime;
}
- (Flight_Builder*) setArriveTime:(NSString*) value {
  result.hasArriveTime = YES;
  result.arriveTime = value;
  return self;
}
- (Flight_Builder*) clearArriveTime {
  result.hasArriveTime = NO;
  result.arriveTime = @"";
  return self;
}
- (BOOL) hasArriveAirport {
  return result.hasArriveAirport;
}
- (NSString*) arriveAirport {
  return result.arriveAirport;
}
- (Flight_Builder*) setArriveAirport:(NSString*) value {
  result.hasArriveAirport = YES;
  result.arriveAirport = value;
  return self;
}
- (Flight_Builder*) clearArriveAirport {
  result.hasArriveAirport = NO;
  result.arriveAirport = @"";
  return self;
}
@end

@interface PlaceTour ()
@property (retain) NSString* name;
@property int32_t placeId;
@property (retain) NSString* duration;
@end

@implementation PlaceTour

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasPlaceId {
  return !!hasPlaceId_;
}
- (void) setHasPlaceId:(BOOL) value {
  hasPlaceId_ = !!value;
}
@synthesize placeId;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value {
  hasDuration_ = !!value;
}
@synthesize duration;
- (void) dealloc {
  self.name = nil;
  self.duration = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.placeId = 0;
    self.duration = @"";
  }
  return self;
}
static PlaceTour* defaultPlaceTourInstance = nil;
+ (void) initialize {
  if (self == [PlaceTour class]) {
    defaultPlaceTourInstance = [[PlaceTour alloc] init];
  }
}
+ (PlaceTour*) defaultInstance {
  return defaultPlaceTourInstance;
}
- (PlaceTour*) defaultInstance {
  return defaultPlaceTourInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasPlaceId) {
    [output writeInt32:2 value:self.placeId];
  }
  if (self.hasDuration) {
    [output writeString:3 value:self.duration];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasPlaceId) {
    size += computeInt32Size(2, self.placeId);
  }
  if (self.hasDuration) {
    size += computeStringSize(3, self.duration);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PlaceTour*) parseFromData:(NSData*) data {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromData:data] build];
}
+ (PlaceTour*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PlaceTour*) parseFromInputStream:(NSInputStream*) input {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromInputStream:input] build];
}
+ (PlaceTour*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaceTour*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromCodedInputStream:input] build];
}
+ (PlaceTour*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaceTour_Builder*) builder {
  return [[[PlaceTour_Builder alloc] init] autorelease];
}
+ (PlaceTour_Builder*) builderWithPrototype:(PlaceTour*) prototype {
  return [[PlaceTour builder] mergeFrom:prototype];
}
- (PlaceTour_Builder*) builder {
  return [PlaceTour builder];
}
@end

@interface PlaceTour_Builder()
@property (retain) PlaceTour* result;
@end

@implementation PlaceTour_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PlaceTour alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PlaceTour_Builder*) clear {
  self.result = [[[PlaceTour alloc] init] autorelease];
  return self;
}
- (PlaceTour_Builder*) clone {
  return [PlaceTour builderWithPrototype:result];
}
- (PlaceTour*) defaultInstance {
  return [PlaceTour defaultInstance];
}
- (PlaceTour*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PlaceTour*) buildPartial {
  PlaceTour* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PlaceTour_Builder*) mergeFrom:(PlaceTour*) other {
  if (other == [PlaceTour defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasPlaceId) {
    [self setPlaceId:other.placeId];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PlaceTour_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PlaceTour_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setPlaceId:[input readInt32]];
        break;
      }
      case 26: {
        [self setDuration:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PlaceTour_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PlaceTour_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasPlaceId {
  return result.hasPlaceId;
}
- (int32_t) placeId {
  return result.placeId;
}
- (PlaceTour_Builder*) setPlaceId:(int32_t) value {
  result.hasPlaceId = YES;
  result.placeId = value;
  return self;
}
- (PlaceTour_Builder*) clearPlaceId {
  result.hasPlaceId = NO;
  result.placeId = 0;
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (NSString*) duration {
  return result.duration;
}
- (PlaceTour_Builder*) setDuration:(NSString*) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (PlaceTour_Builder*) clearDuration {
  result.hasDuration = NO;
  result.duration = @"";
  return self;
}
@end

@interface Accommodation ()
@property (retain) NSString* hotelName;
@property (retain) NSString* roomType;
@property (retain) NSString* duration;
@property int32_t hotelId;
@end

@implementation Accommodation

- (BOOL) hasHotelName {
  return !!hasHotelName_;
}
- (void) setHasHotelName:(BOOL) value {
  hasHotelName_ = !!value;
}
@synthesize hotelName;
- (BOOL) hasRoomType {
  return !!hasRoomType_;
}
- (void) setHasRoomType:(BOOL) value {
  hasRoomType_ = !!value;
}
@synthesize roomType;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value {
  hasDuration_ = !!value;
}
@synthesize duration;
- (BOOL) hasHotelId {
  return !!hasHotelId_;
}
- (void) setHasHotelId:(BOOL) value {
  hasHotelId_ = !!value;
}
@synthesize hotelId;
- (void) dealloc {
  self.hotelName = nil;
  self.roomType = nil;
  self.duration = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.hotelName = @"";
    self.roomType = @"";
    self.duration = @"";
    self.hotelId = 0;
  }
  return self;
}
static Accommodation* defaultAccommodationInstance = nil;
+ (void) initialize {
  if (self == [Accommodation class]) {
    defaultAccommodationInstance = [[Accommodation alloc] init];
  }
}
+ (Accommodation*) defaultInstance {
  return defaultAccommodationInstance;
}
- (Accommodation*) defaultInstance {
  return defaultAccommodationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasHotelName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHotelName) {
    [output writeString:1 value:self.hotelName];
  }
  if (self.hasRoomType) {
    [output writeString:2 value:self.roomType];
  }
  if (self.hasDuration) {
    [output writeString:3 value:self.duration];
  }
  if (self.hasHotelId) {
    [output writeInt32:10 value:self.hotelId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasHotelName) {
    size += computeStringSize(1, self.hotelName);
  }
  if (self.hasRoomType) {
    size += computeStringSize(2, self.roomType);
  }
  if (self.hasDuration) {
    size += computeStringSize(3, self.duration);
  }
  if (self.hasHotelId) {
    size += computeInt32Size(10, self.hotelId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Accommodation*) parseFromData:(NSData*) data {
  return (Accommodation*)[[[Accommodation builder] mergeFromData:data] build];
}
+ (Accommodation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Accommodation*)[[[Accommodation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Accommodation*) parseFromInputStream:(NSInputStream*) input {
  return (Accommodation*)[[[Accommodation builder] mergeFromInputStream:input] build];
}
+ (Accommodation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Accommodation*)[[[Accommodation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Accommodation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Accommodation*)[[[Accommodation builder] mergeFromCodedInputStream:input] build];
}
+ (Accommodation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Accommodation*)[[[Accommodation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Accommodation_Builder*) builder {
  return [[[Accommodation_Builder alloc] init] autorelease];
}
+ (Accommodation_Builder*) builderWithPrototype:(Accommodation*) prototype {
  return [[Accommodation builder] mergeFrom:prototype];
}
- (Accommodation_Builder*) builder {
  return [Accommodation builder];
}
@end

@interface Accommodation_Builder()
@property (retain) Accommodation* result;
@end

@implementation Accommodation_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Accommodation alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Accommodation_Builder*) clear {
  self.result = [[[Accommodation alloc] init] autorelease];
  return self;
}
- (Accommodation_Builder*) clone {
  return [Accommodation builderWithPrototype:result];
}
- (Accommodation*) defaultInstance {
  return [Accommodation defaultInstance];
}
- (Accommodation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Accommodation*) buildPartial {
  Accommodation* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Accommodation_Builder*) mergeFrom:(Accommodation*) other {
  if (other == [Accommodation defaultInstance]) {
    return self;
  }
  if (other.hasHotelName) {
    [self setHotelName:other.hotelName];
  }
  if (other.hasRoomType) {
    [self setRoomType:other.roomType];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasHotelId) {
    [self setHotelId:other.hotelId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Accommodation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Accommodation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setHotelName:[input readString]];
        break;
      }
      case 18: {
        [self setRoomType:[input readString]];
        break;
      }
      case 26: {
        [self setDuration:[input readString]];
        break;
      }
      case 80: {
        [self setHotelId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasHotelName {
  return result.hasHotelName;
}
- (NSString*) hotelName {
  return result.hotelName;
}
- (Accommodation_Builder*) setHotelName:(NSString*) value {
  result.hasHotelName = YES;
  result.hotelName = value;
  return self;
}
- (Accommodation_Builder*) clearHotelName {
  result.hasHotelName = NO;
  result.hotelName = @"";
  return self;
}
- (BOOL) hasRoomType {
  return result.hasRoomType;
}
- (NSString*) roomType {
  return result.roomType;
}
- (Accommodation_Builder*) setRoomType:(NSString*) value {
  result.hasRoomType = YES;
  result.roomType = value;
  return self;
}
- (Accommodation_Builder*) clearRoomType {
  result.hasRoomType = NO;
  result.roomType = @"";
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (NSString*) duration {
  return result.duration;
}
- (Accommodation_Builder*) setDuration:(NSString*) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (Accommodation_Builder*) clearDuration {
  result.hasDuration = NO;
  result.duration = @"";
  return self;
}
- (BOOL) hasHotelId {
  return result.hasHotelId;
}
- (int32_t) hotelId {
  return result.hotelId;
}
- (Accommodation_Builder*) setHotelId:(int32_t) value {
  result.hasHotelId = YES;
  result.hotelId = value;
  return self;
}
- (Accommodation_Builder*) clearHotelId {
  result.hasHotelId = NO;
  result.hotelId = 0;
  return self;
}
@end

@interface OrderList ()
@property (retain) NSMutableArray* mutableOrdersList;
@end

@implementation OrderList

@synthesize mutableOrdersList;
- (void) dealloc {
  self.mutableOrdersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static OrderList* defaultOrderListInstance = nil;
+ (void) initialize {
  if (self == [OrderList class]) {
    defaultOrderListInstance = [[OrderList alloc] init];
  }
}
+ (OrderList*) defaultInstance {
  return defaultOrderListInstance;
}
- (OrderList*) defaultInstance {
  return defaultOrderListInstance;
}
- (NSArray*) ordersList {
  return mutableOrdersList;
}
- (Order*) ordersAtIndex:(int32_t) index {
  id value = [mutableOrdersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Order* element in self.ordersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Order* element in self.ordersList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Order* element in self.ordersList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OrderList*) parseFromData:(NSData*) data {
  return (OrderList*)[[[OrderList builder] mergeFromData:data] build];
}
+ (OrderList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderList*)[[[OrderList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OrderList*) parseFromInputStream:(NSInputStream*) input {
  return (OrderList*)[[[OrderList builder] mergeFromInputStream:input] build];
}
+ (OrderList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderList*)[[[OrderList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OrderList*)[[[OrderList builder] mergeFromCodedInputStream:input] build];
}
+ (OrderList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OrderList*)[[[OrderList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OrderList_Builder*) builder {
  return [[[OrderList_Builder alloc] init] autorelease];
}
+ (OrderList_Builder*) builderWithPrototype:(OrderList*) prototype {
  return [[OrderList builder] mergeFrom:prototype];
}
- (OrderList_Builder*) builder {
  return [OrderList builder];
}
@end

@interface OrderList_Builder()
@property (retain) OrderList* result;
@end

@implementation OrderList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[OrderList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OrderList_Builder*) clear {
  self.result = [[[OrderList alloc] init] autorelease];
  return self;
}
- (OrderList_Builder*) clone {
  return [OrderList builderWithPrototype:result];
}
- (OrderList*) defaultInstance {
  return [OrderList defaultInstance];
}
- (OrderList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OrderList*) buildPartial {
  OrderList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (OrderList_Builder*) mergeFrom:(OrderList*) other {
  if (other == [OrderList defaultInstance]) {
    return self;
  }
  if (other.mutableOrdersList.count > 0) {
    if (result.mutableOrdersList == nil) {
      result.mutableOrdersList = [NSMutableArray array];
    }
    [result.mutableOrdersList addObjectsFromArray:other.mutableOrdersList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OrderList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OrderList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Order_Builder* subBuilder = [Order builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOrders:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) ordersList {
  if (result.mutableOrdersList == nil) { return [NSArray array]; }
  return result.mutableOrdersList;
}
- (Order*) ordersAtIndex:(int32_t) index {
  return [result ordersAtIndex:index];
}
- (OrderList_Builder*) replaceOrdersAtIndex:(int32_t) index with:(Order*) value {
  [result.mutableOrdersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (OrderList_Builder*) addAllOrders:(NSArray*) values {
  if (result.mutableOrdersList == nil) {
    result.mutableOrdersList = [NSMutableArray array];
  }
  [result.mutableOrdersList addObjectsFromArray:values];
  return self;
}
- (OrderList_Builder*) clearOrdersList {
  result.mutableOrdersList = nil;
  return self;
}
- (OrderList_Builder*) addOrders:(Order*) value {
  if (result.mutableOrdersList == nil) {
    result.mutableOrdersList = [NSMutableArray array];
  }
  [result.mutableOrdersList addObject:value];
  return self;
}
@end

@interface Order ()
@property int32_t orderId;
@property int32_t date;
@property int32_t routeId;
@property (retain) NSString* routeName;
@property int32_t agencyId;
@property (retain) NSString* departCityName;
@property (retain) NSString* departDate;
@property int32_t adult;
@property int32_t children;
@property (retain) NSString* price;
@property int32_t priceStatus;
@property int32_t status;
@end

@implementation Order

- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) value {
  hasOrderId_ = !!value;
}
@synthesize orderId;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasRouteId {
  return !!hasRouteId_;
}
- (void) setHasRouteId:(BOOL) value {
  hasRouteId_ = !!value;
}
@synthesize routeId;
- (BOOL) hasRouteName {
  return !!hasRouteName_;
}
- (void) setHasRouteName:(BOOL) value {
  hasRouteName_ = !!value;
}
@synthesize routeName;
- (BOOL) hasAgencyId {
  return !!hasAgencyId_;
}
- (void) setHasAgencyId:(BOOL) value {
  hasAgencyId_ = !!value;
}
@synthesize agencyId;
- (BOOL) hasDepartCityName {
  return !!hasDepartCityName_;
}
- (void) setHasDepartCityName:(BOOL) value {
  hasDepartCityName_ = !!value;
}
@synthesize departCityName;
- (BOOL) hasDepartDate {
  return !!hasDepartDate_;
}
- (void) setHasDepartDate:(BOOL) value {
  hasDepartDate_ = !!value;
}
@synthesize departDate;
- (BOOL) hasAdult {
  return !!hasAdult_;
}
- (void) setHasAdult:(BOOL) value {
  hasAdult_ = !!value;
}
@synthesize adult;
- (BOOL) hasChildren {
  return !!hasChildren_;
}
- (void) setHasChildren:(BOOL) value {
  hasChildren_ = !!value;
}
@synthesize children;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasPriceStatus {
  return !!hasPriceStatus_;
}
- (void) setHasPriceStatus:(BOOL) value {
  hasPriceStatus_ = !!value;
}
@synthesize priceStatus;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (void) dealloc {
  self.routeName = nil;
  self.departCityName = nil;
  self.departDate = nil;
  self.price = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.orderId = 0;
    self.date = 0;
    self.routeId = 0;
    self.routeName = @"";
    self.agencyId = 0;
    self.departCityName = @"";
    self.departDate = @"";
    self.adult = 0;
    self.children = 0;
    self.price = @"";
    self.priceStatus = 0;
    self.status = 0;
  }
  return self;
}
static Order* defaultOrderInstance = nil;
+ (void) initialize {
  if (self == [Order class]) {
    defaultOrderInstance = [[Order alloc] init];
  }
}
+ (Order*) defaultInstance {
  return defaultOrderInstance;
}
- (Order*) defaultInstance {
  return defaultOrderInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOrderId) {
    return NO;
  }
  if (!self.hasDate) {
    return NO;
  }
  if (!self.hasRouteId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeInt32:1 value:self.orderId];
  }
  if (self.hasDate) {
    [output writeInt32:2 value:self.date];
  }
  if (self.hasRouteId) {
    [output writeInt32:3 value:self.routeId];
  }
  if (self.hasRouteName) {
    [output writeString:4 value:self.routeName];
  }
  if (self.hasAgencyId) {
    [output writeInt32:5 value:self.agencyId];
  }
  if (self.hasDepartCityName) {
    [output writeString:6 value:self.departCityName];
  }
  if (self.hasDepartDate) {
    [output writeString:7 value:self.departDate];
  }
  if (self.hasAdult) {
    [output writeInt32:8 value:self.adult];
  }
  if (self.hasChildren) {
    [output writeInt32:9 value:self.children];
  }
  if (self.hasPrice) {
    [output writeString:10 value:self.price];
  }
  if (self.hasPriceStatus) {
    [output writeInt32:11 value:self.priceStatus];
  }
  if (self.hasStatus) {
    [output writeInt32:12 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasOrderId) {
    size += computeInt32Size(1, self.orderId);
  }
  if (self.hasDate) {
    size += computeInt32Size(2, self.date);
  }
  if (self.hasRouteId) {
    size += computeInt32Size(3, self.routeId);
  }
  if (self.hasRouteName) {
    size += computeStringSize(4, self.routeName);
  }
  if (self.hasAgencyId) {
    size += computeInt32Size(5, self.agencyId);
  }
  if (self.hasDepartCityName) {
    size += computeStringSize(6, self.departCityName);
  }
  if (self.hasDepartDate) {
    size += computeStringSize(7, self.departDate);
  }
  if (self.hasAdult) {
    size += computeInt32Size(8, self.adult);
  }
  if (self.hasChildren) {
    size += computeInt32Size(9, self.children);
  }
  if (self.hasPrice) {
    size += computeStringSize(10, self.price);
  }
  if (self.hasPriceStatus) {
    size += computeInt32Size(11, self.priceStatus);
  }
  if (self.hasStatus) {
    size += computeInt32Size(12, self.status);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Order*) parseFromData:(NSData*) data {
  return (Order*)[[[Order builder] mergeFromData:data] build];
}
+ (Order*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Order*)[[[Order builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Order*) parseFromInputStream:(NSInputStream*) input {
  return (Order*)[[[Order builder] mergeFromInputStream:input] build];
}
+ (Order*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Order*)[[[Order builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Order*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Order*)[[[Order builder] mergeFromCodedInputStream:input] build];
}
+ (Order*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Order*)[[[Order builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Order_Builder*) builder {
  return [[[Order_Builder alloc] init] autorelease];
}
+ (Order_Builder*) builderWithPrototype:(Order*) prototype {
  return [[Order builder] mergeFrom:prototype];
}
- (Order_Builder*) builder {
  return [Order builder];
}
@end

@interface Order_Builder()
@property (retain) Order* result;
@end

@implementation Order_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Order alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Order_Builder*) clear {
  self.result = [[[Order alloc] init] autorelease];
  return self;
}
- (Order_Builder*) clone {
  return [Order builderWithPrototype:result];
}
- (Order*) defaultInstance {
  return [Order defaultInstance];
}
- (Order*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Order*) buildPartial {
  Order* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Order_Builder*) mergeFrom:(Order*) other {
  if (other == [Order defaultInstance]) {
    return self;
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasRouteId) {
    [self setRouteId:other.routeId];
  }
  if (other.hasRouteName) {
    [self setRouteName:other.routeName];
  }
  if (other.hasAgencyId) {
    [self setAgencyId:other.agencyId];
  }
  if (other.hasDepartCityName) {
    [self setDepartCityName:other.departCityName];
  }
  if (other.hasDepartDate) {
    [self setDepartDate:other.departDate];
  }
  if (other.hasAdult) {
    [self setAdult:other.adult];
  }
  if (other.hasChildren) {
    [self setChildren:other.children];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasPriceStatus) {
    [self setPriceStatus:other.priceStatus];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Order_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Order_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOrderId:[input readInt32]];
        break;
      }
      case 16: {
        [self setDate:[input readInt32]];
        break;
      }
      case 24: {
        [self setRouteId:[input readInt32]];
        break;
      }
      case 34: {
        [self setRouteName:[input readString]];
        break;
      }
      case 40: {
        [self setAgencyId:[input readInt32]];
        break;
      }
      case 50: {
        [self setDepartCityName:[input readString]];
        break;
      }
      case 58: {
        [self setDepartDate:[input readString]];
        break;
      }
      case 64: {
        [self setAdult:[input readInt32]];
        break;
      }
      case 72: {
        [self setChildren:[input readInt32]];
        break;
      }
      case 82: {
        [self setPrice:[input readString]];
        break;
      }
      case 88: {
        [self setPriceStatus:[input readInt32]];
        break;
      }
      case 96: {
        [self setStatus:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOrderId {
  return result.hasOrderId;
}
- (int32_t) orderId {
  return result.orderId;
}
- (Order_Builder*) setOrderId:(int32_t) value {
  result.hasOrderId = YES;
  result.orderId = value;
  return self;
}
- (Order_Builder*) clearOrderId {
  result.hasOrderId = NO;
  result.orderId = 0;
  return self;
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (Order_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (Order_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasRouteId {
  return result.hasRouteId;
}
- (int32_t) routeId {
  return result.routeId;
}
- (Order_Builder*) setRouteId:(int32_t) value {
  result.hasRouteId = YES;
  result.routeId = value;
  return self;
}
- (Order_Builder*) clearRouteId {
  result.hasRouteId = NO;
  result.routeId = 0;
  return self;
}
- (BOOL) hasRouteName {
  return result.hasRouteName;
}
- (NSString*) routeName {
  return result.routeName;
}
- (Order_Builder*) setRouteName:(NSString*) value {
  result.hasRouteName = YES;
  result.routeName = value;
  return self;
}
- (Order_Builder*) clearRouteName {
  result.hasRouteName = NO;
  result.routeName = @"";
  return self;
}
- (BOOL) hasAgencyId {
  return result.hasAgencyId;
}
- (int32_t) agencyId {
  return result.agencyId;
}
- (Order_Builder*) setAgencyId:(int32_t) value {
  result.hasAgencyId = YES;
  result.agencyId = value;
  return self;
}
- (Order_Builder*) clearAgencyId {
  result.hasAgencyId = NO;
  result.agencyId = 0;
  return self;
}
- (BOOL) hasDepartCityName {
  return result.hasDepartCityName;
}
- (NSString*) departCityName {
  return result.departCityName;
}
- (Order_Builder*) setDepartCityName:(NSString*) value {
  result.hasDepartCityName = YES;
  result.departCityName = value;
  return self;
}
- (Order_Builder*) clearDepartCityName {
  result.hasDepartCityName = NO;
  result.departCityName = @"";
  return self;
}
- (BOOL) hasDepartDate {
  return result.hasDepartDate;
}
- (NSString*) departDate {
  return result.departDate;
}
- (Order_Builder*) setDepartDate:(NSString*) value {
  result.hasDepartDate = YES;
  result.departDate = value;
  return self;
}
- (Order_Builder*) clearDepartDate {
  result.hasDepartDate = NO;
  result.departDate = @"";
  return self;
}
- (BOOL) hasAdult {
  return result.hasAdult;
}
- (int32_t) adult {
  return result.adult;
}
- (Order_Builder*) setAdult:(int32_t) value {
  result.hasAdult = YES;
  result.adult = value;
  return self;
}
- (Order_Builder*) clearAdult {
  result.hasAdult = NO;
  result.adult = 0;
  return self;
}
- (BOOL) hasChildren {
  return result.hasChildren;
}
- (int32_t) children {
  return result.children;
}
- (Order_Builder*) setChildren:(int32_t) value {
  result.hasChildren = YES;
  result.children = value;
  return self;
}
- (Order_Builder*) clearChildren {
  result.hasChildren = NO;
  result.children = 0;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (NSString*) price {
  return result.price;
}
- (Order_Builder*) setPrice:(NSString*) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (Order_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = @"";
  return self;
}
- (BOOL) hasPriceStatus {
  return result.hasPriceStatus;
}
- (int32_t) priceStatus {
  return result.priceStatus;
}
- (Order_Builder*) setPriceStatus:(int32_t) value {
  result.hasPriceStatus = YES;
  result.priceStatus = value;
  return self;
}
- (Order_Builder*) clearPriceStatus {
  result.hasPriceStatus = NO;
  result.priceStatus = 0;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (Order_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (Order_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
@end

