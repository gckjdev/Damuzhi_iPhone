// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TouristRoute.pb.h"

@implementation TouristRouteRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TouristRouteRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [AppRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TouristRoute ()
@property int32_t routeId;
@property (retain) NSString* name;
@property (retain) NSString* image;
@property (retain) NSString* shortDescription;
@property int32_t averageRank;
@property int32_t days;
@property (retain) NSString* price;
@property (retain) NSMutableArray* mutableAgencyIdsList;
@property int32_t setOutCityId;
@property int32_t destinationCityId;
@property (retain) NSMutableArray* mutableThemeIdsList;
@property (retain) NSMutableArray* mutableTypeIdsList;
@property int32_t followUserCount;
@property (retain) NSString* customerServiceTelephone;
@property (retain) NSMutableArray* mutableImagesList;
@property (retain) NSString* characteristic;
@property (retain) NSMutableArray* mutableDailySchedulesList;
@property (retain) NSMutableArray* mutablePackagesList;
@property (retain) Booking* booking;
@property (retain) NSString* reference;
@property (retain) NSMutableArray* mutablePlaceIdsList;
@property (retain) NSString* fee;
@property (retain) NSString* bookingNotice;
@end

@implementation TouristRoute

- (BOOL) hasRouteId {
  return !!hasRouteId_;
}
- (void) setHasRouteId:(BOOL) value {
  hasRouteId_ = !!value;
}
@synthesize routeId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) value {
  hasImage_ = !!value;
}
@synthesize image;
- (BOOL) hasShortDescription {
  return !!hasShortDescription_;
}
- (void) setHasShortDescription:(BOOL) value {
  hasShortDescription_ = !!value;
}
@synthesize shortDescription;
- (BOOL) hasAverageRank {
  return !!hasAverageRank_;
}
- (void) setHasAverageRank:(BOOL) value {
  hasAverageRank_ = !!value;
}
@synthesize averageRank;
- (BOOL) hasDays {
  return !!hasDays_;
}
- (void) setHasDays:(BOOL) value {
  hasDays_ = !!value;
}
@synthesize days;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
@synthesize mutableAgencyIdsList;
- (BOOL) hasSetOutCityId {
  return !!hasSetOutCityId_;
}
- (void) setHasSetOutCityId:(BOOL) value {
  hasSetOutCityId_ = !!value;
}
@synthesize setOutCityId;
- (BOOL) hasDestinationCityId {
  return !!hasDestinationCityId_;
}
- (void) setHasDestinationCityId:(BOOL) value {
  hasDestinationCityId_ = !!value;
}
@synthesize destinationCityId;
@synthesize mutableThemeIdsList;
@synthesize mutableTypeIdsList;
- (BOOL) hasFollowUserCount {
  return !!hasFollowUserCount_;
}
- (void) setHasFollowUserCount:(BOOL) value {
  hasFollowUserCount_ = !!value;
}
@synthesize followUserCount;
- (BOOL) hasCustomerServiceTelephone {
  return !!hasCustomerServiceTelephone_;
}
- (void) setHasCustomerServiceTelephone:(BOOL) value {
  hasCustomerServiceTelephone_ = !!value;
}
@synthesize customerServiceTelephone;
@synthesize mutableImagesList;
- (BOOL) hasCharacteristic {
  return !!hasCharacteristic_;
}
- (void) setHasCharacteristic:(BOOL) value {
  hasCharacteristic_ = !!value;
}
@synthesize characteristic;
@synthesize mutableDailySchedulesList;
@synthesize mutablePackagesList;
- (BOOL) hasBooking {
  return !!hasBooking_;
}
- (void) setHasBooking:(BOOL) value {
  hasBooking_ = !!value;
}
@synthesize booking;
- (BOOL) hasReference {
  return !!hasReference_;
}
- (void) setHasReference:(BOOL) value {
  hasReference_ = !!value;
}
@synthesize reference;
@synthesize mutablePlaceIdsList;
- (BOOL) hasFee {
  return !!hasFee_;
}
- (void) setHasFee:(BOOL) value {
  hasFee_ = !!value;
}
@synthesize fee;
- (BOOL) hasBookingNotice {
  return !!hasBookingNotice_;
}
- (void) setHasBookingNotice:(BOOL) value {
  hasBookingNotice_ = !!value;
}
@synthesize bookingNotice;
- (void) dealloc {
  self.name = nil;
  self.image = nil;
  self.shortDescription = nil;
  self.price = nil;
  self.mutableAgencyIdsList = nil;
  self.mutableThemeIdsList = nil;
  self.mutableTypeIdsList = nil;
  self.customerServiceTelephone = nil;
  self.mutableImagesList = nil;
  self.characteristic = nil;
  self.mutableDailySchedulesList = nil;
  self.mutablePackagesList = nil;
  self.booking = nil;
  self.reference = nil;
  self.mutablePlaceIdsList = nil;
  self.fee = nil;
  self.bookingNotice = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.routeId = 0;
    self.name = @"";
    self.image = @"";
    self.shortDescription = @"";
    self.averageRank = 0;
    self.days = 0;
    self.price = @"";
    self.setOutCityId = 0;
    self.destinationCityId = 0;
    self.followUserCount = 0;
    self.customerServiceTelephone = @"";
    self.characteristic = @"";
    self.booking = [Booking defaultInstance];
    self.reference = @"";
    self.fee = @"";
    self.bookingNotice = @"";
  }
  return self;
}
static TouristRoute* defaultTouristRouteInstance = nil;
+ (void) initialize {
  if (self == [TouristRoute class]) {
    defaultTouristRouteInstance = [[TouristRoute alloc] init];
  }
}
+ (TouristRoute*) defaultInstance {
  return defaultTouristRouteInstance;
}
- (TouristRoute*) defaultInstance {
  return defaultTouristRouteInstance;
}
- (NSArray*) agencyIdsList {
  return mutableAgencyIdsList;
}
- (int32_t) agencyIdsAtIndex:(int32_t) index {
  id value = [mutableAgencyIdsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) themeIdsList {
  return mutableThemeIdsList;
}
- (int32_t) themeIdsAtIndex:(int32_t) index {
  id value = [mutableThemeIdsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) typeIdsList {
  return mutableTypeIdsList;
}
- (int32_t) typeIdsAtIndex:(int32_t) index {
  id value = [mutableTypeIdsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) imagesList {
  return mutableImagesList;
}
- (NSString*) imagesAtIndex:(int32_t) index {
  id value = [mutableImagesList objectAtIndex:index];
  return value;
}
- (NSArray*) dailySchedulesList {
  return mutableDailySchedulesList;
}
- (DailySchedule*) dailySchedulesAtIndex:(int32_t) index {
  id value = [mutableDailySchedulesList objectAtIndex:index];
  return value;
}
- (NSArray*) packagesList {
  return mutablePackagesList;
}
- (Package*) packagesAtIndex:(int32_t) index {
  id value = [mutablePackagesList objectAtIndex:index];
  return value;
}
- (NSArray*) placeIdsList {
  return mutablePlaceIdsList;
}
- (int32_t) placeIdsAtIndex:(int32_t) index {
  id value = [mutablePlaceIdsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  if (!self.hasRouteId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasSetOutCityId) {
    return NO;
  }
  if (!self.hasDestinationCityId) {
    return NO;
  }
  for (DailySchedule* element in self.dailySchedulesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Package* element in self.packagesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasBooking) {
    if (!self.booking.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRouteId) {
    [output writeInt32:1 value:self.routeId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasImage) {
    [output writeString:3 value:self.image];
  }
  if (self.hasShortDescription) {
    [output writeString:4 value:self.shortDescription];
  }
  if (self.hasAverageRank) {
    [output writeInt32:5 value:self.averageRank];
  }
  if (self.hasDays) {
    [output writeInt32:6 value:self.days];
  }
  if (self.hasPrice) {
    [output writeString:7 value:self.price];
  }
  for (NSNumber* value in self.mutableAgencyIdsList) {
    [output writeInt32:8 value:[value intValue]];
  }
  if (self.hasSetOutCityId) {
    [output writeInt32:9 value:self.setOutCityId];
  }
  if (self.hasDestinationCityId) {
    [output writeInt32:10 value:self.destinationCityId];
  }
  for (NSNumber* value in self.mutableThemeIdsList) {
    [output writeInt32:11 value:[value intValue]];
  }
  for (NSNumber* value in self.mutableTypeIdsList) {
    [output writeInt32:12 value:[value intValue]];
  }
  if (self.hasFollowUserCount) {
    [output writeInt32:13 value:self.followUserCount];
  }
  if (self.hasCustomerServiceTelephone) {
    [output writeString:14 value:self.customerServiceTelephone];
  }
  for (NSString* element in self.mutableImagesList) {
    [output writeString:15 value:element];
  }
  if (self.hasCharacteristic) {
    [output writeString:16 value:self.characteristic];
  }
  for (DailySchedule* element in self.dailySchedulesList) {
    [output writeMessage:17 value:element];
  }
  for (Package* element in self.packagesList) {
    [output writeMessage:18 value:element];
  }
  if (self.hasBooking) {
    [output writeMessage:19 value:self.booking];
  }
  if (self.hasReference) {
    [output writeString:20 value:self.reference];
  }
  for (NSNumber* value in self.mutablePlaceIdsList) {
    [output writeInt32:21 value:[value intValue]];
  }
  if (self.hasFee) {
    [output writeString:22 value:self.fee];
  }
  if (self.hasBookingNotice) {
    [output writeString:23 value:self.bookingNotice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRouteId) {
    size += computeInt32Size(1, self.routeId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasImage) {
    size += computeStringSize(3, self.image);
  }
  if (self.hasShortDescription) {
    size += computeStringSize(4, self.shortDescription);
  }
  if (self.hasAverageRank) {
    size += computeInt32Size(5, self.averageRank);
  }
  if (self.hasDays) {
    size += computeInt32Size(6, self.days);
  }
  if (self.hasPrice) {
    size += computeStringSize(7, self.price);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableAgencyIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableAgencyIdsList.count;
  }
  if (self.hasSetOutCityId) {
    size += computeInt32Size(9, self.setOutCityId);
  }
  if (self.hasDestinationCityId) {
    size += computeInt32Size(10, self.destinationCityId);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableThemeIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableThemeIdsList.count;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableTypeIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableTypeIdsList.count;
  }
  if (self.hasFollowUserCount) {
    size += computeInt32Size(13, self.followUserCount);
  }
  if (self.hasCustomerServiceTelephone) {
    size += computeStringSize(14, self.customerServiceTelephone);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableImagesList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableImagesList.count;
  }
  if (self.hasCharacteristic) {
    size += computeStringSize(16, self.characteristic);
  }
  for (DailySchedule* element in self.dailySchedulesList) {
    size += computeMessageSize(17, element);
  }
  for (Package* element in self.packagesList) {
    size += computeMessageSize(18, element);
  }
  if (self.hasBooking) {
    size += computeMessageSize(19, self.booking);
  }
  if (self.hasReference) {
    size += computeStringSize(20, self.reference);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutablePlaceIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 2 * self.mutablePlaceIdsList.count;
  }
  if (self.hasFee) {
    size += computeStringSize(22, self.fee);
  }
  if (self.hasBookingNotice) {
    size += computeStringSize(23, self.bookingNotice);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TouristRoute*) parseFromData:(NSData*) data {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromData:data] build];
}
+ (TouristRoute*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TouristRoute*) parseFromInputStream:(NSInputStream*) input {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromInputStream:input] build];
}
+ (TouristRoute*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TouristRoute*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromCodedInputStream:input] build];
}
+ (TouristRoute*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouristRoute*)[[[TouristRoute builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TouristRoute_Builder*) builder {
  return [[[TouristRoute_Builder alloc] init] autorelease];
}
+ (TouristRoute_Builder*) builderWithPrototype:(TouristRoute*) prototype {
  return [[TouristRoute builder] mergeFrom:prototype];
}
- (TouristRoute_Builder*) builder {
  return [TouristRoute builder];
}
@end

@interface TouristRoute_Builder()
@property (retain) TouristRoute* result;
@end

@implementation TouristRoute_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TouristRoute alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TouristRoute_Builder*) clear {
  self.result = [[[TouristRoute alloc] init] autorelease];
  return self;
}
- (TouristRoute_Builder*) clone {
  return [TouristRoute builderWithPrototype:result];
}
- (TouristRoute*) defaultInstance {
  return [TouristRoute defaultInstance];
}
- (TouristRoute*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TouristRoute*) buildPartial {
  TouristRoute* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TouristRoute_Builder*) mergeFrom:(TouristRoute*) other {
  if (other == [TouristRoute defaultInstance]) {
    return self;
  }
  if (other.hasRouteId) {
    [self setRouteId:other.routeId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  if (other.hasShortDescription) {
    [self setShortDescription:other.shortDescription];
  }
  if (other.hasAverageRank) {
    [self setAverageRank:other.averageRank];
  }
  if (other.hasDays) {
    [self setDays:other.days];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.mutableAgencyIdsList.count > 0) {
    if (result.mutableAgencyIdsList == nil) {
      result.mutableAgencyIdsList = [NSMutableArray array];
    }
    [result.mutableAgencyIdsList addObjectsFromArray:other.mutableAgencyIdsList];
  }
  if (other.hasSetOutCityId) {
    [self setSetOutCityId:other.setOutCityId];
  }
  if (other.hasDestinationCityId) {
    [self setDestinationCityId:other.destinationCityId];
  }
  if (other.mutableThemeIdsList.count > 0) {
    if (result.mutableThemeIdsList == nil) {
      result.mutableThemeIdsList = [NSMutableArray array];
    }
    [result.mutableThemeIdsList addObjectsFromArray:other.mutableThemeIdsList];
  }
  if (other.mutableTypeIdsList.count > 0) {
    if (result.mutableTypeIdsList == nil) {
      result.mutableTypeIdsList = [NSMutableArray array];
    }
    [result.mutableTypeIdsList addObjectsFromArray:other.mutableTypeIdsList];
  }
  if (other.hasFollowUserCount) {
    [self setFollowUserCount:other.followUserCount];
  }
  if (other.hasCustomerServiceTelephone) {
    [self setCustomerServiceTelephone:other.customerServiceTelephone];
  }
  if (other.mutableImagesList.count > 0) {
    if (result.mutableImagesList == nil) {
      result.mutableImagesList = [NSMutableArray array];
    }
    [result.mutableImagesList addObjectsFromArray:other.mutableImagesList];
  }
  if (other.hasCharacteristic) {
    [self setCharacteristic:other.characteristic];
  }
  if (other.mutableDailySchedulesList.count > 0) {
    if (result.mutableDailySchedulesList == nil) {
      result.mutableDailySchedulesList = [NSMutableArray array];
    }
    [result.mutableDailySchedulesList addObjectsFromArray:other.mutableDailySchedulesList];
  }
  if (other.mutablePackagesList.count > 0) {
    if (result.mutablePackagesList == nil) {
      result.mutablePackagesList = [NSMutableArray array];
    }
    [result.mutablePackagesList addObjectsFromArray:other.mutablePackagesList];
  }
  if (other.hasBooking) {
    [self mergeBooking:other.booking];
  }
  if (other.hasReference) {
    [self setReference:other.reference];
  }
  if (other.mutablePlaceIdsList.count > 0) {
    if (result.mutablePlaceIdsList == nil) {
      result.mutablePlaceIdsList = [NSMutableArray array];
    }
    [result.mutablePlaceIdsList addObjectsFromArray:other.mutablePlaceIdsList];
  }
  if (other.hasFee) {
    [self setFee:other.fee];
  }
  if (other.hasBookingNotice) {
    [self setBookingNotice:other.bookingNotice];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TouristRoute_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TouristRoute_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRouteId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setImage:[input readString]];
        break;
      }
      case 34: {
        [self setShortDescription:[input readString]];
        break;
      }
      case 40: {
        [self setAverageRank:[input readInt32]];
        break;
      }
      case 48: {
        [self setDays:[input readInt32]];
        break;
      }
      case 58: {
        [self setPrice:[input readString]];
        break;
      }
      case 64: {
        [self addAgencyIds:[input readInt32]];
        break;
      }
      case 72: {
        [self setSetOutCityId:[input readInt32]];
        break;
      }
      case 80: {
        [self setDestinationCityId:[input readInt32]];
        break;
      }
      case 88: {
        [self addThemeIds:[input readInt32]];
        break;
      }
      case 96: {
        [self addTypeIds:[input readInt32]];
        break;
      }
      case 104: {
        [self setFollowUserCount:[input readInt32]];
        break;
      }
      case 114: {
        [self setCustomerServiceTelephone:[input readString]];
        break;
      }
      case 122: {
        [self addImages:[input readString]];
        break;
      }
      case 130: {
        [self setCharacteristic:[input readString]];
        break;
      }
      case 138: {
        DailySchedule_Builder* subBuilder = [DailySchedule builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDailySchedules:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        Package_Builder* subBuilder = [Package builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPackages:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        Booking_Builder* subBuilder = [Booking builder];
        if (self.hasBooking) {
          [subBuilder mergeFrom:self.booking];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBooking:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setReference:[input readString]];
        break;
      }
      case 168: {
        [self addPlaceIds:[input readInt32]];
        break;
      }
      case 178: {
        [self setFee:[input readString]];
        break;
      }
      case 186: {
        [self setBookingNotice:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRouteId {
  return result.hasRouteId;
}
- (int32_t) routeId {
  return result.routeId;
}
- (TouristRoute_Builder*) setRouteId:(int32_t) value {
  result.hasRouteId = YES;
  result.routeId = value;
  return self;
}
- (TouristRoute_Builder*) clearRouteId {
  result.hasRouteId = NO;
  result.routeId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TouristRoute_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TouristRoute_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasImage {
  return result.hasImage;
}
- (NSString*) image {
  return result.image;
}
- (TouristRoute_Builder*) setImage:(NSString*) value {
  result.hasImage = YES;
  result.image = value;
  return self;
}
- (TouristRoute_Builder*) clearImage {
  result.hasImage = NO;
  result.image = @"";
  return self;
}
- (BOOL) hasShortDescription {
  return result.hasShortDescription;
}
- (NSString*) shortDescription {
  return result.shortDescription;
}
- (TouristRoute_Builder*) setShortDescription:(NSString*) value {
  result.hasShortDescription = YES;
  result.shortDescription = value;
  return self;
}
- (TouristRoute_Builder*) clearShortDescription {
  result.hasShortDescription = NO;
  result.shortDescription = @"";
  return self;
}
- (BOOL) hasAverageRank {
  return result.hasAverageRank;
}
- (int32_t) averageRank {
  return result.averageRank;
}
- (TouristRoute_Builder*) setAverageRank:(int32_t) value {
  result.hasAverageRank = YES;
  result.averageRank = value;
  return self;
}
- (TouristRoute_Builder*) clearAverageRank {
  result.hasAverageRank = NO;
  result.averageRank = 0;
  return self;
}
- (BOOL) hasDays {
  return result.hasDays;
}
- (int32_t) days {
  return result.days;
}
- (TouristRoute_Builder*) setDays:(int32_t) value {
  result.hasDays = YES;
  result.days = value;
  return self;
}
- (TouristRoute_Builder*) clearDays {
  result.hasDays = NO;
  result.days = 0;
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (NSString*) price {
  return result.price;
}
- (TouristRoute_Builder*) setPrice:(NSString*) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (TouristRoute_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = @"";
  return self;
}
- (NSArray*) agencyIdsList {
  if (result.mutableAgencyIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableAgencyIdsList;
}
- (int32_t) agencyIdsAtIndex:(int32_t) index {
  return [result agencyIdsAtIndex:index];
}
- (TouristRoute_Builder*) replaceAgencyIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableAgencyIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addAgencyIds:(int32_t) value {
  if (result.mutableAgencyIdsList == nil) {
    result.mutableAgencyIdsList = [NSMutableArray array];
  }
  [result.mutableAgencyIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addAllAgencyIds:(NSArray*) values {
  if (result.mutableAgencyIdsList == nil) {
    result.mutableAgencyIdsList = [NSMutableArray array];
  }
  [result.mutableAgencyIdsList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearAgencyIdsList {
  result.mutableAgencyIdsList = nil;
  return self;
}
- (BOOL) hasSetOutCityId {
  return result.hasSetOutCityId;
}
- (int32_t) setOutCityId {
  return result.setOutCityId;
}
- (TouristRoute_Builder*) setSetOutCityId:(int32_t) value {
  result.hasSetOutCityId = YES;
  result.setOutCityId = value;
  return self;
}
- (TouristRoute_Builder*) clearSetOutCityId {
  result.hasSetOutCityId = NO;
  result.setOutCityId = 0;
  return self;
}
- (BOOL) hasDestinationCityId {
  return result.hasDestinationCityId;
}
- (int32_t) destinationCityId {
  return result.destinationCityId;
}
- (TouristRoute_Builder*) setDestinationCityId:(int32_t) value {
  result.hasDestinationCityId = YES;
  result.destinationCityId = value;
  return self;
}
- (TouristRoute_Builder*) clearDestinationCityId {
  result.hasDestinationCityId = NO;
  result.destinationCityId = 0;
  return self;
}
- (NSArray*) themeIdsList {
  if (result.mutableThemeIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableThemeIdsList;
}
- (int32_t) themeIdsAtIndex:(int32_t) index {
  return [result themeIdsAtIndex:index];
}
- (TouristRoute_Builder*) replaceThemeIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableThemeIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addThemeIds:(int32_t) value {
  if (result.mutableThemeIdsList == nil) {
    result.mutableThemeIdsList = [NSMutableArray array];
  }
  [result.mutableThemeIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addAllThemeIds:(NSArray*) values {
  if (result.mutableThemeIdsList == nil) {
    result.mutableThemeIdsList = [NSMutableArray array];
  }
  [result.mutableThemeIdsList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearThemeIdsList {
  result.mutableThemeIdsList = nil;
  return self;
}
- (NSArray*) typeIdsList {
  if (result.mutableTypeIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableTypeIdsList;
}
- (int32_t) typeIdsAtIndex:(int32_t) index {
  return [result typeIdsAtIndex:index];
}
- (TouristRoute_Builder*) replaceTypeIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableTypeIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addTypeIds:(int32_t) value {
  if (result.mutableTypeIdsList == nil) {
    result.mutableTypeIdsList = [NSMutableArray array];
  }
  [result.mutableTypeIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addAllTypeIds:(NSArray*) values {
  if (result.mutableTypeIdsList == nil) {
    result.mutableTypeIdsList = [NSMutableArray array];
  }
  [result.mutableTypeIdsList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearTypeIdsList {
  result.mutableTypeIdsList = nil;
  return self;
}
- (BOOL) hasFollowUserCount {
  return result.hasFollowUserCount;
}
- (int32_t) followUserCount {
  return result.followUserCount;
}
- (TouristRoute_Builder*) setFollowUserCount:(int32_t) value {
  result.hasFollowUserCount = YES;
  result.followUserCount = value;
  return self;
}
- (TouristRoute_Builder*) clearFollowUserCount {
  result.hasFollowUserCount = NO;
  result.followUserCount = 0;
  return self;
}
- (BOOL) hasCustomerServiceTelephone {
  return result.hasCustomerServiceTelephone;
}
- (NSString*) customerServiceTelephone {
  return result.customerServiceTelephone;
}
- (TouristRoute_Builder*) setCustomerServiceTelephone:(NSString*) value {
  result.hasCustomerServiceTelephone = YES;
  result.customerServiceTelephone = value;
  return self;
}
- (TouristRoute_Builder*) clearCustomerServiceTelephone {
  result.hasCustomerServiceTelephone = NO;
  result.customerServiceTelephone = @"";
  return self;
}
- (NSArray*) imagesList {
  if (result.mutableImagesList == nil) {
    return [NSArray array];
  }
  return result.mutableImagesList;
}
- (NSString*) imagesAtIndex:(int32_t) index {
  return [result imagesAtIndex:index];
}
- (TouristRoute_Builder*) replaceImagesAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableImagesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TouristRoute_Builder*) addImages:(NSString*) value {
  if (result.mutableImagesList == nil) {
    result.mutableImagesList = [NSMutableArray array];
  }
  [result.mutableImagesList addObject:value];
  return self;
}
- (TouristRoute_Builder*) addAllImages:(NSArray*) values {
  if (result.mutableImagesList == nil) {
    result.mutableImagesList = [NSMutableArray array];
  }
  [result.mutableImagesList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearImagesList {
  result.mutableImagesList = nil;
  return self;
}
- (BOOL) hasCharacteristic {
  return result.hasCharacteristic;
}
- (NSString*) characteristic {
  return result.characteristic;
}
- (TouristRoute_Builder*) setCharacteristic:(NSString*) value {
  result.hasCharacteristic = YES;
  result.characteristic = value;
  return self;
}
- (TouristRoute_Builder*) clearCharacteristic {
  result.hasCharacteristic = NO;
  result.characteristic = @"";
  return self;
}
- (NSArray*) dailySchedulesList {
  if (result.mutableDailySchedulesList == nil) { return [NSArray array]; }
  return result.mutableDailySchedulesList;
}
- (DailySchedule*) dailySchedulesAtIndex:(int32_t) index {
  return [result dailySchedulesAtIndex:index];
}
- (TouristRoute_Builder*) replaceDailySchedulesAtIndex:(int32_t) index with:(DailySchedule*) value {
  [result.mutableDailySchedulesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TouristRoute_Builder*) addAllDailySchedules:(NSArray*) values {
  if (result.mutableDailySchedulesList == nil) {
    result.mutableDailySchedulesList = [NSMutableArray array];
  }
  [result.mutableDailySchedulesList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearDailySchedulesList {
  result.mutableDailySchedulesList = nil;
  return self;
}
- (TouristRoute_Builder*) addDailySchedules:(DailySchedule*) value {
  if (result.mutableDailySchedulesList == nil) {
    result.mutableDailySchedulesList = [NSMutableArray array];
  }
  [result.mutableDailySchedulesList addObject:value];
  return self;
}
- (NSArray*) packagesList {
  if (result.mutablePackagesList == nil) { return [NSArray array]; }
  return result.mutablePackagesList;
}
- (Package*) packagesAtIndex:(int32_t) index {
  return [result packagesAtIndex:index];
}
- (TouristRoute_Builder*) replacePackagesAtIndex:(int32_t) index with:(Package*) value {
  [result.mutablePackagesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TouristRoute_Builder*) addAllPackages:(NSArray*) values {
  if (result.mutablePackagesList == nil) {
    result.mutablePackagesList = [NSMutableArray array];
  }
  [result.mutablePackagesList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearPackagesList {
  result.mutablePackagesList = nil;
  return self;
}
- (TouristRoute_Builder*) addPackages:(Package*) value {
  if (result.mutablePackagesList == nil) {
    result.mutablePackagesList = [NSMutableArray array];
  }
  [result.mutablePackagesList addObject:value];
  return self;
}
- (BOOL) hasBooking {
  return result.hasBooking;
}
- (Booking*) booking {
  return result.booking;
}
- (TouristRoute_Builder*) setBooking:(Booking*) value {
  result.hasBooking = YES;
  result.booking = value;
  return self;
}
- (TouristRoute_Builder*) setBookingBuilder:(Booking_Builder*) builderForValue {
  return [self setBooking:[builderForValue build]];
}
- (TouristRoute_Builder*) mergeBooking:(Booking*) value {
  if (result.hasBooking &&
      result.booking != [Booking defaultInstance]) {
    result.booking =
      [[[Booking builderWithPrototype:result.booking] mergeFrom:value] buildPartial];
  } else {
    result.booking = value;
  }
  result.hasBooking = YES;
  return self;
}
- (TouristRoute_Builder*) clearBooking {
  result.hasBooking = NO;
  result.booking = [Booking defaultInstance];
  return self;
}
- (BOOL) hasReference {
  return result.hasReference;
}
- (NSString*) reference {
  return result.reference;
}
- (TouristRoute_Builder*) setReference:(NSString*) value {
  result.hasReference = YES;
  result.reference = value;
  return self;
}
- (TouristRoute_Builder*) clearReference {
  result.hasReference = NO;
  result.reference = @"";
  return self;
}
- (NSArray*) placeIdsList {
  if (result.mutablePlaceIdsList == nil) {
    return [NSArray array];
  }
  return result.mutablePlaceIdsList;
}
- (int32_t) placeIdsAtIndex:(int32_t) index {
  return [result placeIdsAtIndex:index];
}
- (TouristRoute_Builder*) replacePlaceIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutablePlaceIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addPlaceIds:(int32_t) value {
  if (result.mutablePlaceIdsList == nil) {
    result.mutablePlaceIdsList = [NSMutableArray array];
  }
  [result.mutablePlaceIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (TouristRoute_Builder*) addAllPlaceIds:(NSArray*) values {
  if (result.mutablePlaceIdsList == nil) {
    result.mutablePlaceIdsList = [NSMutableArray array];
  }
  [result.mutablePlaceIdsList addObjectsFromArray:values];
  return self;
}
- (TouristRoute_Builder*) clearPlaceIdsList {
  result.mutablePlaceIdsList = nil;
  return self;
}
- (BOOL) hasFee {
  return result.hasFee;
}
- (NSString*) fee {
  return result.fee;
}
- (TouristRoute_Builder*) setFee:(NSString*) value {
  result.hasFee = YES;
  result.fee = value;
  return self;
}
- (TouristRoute_Builder*) clearFee {
  result.hasFee = NO;
  result.fee = @"";
  return self;
}
- (BOOL) hasBookingNotice {
  return result.hasBookingNotice;
}
- (NSString*) bookingNotice {
  return result.bookingNotice;
}
- (TouristRoute_Builder*) setBookingNotice:(NSString*) value {
  result.hasBookingNotice = YES;
  result.bookingNotice = value;
  return self;
}
- (TouristRoute_Builder*) clearBookingNotice {
  result.hasBookingNotice = NO;
  result.bookingNotice = @"";
  return self;
}
@end

@interface UserFeekBack ()
@property int32_t routeId;
@property int32_t userId;
@property (retain) NSString* nickName;
@property (retain) NSString* date;
@property int32_t rank;
@property (retain) NSString* feedback;
@end

@implementation UserFeekBack

- (BOOL) hasRouteId {
  return !!hasRouteId_;
}
- (void) setHasRouteId:(BOOL) value {
  hasRouteId_ = !!value;
}
@synthesize routeId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value {
  hasRank_ = !!value;
}
@synthesize rank;
- (BOOL) hasFeedback {
  return !!hasFeedback_;
}
- (void) setHasFeedback:(BOOL) value {
  hasFeedback_ = !!value;
}
@synthesize feedback;
- (void) dealloc {
  self.nickName = nil;
  self.date = nil;
  self.feedback = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.routeId = 0;
    self.userId = 0;
    self.nickName = @"";
    self.date = @"";
    self.rank = 0;
    self.feedback = @"";
  }
  return self;
}
static UserFeekBack* defaultUserFeekBackInstance = nil;
+ (void) initialize {
  if (self == [UserFeekBack class]) {
    defaultUserFeekBackInstance = [[UserFeekBack alloc] init];
  }
}
+ (UserFeekBack*) defaultInstance {
  return defaultUserFeekBackInstance;
}
- (UserFeekBack*) defaultInstance {
  return defaultUserFeekBackInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRouteId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRouteId) {
    [output writeInt32:1 value:self.routeId];
  }
  if (self.hasUserId) {
    [output writeInt32:2 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:3 value:self.nickName];
  }
  if (self.hasDate) {
    [output writeString:4 value:self.date];
  }
  if (self.hasRank) {
    [output writeInt32:5 value:self.rank];
  }
  if (self.hasFeedback) {
    [output writeString:6 value:self.feedback];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRouteId) {
    size += computeInt32Size(1, self.routeId);
  }
  if (self.hasUserId) {
    size += computeInt32Size(2, self.userId);
  }
  if (self.hasNickName) {
    size += computeStringSize(3, self.nickName);
  }
  if (self.hasDate) {
    size += computeStringSize(4, self.date);
  }
  if (self.hasRank) {
    size += computeInt32Size(5, self.rank);
  }
  if (self.hasFeedback) {
    size += computeStringSize(6, self.feedback);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserFeekBack*) parseFromData:(NSData*) data {
  return (UserFeekBack*)[[[UserFeekBack builder] mergeFromData:data] build];
}
+ (UserFeekBack*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserFeekBack*)[[[UserFeekBack builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserFeekBack*) parseFromInputStream:(NSInputStream*) input {
  return (UserFeekBack*)[[[UserFeekBack builder] mergeFromInputStream:input] build];
}
+ (UserFeekBack*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserFeekBack*)[[[UserFeekBack builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserFeekBack*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserFeekBack*)[[[UserFeekBack builder] mergeFromCodedInputStream:input] build];
}
+ (UserFeekBack*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserFeekBack*)[[[UserFeekBack builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserFeekBack_Builder*) builder {
  return [[[UserFeekBack_Builder alloc] init] autorelease];
}
+ (UserFeekBack_Builder*) builderWithPrototype:(UserFeekBack*) prototype {
  return [[UserFeekBack builder] mergeFrom:prototype];
}
- (UserFeekBack_Builder*) builder {
  return [UserFeekBack builder];
}
@end

@interface UserFeekBack_Builder()
@property (retain) UserFeekBack* result;
@end

@implementation UserFeekBack_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserFeekBack alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserFeekBack_Builder*) clear {
  self.result = [[[UserFeekBack alloc] init] autorelease];
  return self;
}
- (UserFeekBack_Builder*) clone {
  return [UserFeekBack builderWithPrototype:result];
}
- (UserFeekBack*) defaultInstance {
  return [UserFeekBack defaultInstance];
}
- (UserFeekBack*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserFeekBack*) buildPartial {
  UserFeekBack* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserFeekBack_Builder*) mergeFrom:(UserFeekBack*) other {
  if (other == [UserFeekBack defaultInstance]) {
    return self;
  }
  if (other.hasRouteId) {
    [self setRouteId:other.routeId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasFeedback) {
    [self setFeedback:other.feedback];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserFeekBack_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserFeekBack_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRouteId:[input readInt32]];
        break;
      }
      case 16: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 26: {
        [self setNickName:[input readString]];
        break;
      }
      case 34: {
        [self setDate:[input readString]];
        break;
      }
      case 40: {
        [self setRank:[input readInt32]];
        break;
      }
      case 50: {
        [self setFeedback:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRouteId {
  return result.hasRouteId;
}
- (int32_t) routeId {
  return result.routeId;
}
- (UserFeekBack_Builder*) setRouteId:(int32_t) value {
  result.hasRouteId = YES;
  result.routeId = value;
  return self;
}
- (UserFeekBack_Builder*) clearRouteId {
  result.hasRouteId = NO;
  result.routeId = 0;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserFeekBack_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserFeekBack_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (UserFeekBack_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (UserFeekBack_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (NSString*) date {
  return result.date;
}
- (UserFeekBack_Builder*) setDate:(NSString*) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (UserFeekBack_Builder*) clearDate {
  result.hasDate = NO;
  result.date = @"";
  return self;
}
- (BOOL) hasRank {
  return result.hasRank;
}
- (int32_t) rank {
  return result.rank;
}
- (UserFeekBack_Builder*) setRank:(int32_t) value {
  result.hasRank = YES;
  result.rank = value;
  return self;
}
- (UserFeekBack_Builder*) clearRank {
  result.hasRank = NO;
  result.rank = 0;
  return self;
}
- (BOOL) hasFeedback {
  return result.hasFeedback;
}
- (NSString*) feedback {
  return result.feedback;
}
- (UserFeekBack_Builder*) setFeedback:(NSString*) value {
  result.hasFeedback = YES;
  result.feedback = value;
  return self;
}
- (UserFeekBack_Builder*) clearFeedback {
  result.hasFeedback = NO;
  result.feedback = @"";
  return self;
}
@end

@interface Agency ()
@property int32_t agencyId;
@property int32_t name;
@end

@implementation Agency

- (BOOL) hasAgencyId {
  return !!hasAgencyId_;
}
- (void) setHasAgencyId:(BOOL) value {
  hasAgencyId_ = !!value;
}
@synthesize agencyId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.agencyId = 0;
    self.name = 0;
  }
  return self;
}
static Agency* defaultAgencyInstance = nil;
+ (void) initialize {
  if (self == [Agency class]) {
    defaultAgencyInstance = [[Agency alloc] init];
  }
}
+ (Agency*) defaultInstance {
  return defaultAgencyInstance;
}
- (Agency*) defaultInstance {
  return defaultAgencyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAgencyId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAgencyId) {
    [output writeInt32:1 value:self.agencyId];
  }
  if (self.hasName) {
    [output writeInt32:2 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAgencyId) {
    size += computeInt32Size(1, self.agencyId);
  }
  if (self.hasName) {
    size += computeInt32Size(2, self.name);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Agency*) parseFromData:(NSData*) data {
  return (Agency*)[[[Agency builder] mergeFromData:data] build];
}
+ (Agency*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Agency*)[[[Agency builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Agency*) parseFromInputStream:(NSInputStream*) input {
  return (Agency*)[[[Agency builder] mergeFromInputStream:input] build];
}
+ (Agency*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Agency*)[[[Agency builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Agency*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Agency*)[[[Agency builder] mergeFromCodedInputStream:input] build];
}
+ (Agency*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Agency*)[[[Agency builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Agency_Builder*) builder {
  return [[[Agency_Builder alloc] init] autorelease];
}
+ (Agency_Builder*) builderWithPrototype:(Agency*) prototype {
  return [[Agency builder] mergeFrom:prototype];
}
- (Agency_Builder*) builder {
  return [Agency builder];
}
@end

@interface Agency_Builder()
@property (retain) Agency* result;
@end

@implementation Agency_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Agency alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Agency_Builder*) clear {
  self.result = [[[Agency alloc] init] autorelease];
  return self;
}
- (Agency_Builder*) clone {
  return [Agency builderWithPrototype:result];
}
- (Agency*) defaultInstance {
  return [Agency defaultInstance];
}
- (Agency*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Agency*) buildPartial {
  Agency* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Agency_Builder*) mergeFrom:(Agency*) other {
  if (other == [Agency defaultInstance]) {
    return self;
  }
  if (other.hasAgencyId) {
    [self setAgencyId:other.agencyId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Agency_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Agency_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAgencyId:[input readInt32]];
        break;
      }
      case 16: {
        [self setName:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAgencyId {
  return result.hasAgencyId;
}
- (int32_t) agencyId {
  return result.agencyId;
}
- (Agency_Builder*) setAgencyId:(int32_t) value {
  result.hasAgencyId = YES;
  result.agencyId = value;
  return self;
}
- (Agency_Builder*) clearAgencyId {
  result.hasAgencyId = NO;
  result.agencyId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (int32_t) name {
  return result.name;
}
- (Agency_Builder*) setName:(int32_t) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Agency_Builder*) clearName {
  result.hasName = NO;
  result.name = 0;
  return self;
}
@end

@interface RouteCity ()
@property int32_t routeCityId;
@property (retain) NSString* cityName;
@property (retain) NSString* countryName;
@end

@implementation RouteCity

- (BOOL) hasRouteCityId {
  return !!hasRouteCityId_;
}
- (void) setHasRouteCityId:(BOOL) value {
  hasRouteCityId_ = !!value;
}
@synthesize routeCityId;
- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) value {
  hasCityName_ = !!value;
}
@synthesize cityName;
- (BOOL) hasCountryName {
  return !!hasCountryName_;
}
- (void) setHasCountryName:(BOOL) value {
  hasCountryName_ = !!value;
}
@synthesize countryName;
- (void) dealloc {
  self.cityName = nil;
  self.countryName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.routeCityId = 0;
    self.cityName = @"";
    self.countryName = @"";
  }
  return self;
}
static RouteCity* defaultRouteCityInstance = nil;
+ (void) initialize {
  if (self == [RouteCity class]) {
    defaultRouteCityInstance = [[RouteCity alloc] init];
  }
}
+ (RouteCity*) defaultInstance {
  return defaultRouteCityInstance;
}
- (RouteCity*) defaultInstance {
  return defaultRouteCityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRouteCityId) {
    return NO;
  }
  if (!self.hasCityName) {
    return NO;
  }
  if (!self.hasCountryName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRouteCityId) {
    [output writeInt32:1 value:self.routeCityId];
  }
  if (self.hasCityName) {
    [output writeString:2 value:self.cityName];
  }
  if (self.hasCountryName) {
    [output writeString:3 value:self.countryName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRouteCityId) {
    size += computeInt32Size(1, self.routeCityId);
  }
  if (self.hasCityName) {
    size += computeStringSize(2, self.cityName);
  }
  if (self.hasCountryName) {
    size += computeStringSize(3, self.countryName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RouteCity*) parseFromData:(NSData*) data {
  return (RouteCity*)[[[RouteCity builder] mergeFromData:data] build];
}
+ (RouteCity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteCity*)[[[RouteCity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RouteCity*) parseFromInputStream:(NSInputStream*) input {
  return (RouteCity*)[[[RouteCity builder] mergeFromInputStream:input] build];
}
+ (RouteCity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteCity*)[[[RouteCity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RouteCity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RouteCity*)[[[RouteCity builder] mergeFromCodedInputStream:input] build];
}
+ (RouteCity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteCity*)[[[RouteCity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RouteCity_Builder*) builder {
  return [[[RouteCity_Builder alloc] init] autorelease];
}
+ (RouteCity_Builder*) builderWithPrototype:(RouteCity*) prototype {
  return [[RouteCity builder] mergeFrom:prototype];
}
- (RouteCity_Builder*) builder {
  return [RouteCity builder];
}
@end

@interface RouteCity_Builder()
@property (retain) RouteCity* result;
@end

@implementation RouteCity_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RouteCity alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RouteCity_Builder*) clear {
  self.result = [[[RouteCity alloc] init] autorelease];
  return self;
}
- (RouteCity_Builder*) clone {
  return [RouteCity builderWithPrototype:result];
}
- (RouteCity*) defaultInstance {
  return [RouteCity defaultInstance];
}
- (RouteCity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RouteCity*) buildPartial {
  RouteCity* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RouteCity_Builder*) mergeFrom:(RouteCity*) other {
  if (other == [RouteCity defaultInstance]) {
    return self;
  }
  if (other.hasRouteCityId) {
    [self setRouteCityId:other.routeCityId];
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  if (other.hasCountryName) {
    [self setCountryName:other.countryName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RouteCity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RouteCity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRouteCityId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCityName:[input readString]];
        break;
      }
      case 26: {
        [self setCountryName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRouteCityId {
  return result.hasRouteCityId;
}
- (int32_t) routeCityId {
  return result.routeCityId;
}
- (RouteCity_Builder*) setRouteCityId:(int32_t) value {
  result.hasRouteCityId = YES;
  result.routeCityId = value;
  return self;
}
- (RouteCity_Builder*) clearRouteCityId {
  result.hasRouteCityId = NO;
  result.routeCityId = 0;
  return self;
}
- (BOOL) hasCityName {
  return result.hasCityName;
}
- (NSString*) cityName {
  return result.cityName;
}
- (RouteCity_Builder*) setCityName:(NSString*) value {
  result.hasCityName = YES;
  result.cityName = value;
  return self;
}
- (RouteCity_Builder*) clearCityName {
  result.hasCityName = NO;
  result.cityName = @"";
  return self;
}
- (BOOL) hasCountryName {
  return result.hasCountryName;
}
- (NSString*) countryName {
  return result.countryName;
}
- (RouteCity_Builder*) setCountryName:(NSString*) value {
  result.hasCountryName = YES;
  result.countryName = value;
  return self;
}
- (RouteCity_Builder*) clearCountryName {
  result.hasCountryName = NO;
  result.countryName = @"";
  return self;
}
@end

@interface DailySchedule ()
@property int32_t day;
@property (retain) NSString* title;
@property (retain) PlaceTour* placeTours;
@property (retain) NSString* breakfast;
@property (retain) NSString* lunch;
@property (retain) NSString* dinner;
@property (retain) Accommodation* accommodation;
@end

@implementation DailySchedule

- (BOOL) hasDay {
  return !!hasDay_;
}
- (void) setHasDay:(BOOL) value {
  hasDay_ = !!value;
}
@synthesize day;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (BOOL) hasPlaceTours {
  return !!hasPlaceTours_;
}
- (void) setHasPlaceTours:(BOOL) value {
  hasPlaceTours_ = !!value;
}
@synthesize placeTours;
- (BOOL) hasBreakfast {
  return !!hasBreakfast_;
}
- (void) setHasBreakfast:(BOOL) value {
  hasBreakfast_ = !!value;
}
@synthesize breakfast;
- (BOOL) hasLunch {
  return !!hasLunch_;
}
- (void) setHasLunch:(BOOL) value {
  hasLunch_ = !!value;
}
@synthesize lunch;
- (BOOL) hasDinner {
  return !!hasDinner_;
}
- (void) setHasDinner:(BOOL) value {
  hasDinner_ = !!value;
}
@synthesize dinner;
- (BOOL) hasAccommodation {
  return !!hasAccommodation_;
}
- (void) setHasAccommodation:(BOOL) value {
  hasAccommodation_ = !!value;
}
@synthesize accommodation;
- (void) dealloc {
  self.title = nil;
  self.placeTours = nil;
  self.breakfast = nil;
  self.lunch = nil;
  self.dinner = nil;
  self.accommodation = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.day = 0;
    self.title = @"";
    self.placeTours = [PlaceTour defaultInstance];
    self.breakfast = @"";
    self.lunch = @"";
    self.dinner = @"";
    self.accommodation = [Accommodation defaultInstance];
  }
  return self;
}
static DailySchedule* defaultDailyScheduleInstance = nil;
+ (void) initialize {
  if (self == [DailySchedule class]) {
    defaultDailyScheduleInstance = [[DailySchedule alloc] init];
  }
}
+ (DailySchedule*) defaultInstance {
  return defaultDailyScheduleInstance;
}
- (DailySchedule*) defaultInstance {
  return defaultDailyScheduleInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDay) {
    return NO;
  }
  if (!self.hasTitle) {
    return NO;
  }
  if (self.hasPlaceTours) {
    if (!self.placeTours.isInitialized) {
      return NO;
    }
  }
  if (self.hasAccommodation) {
    if (!self.accommodation.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDay) {
    [output writeInt32:1 value:self.day];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  if (self.hasPlaceTours) {
    [output writeMessage:3 value:self.placeTours];
  }
  if (self.hasBreakfast) {
    [output writeString:4 value:self.breakfast];
  }
  if (self.hasLunch) {
    [output writeString:5 value:self.lunch];
  }
  if (self.hasDinner) {
    [output writeString:6 value:self.dinner];
  }
  if (self.hasAccommodation) {
    [output writeMessage:7 value:self.accommodation];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDay) {
    size += computeInt32Size(1, self.day);
  }
  if (self.hasTitle) {
    size += computeStringSize(2, self.title);
  }
  if (self.hasPlaceTours) {
    size += computeMessageSize(3, self.placeTours);
  }
  if (self.hasBreakfast) {
    size += computeStringSize(4, self.breakfast);
  }
  if (self.hasLunch) {
    size += computeStringSize(5, self.lunch);
  }
  if (self.hasDinner) {
    size += computeStringSize(6, self.dinner);
  }
  if (self.hasAccommodation) {
    size += computeMessageSize(7, self.accommodation);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DailySchedule*) parseFromData:(NSData*) data {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromData:data] build];
}
+ (DailySchedule*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DailySchedule*) parseFromInputStream:(NSInputStream*) input {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromInputStream:input] build];
}
+ (DailySchedule*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DailySchedule*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromCodedInputStream:input] build];
}
+ (DailySchedule*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DailySchedule*)[[[DailySchedule builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DailySchedule_Builder*) builder {
  return [[[DailySchedule_Builder alloc] init] autorelease];
}
+ (DailySchedule_Builder*) builderWithPrototype:(DailySchedule*) prototype {
  return [[DailySchedule builder] mergeFrom:prototype];
}
- (DailySchedule_Builder*) builder {
  return [DailySchedule builder];
}
@end

@interface DailySchedule_Builder()
@property (retain) DailySchedule* result;
@end

@implementation DailySchedule_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DailySchedule alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DailySchedule_Builder*) clear {
  self.result = [[[DailySchedule alloc] init] autorelease];
  return self;
}
- (DailySchedule_Builder*) clone {
  return [DailySchedule builderWithPrototype:result];
}
- (DailySchedule*) defaultInstance {
  return [DailySchedule defaultInstance];
}
- (DailySchedule*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DailySchedule*) buildPartial {
  DailySchedule* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DailySchedule_Builder*) mergeFrom:(DailySchedule*) other {
  if (other == [DailySchedule defaultInstance]) {
    return self;
  }
  if (other.hasDay) {
    [self setDay:other.day];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasPlaceTours) {
    [self mergePlaceTours:other.placeTours];
  }
  if (other.hasBreakfast) {
    [self setBreakfast:other.breakfast];
  }
  if (other.hasLunch) {
    [self setLunch:other.lunch];
  }
  if (other.hasDinner) {
    [self setDinner:other.dinner];
  }
  if (other.hasAccommodation) {
    [self mergeAccommodation:other.accommodation];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DailySchedule_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DailySchedule_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDay:[input readInt32]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 26: {
        PlaceTour_Builder* subBuilder = [PlaceTour builder];
        if (self.hasPlaceTours) {
          [subBuilder mergeFrom:self.placeTours];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPlaceTours:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setBreakfast:[input readString]];
        break;
      }
      case 42: {
        [self setLunch:[input readString]];
        break;
      }
      case 50: {
        [self setDinner:[input readString]];
        break;
      }
      case 58: {
        Accommodation_Builder* subBuilder = [Accommodation builder];
        if (self.hasAccommodation) {
          [subBuilder mergeFrom:self.accommodation];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAccommodation:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDay {
  return result.hasDay;
}
- (int32_t) day {
  return result.day;
}
- (DailySchedule_Builder*) setDay:(int32_t) value {
  result.hasDay = YES;
  result.day = value;
  return self;
}
- (DailySchedule_Builder*) clearDay {
  result.hasDay = NO;
  result.day = 0;
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (DailySchedule_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (DailySchedule_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasPlaceTours {
  return result.hasPlaceTours;
}
- (PlaceTour*) placeTours {
  return result.placeTours;
}
- (DailySchedule_Builder*) setPlaceTours:(PlaceTour*) value {
  result.hasPlaceTours = YES;
  result.placeTours = value;
  return self;
}
- (DailySchedule_Builder*) setPlaceToursBuilder:(PlaceTour_Builder*) builderForValue {
  return [self setPlaceTours:[builderForValue build]];
}
- (DailySchedule_Builder*) mergePlaceTours:(PlaceTour*) value {
  if (result.hasPlaceTours &&
      result.placeTours != [PlaceTour defaultInstance]) {
    result.placeTours =
      [[[PlaceTour builderWithPrototype:result.placeTours] mergeFrom:value] buildPartial];
  } else {
    result.placeTours = value;
  }
  result.hasPlaceTours = YES;
  return self;
}
- (DailySchedule_Builder*) clearPlaceTours {
  result.hasPlaceTours = NO;
  result.placeTours = [PlaceTour defaultInstance];
  return self;
}
- (BOOL) hasBreakfast {
  return result.hasBreakfast;
}
- (NSString*) breakfast {
  return result.breakfast;
}
- (DailySchedule_Builder*) setBreakfast:(NSString*) value {
  result.hasBreakfast = YES;
  result.breakfast = value;
  return self;
}
- (DailySchedule_Builder*) clearBreakfast {
  result.hasBreakfast = NO;
  result.breakfast = @"";
  return self;
}
- (BOOL) hasLunch {
  return result.hasLunch;
}
- (NSString*) lunch {
  return result.lunch;
}
- (DailySchedule_Builder*) setLunch:(NSString*) value {
  result.hasLunch = YES;
  result.lunch = value;
  return self;
}
- (DailySchedule_Builder*) clearLunch {
  result.hasLunch = NO;
  result.lunch = @"";
  return self;
}
- (BOOL) hasDinner {
  return result.hasDinner;
}
- (NSString*) dinner {
  return result.dinner;
}
- (DailySchedule_Builder*) setDinner:(NSString*) value {
  result.hasDinner = YES;
  result.dinner = value;
  return self;
}
- (DailySchedule_Builder*) clearDinner {
  result.hasDinner = NO;
  result.dinner = @"";
  return self;
}
- (BOOL) hasAccommodation {
  return result.hasAccommodation;
}
- (Accommodation*) accommodation {
  return result.accommodation;
}
- (DailySchedule_Builder*) setAccommodation:(Accommodation*) value {
  result.hasAccommodation = YES;
  result.accommodation = value;
  return self;
}
- (DailySchedule_Builder*) setAccommodationBuilder:(Accommodation_Builder*) builderForValue {
  return [self setAccommodation:[builderForValue build]];
}
- (DailySchedule_Builder*) mergeAccommodation:(Accommodation*) value {
  if (result.hasAccommodation &&
      result.accommodation != [Accommodation defaultInstance]) {
    result.accommodation =
      [[[Accommodation builderWithPrototype:result.accommodation] mergeFrom:value] buildPartial];
  } else {
    result.accommodation = value;
  }
  result.hasAccommodation = YES;
  return self;
}
- (DailySchedule_Builder*) clearAccommodation {
  result.hasAccommodation = NO;
  result.accommodation = [Accommodation defaultInstance];
  return self;
}
@end

@interface Package ()
@property int32_t number;
@property (retain) Flight* departureFlight;
@property (retain) Flight* returnFlight;
@property (retain) NSMutableArray* mutableAccommodationsList;
@end

@implementation Package

- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) value {
  hasNumber_ = !!value;
}
@synthesize number;
- (BOOL) hasDepartureFlight {
  return !!hasDepartureFlight_;
}
- (void) setHasDepartureFlight:(BOOL) value {
  hasDepartureFlight_ = !!value;
}
@synthesize departureFlight;
- (BOOL) hasReturnFlight {
  return !!hasReturnFlight_;
}
- (void) setHasReturnFlight:(BOOL) value {
  hasReturnFlight_ = !!value;
}
@synthesize returnFlight;
@synthesize mutableAccommodationsList;
- (void) dealloc {
  self.departureFlight = nil;
  self.returnFlight = nil;
  self.mutableAccommodationsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.number = 0;
    self.departureFlight = [Flight defaultInstance];
    self.returnFlight = [Flight defaultInstance];
  }
  return self;
}
static Package* defaultPackageInstance = nil;
+ (void) initialize {
  if (self == [Package class]) {
    defaultPackageInstance = [[Package alloc] init];
  }
}
+ (Package*) defaultInstance {
  return defaultPackageInstance;
}
- (Package*) defaultInstance {
  return defaultPackageInstance;
}
- (NSArray*) accommodationsList {
  return mutableAccommodationsList;
}
- (Accommodation*) accommodationsAtIndex:(int32_t) index {
  id value = [mutableAccommodationsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasNumber) {
    return NO;
  }
  if (self.hasDepartureFlight) {
    if (!self.departureFlight.isInitialized) {
      return NO;
    }
  }
  if (self.hasReturnFlight) {
    if (!self.returnFlight.isInitialized) {
      return NO;
    }
  }
  for (Accommodation* element in self.accommodationsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNumber) {
    [output writeInt32:1 value:self.number];
  }
  if (self.hasDepartureFlight) {
    [output writeMessage:2 value:self.departureFlight];
  }
  if (self.hasReturnFlight) {
    [output writeMessage:3 value:self.returnFlight];
  }
  for (Accommodation* element in self.accommodationsList) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasNumber) {
    size += computeInt32Size(1, self.number);
  }
  if (self.hasDepartureFlight) {
    size += computeMessageSize(2, self.departureFlight);
  }
  if (self.hasReturnFlight) {
    size += computeMessageSize(3, self.returnFlight);
  }
  for (Accommodation* element in self.accommodationsList) {
    size += computeMessageSize(4, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Package*) parseFromData:(NSData*) data {
  return (Package*)[[[Package builder] mergeFromData:data] build];
}
+ (Package*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Package*)[[[Package builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Package*) parseFromInputStream:(NSInputStream*) input {
  return (Package*)[[[Package builder] mergeFromInputStream:input] build];
}
+ (Package*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Package*)[[[Package builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Package*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Package*)[[[Package builder] mergeFromCodedInputStream:input] build];
}
+ (Package*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Package*)[[[Package builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Package_Builder*) builder {
  return [[[Package_Builder alloc] init] autorelease];
}
+ (Package_Builder*) builderWithPrototype:(Package*) prototype {
  return [[Package builder] mergeFrom:prototype];
}
- (Package_Builder*) builder {
  return [Package builder];
}
@end

@interface Package_Builder()
@property (retain) Package* result;
@end

@implementation Package_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Package alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Package_Builder*) clear {
  self.result = [[[Package alloc] init] autorelease];
  return self;
}
- (Package_Builder*) clone {
  return [Package builderWithPrototype:result];
}
- (Package*) defaultInstance {
  return [Package defaultInstance];
}
- (Package*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Package*) buildPartial {
  Package* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Package_Builder*) mergeFrom:(Package*) other {
  if (other == [Package defaultInstance]) {
    return self;
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasDepartureFlight) {
    [self mergeDepartureFlight:other.departureFlight];
  }
  if (other.hasReturnFlight) {
    [self mergeReturnFlight:other.returnFlight];
  }
  if (other.mutableAccommodationsList.count > 0) {
    if (result.mutableAccommodationsList == nil) {
      result.mutableAccommodationsList = [NSMutableArray array];
    }
    [result.mutableAccommodationsList addObjectsFromArray:other.mutableAccommodationsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Package_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Package_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNumber:[input readInt32]];
        break;
      }
      case 18: {
        Flight_Builder* subBuilder = [Flight builder];
        if (self.hasDepartureFlight) {
          [subBuilder mergeFrom:self.departureFlight];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDepartureFlight:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        Flight_Builder* subBuilder = [Flight builder];
        if (self.hasReturnFlight) {
          [subBuilder mergeFrom:self.returnFlight];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setReturnFlight:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        Accommodation_Builder* subBuilder = [Accommodation builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAccommodations:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNumber {
  return result.hasNumber;
}
- (int32_t) number {
  return result.number;
}
- (Package_Builder*) setNumber:(int32_t) value {
  result.hasNumber = YES;
  result.number = value;
  return self;
}
- (Package_Builder*) clearNumber {
  result.hasNumber = NO;
  result.number = 0;
  return self;
}
- (BOOL) hasDepartureFlight {
  return result.hasDepartureFlight;
}
- (Flight*) departureFlight {
  return result.departureFlight;
}
- (Package_Builder*) setDepartureFlight:(Flight*) value {
  result.hasDepartureFlight = YES;
  result.departureFlight = value;
  return self;
}
- (Package_Builder*) setDepartureFlightBuilder:(Flight_Builder*) builderForValue {
  return [self setDepartureFlight:[builderForValue build]];
}
- (Package_Builder*) mergeDepartureFlight:(Flight*) value {
  if (result.hasDepartureFlight &&
      result.departureFlight != [Flight defaultInstance]) {
    result.departureFlight =
      [[[Flight builderWithPrototype:result.departureFlight] mergeFrom:value] buildPartial];
  } else {
    result.departureFlight = value;
  }
  result.hasDepartureFlight = YES;
  return self;
}
- (Package_Builder*) clearDepartureFlight {
  result.hasDepartureFlight = NO;
  result.departureFlight = [Flight defaultInstance];
  return self;
}
- (BOOL) hasReturnFlight {
  return result.hasReturnFlight;
}
- (Flight*) returnFlight {
  return result.returnFlight;
}
- (Package_Builder*) setReturnFlight:(Flight*) value {
  result.hasReturnFlight = YES;
  result.returnFlight = value;
  return self;
}
- (Package_Builder*) setReturnFlightBuilder:(Flight_Builder*) builderForValue {
  return [self setReturnFlight:[builderForValue build]];
}
- (Package_Builder*) mergeReturnFlight:(Flight*) value {
  if (result.hasReturnFlight &&
      result.returnFlight != [Flight defaultInstance]) {
    result.returnFlight =
      [[[Flight builderWithPrototype:result.returnFlight] mergeFrom:value] buildPartial];
  } else {
    result.returnFlight = value;
  }
  result.hasReturnFlight = YES;
  return self;
}
- (Package_Builder*) clearReturnFlight {
  result.hasReturnFlight = NO;
  result.returnFlight = [Flight defaultInstance];
  return self;
}
- (NSArray*) accommodationsList {
  if (result.mutableAccommodationsList == nil) { return [NSArray array]; }
  return result.mutableAccommodationsList;
}
- (Accommodation*) accommodationsAtIndex:(int32_t) index {
  return [result accommodationsAtIndex:index];
}
- (Package_Builder*) replaceAccommodationsAtIndex:(int32_t) index with:(Accommodation*) value {
  [result.mutableAccommodationsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (Package_Builder*) addAllAccommodations:(NSArray*) values {
  if (result.mutableAccommodationsList == nil) {
    result.mutableAccommodationsList = [NSMutableArray array];
  }
  [result.mutableAccommodationsList addObjectsFromArray:values];
  return self;
}
- (Package_Builder*) clearAccommodationsList {
  result.mutableAccommodationsList = nil;
  return self;
}
- (Package_Builder*) addAccommodations:(Accommodation*) value {
  if (result.mutableAccommodationsList == nil) {
    result.mutableAccommodationsList = [NSMutableArray array];
  }
  [result.mutableAccommodationsList addObject:value];
  return self;
}
@end

@interface Booking ()
@property int32_t date;
@property int32_t status;
@property (retain) NSString* remainder;
@property (retain) NSString* adultPrice;
@property (retain) NSString* childrenPrice;
@end

@implementation Booking

- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasRemainder {
  return !!hasRemainder_;
}
- (void) setHasRemainder:(BOOL) value {
  hasRemainder_ = !!value;
}
@synthesize remainder;
- (BOOL) hasAdultPrice {
  return !!hasAdultPrice_;
}
- (void) setHasAdultPrice:(BOOL) value {
  hasAdultPrice_ = !!value;
}
@synthesize adultPrice;
- (BOOL) hasChildrenPrice {
  return !!hasChildrenPrice_;
}
- (void) setHasChildrenPrice:(BOOL) value {
  hasChildrenPrice_ = !!value;
}
@synthesize childrenPrice;
- (void) dealloc {
  self.remainder = nil;
  self.adultPrice = nil;
  self.childrenPrice = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.date = 0;
    self.status = 0;
    self.remainder = @"";
    self.adultPrice = @"";
    self.childrenPrice = @"";
  }
  return self;
}
static Booking* defaultBookingInstance = nil;
+ (void) initialize {
  if (self == [Booking class]) {
    defaultBookingInstance = [[Booking alloc] init];
  }
}
+ (Booking*) defaultInstance {
  return defaultBookingInstance;
}
- (Booking*) defaultInstance {
  return defaultBookingInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDate) {
    [output writeInt32:1 value:self.date];
  }
  if (self.hasStatus) {
    [output writeInt32:2 value:self.status];
  }
  if (self.hasRemainder) {
    [output writeString:3 value:self.remainder];
  }
  if (self.hasAdultPrice) {
    [output writeString:4 value:self.adultPrice];
  }
  if (self.hasChildrenPrice) {
    [output writeString:5 value:self.childrenPrice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDate) {
    size += computeInt32Size(1, self.date);
  }
  if (self.hasStatus) {
    size += computeInt32Size(2, self.status);
  }
  if (self.hasRemainder) {
    size += computeStringSize(3, self.remainder);
  }
  if (self.hasAdultPrice) {
    size += computeStringSize(4, self.adultPrice);
  }
  if (self.hasChildrenPrice) {
    size += computeStringSize(5, self.childrenPrice);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Booking*) parseFromData:(NSData*) data {
  return (Booking*)[[[Booking builder] mergeFromData:data] build];
}
+ (Booking*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Booking*)[[[Booking builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Booking*) parseFromInputStream:(NSInputStream*) input {
  return (Booking*)[[[Booking builder] mergeFromInputStream:input] build];
}
+ (Booking*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Booking*)[[[Booking builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Booking*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Booking*)[[[Booking builder] mergeFromCodedInputStream:input] build];
}
+ (Booking*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Booking*)[[[Booking builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Booking_Builder*) builder {
  return [[[Booking_Builder alloc] init] autorelease];
}
+ (Booking_Builder*) builderWithPrototype:(Booking*) prototype {
  return [[Booking builder] mergeFrom:prototype];
}
- (Booking_Builder*) builder {
  return [Booking builder];
}
@end

@interface Booking_Builder()
@property (retain) Booking* result;
@end

@implementation Booking_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Booking alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Booking_Builder*) clear {
  self.result = [[[Booking alloc] init] autorelease];
  return self;
}
- (Booking_Builder*) clone {
  return [Booking builderWithPrototype:result];
}
- (Booking*) defaultInstance {
  return [Booking defaultInstance];
}
- (Booking*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Booking*) buildPartial {
  Booking* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Booking_Builder*) mergeFrom:(Booking*) other {
  if (other == [Booking defaultInstance]) {
    return self;
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasRemainder) {
    [self setRemainder:other.remainder];
  }
  if (other.hasAdultPrice) {
    [self setAdultPrice:other.adultPrice];
  }
  if (other.hasChildrenPrice) {
    [self setChildrenPrice:other.childrenPrice];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Booking_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Booking_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDate:[input readInt32]];
        break;
      }
      case 16: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 26: {
        [self setRemainder:[input readString]];
        break;
      }
      case 34: {
        [self setAdultPrice:[input readString]];
        break;
      }
      case 42: {
        [self setChildrenPrice:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (Booking_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (Booking_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (Booking_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (Booking_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasRemainder {
  return result.hasRemainder;
}
- (NSString*) remainder {
  return result.remainder;
}
- (Booking_Builder*) setRemainder:(NSString*) value {
  result.hasRemainder = YES;
  result.remainder = value;
  return self;
}
- (Booking_Builder*) clearRemainder {
  result.hasRemainder = NO;
  result.remainder = @"";
  return self;
}
- (BOOL) hasAdultPrice {
  return result.hasAdultPrice;
}
- (NSString*) adultPrice {
  return result.adultPrice;
}
- (Booking_Builder*) setAdultPrice:(NSString*) value {
  result.hasAdultPrice = YES;
  result.adultPrice = value;
  return self;
}
- (Booking_Builder*) clearAdultPrice {
  result.hasAdultPrice = NO;
  result.adultPrice = @"";
  return self;
}
- (BOOL) hasChildrenPrice {
  return result.hasChildrenPrice;
}
- (NSString*) childrenPrice {
  return result.childrenPrice;
}
- (Booking_Builder*) setChildrenPrice:(NSString*) value {
  result.hasChildrenPrice = YES;
  result.childrenPrice = value;
  return self;
}
- (Booking_Builder*) clearChildrenPrice {
  result.hasChildrenPrice = NO;
  result.childrenPrice = @"";
  return self;
}
@end

@interface PlaceTour ()
@property int32_t id;
@property (retain) NSString* name;
@property (retain) NSString* duration;
@end

@implementation PlaceTour

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value {
  hasDuration_ = !!value;
}
@synthesize duration;
- (void) dealloc {
  self.name = nil;
  self.duration = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.duration = @"";
  }
  return self;
}
static PlaceTour* defaultPlaceTourInstance = nil;
+ (void) initialize {
  if (self == [PlaceTour class]) {
    defaultPlaceTourInstance = [[PlaceTour alloc] init];
  }
}
+ (PlaceTour*) defaultInstance {
  return defaultPlaceTourInstance;
}
- (PlaceTour*) defaultInstance {
  return defaultPlaceTourInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDuration) {
    [output writeString:3 value:self.duration];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasDuration) {
    size += computeStringSize(3, self.duration);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PlaceTour*) parseFromData:(NSData*) data {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromData:data] build];
}
+ (PlaceTour*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PlaceTour*) parseFromInputStream:(NSInputStream*) input {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromInputStream:input] build];
}
+ (PlaceTour*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaceTour*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromCodedInputStream:input] build];
}
+ (PlaceTour*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceTour*)[[[PlaceTour builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaceTour_Builder*) builder {
  return [[[PlaceTour_Builder alloc] init] autorelease];
}
+ (PlaceTour_Builder*) builderWithPrototype:(PlaceTour*) prototype {
  return [[PlaceTour builder] mergeFrom:prototype];
}
- (PlaceTour_Builder*) builder {
  return [PlaceTour builder];
}
@end

@interface PlaceTour_Builder()
@property (retain) PlaceTour* result;
@end

@implementation PlaceTour_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PlaceTour alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PlaceTour_Builder*) clear {
  self.result = [[[PlaceTour alloc] init] autorelease];
  return self;
}
- (PlaceTour_Builder*) clone {
  return [PlaceTour builderWithPrototype:result];
}
- (PlaceTour*) defaultInstance {
  return [PlaceTour defaultInstance];
}
- (PlaceTour*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PlaceTour*) buildPartial {
  PlaceTour* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PlaceTour_Builder*) mergeFrom:(PlaceTour*) other {
  if (other == [PlaceTour defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PlaceTour_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PlaceTour_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setDuration:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (PlaceTour_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PlaceTour_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PlaceTour_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PlaceTour_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (NSString*) duration {
  return result.duration;
}
- (PlaceTour_Builder*) setDuration:(NSString*) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (PlaceTour_Builder*) clearDuration {
  result.hasDuration = NO;
  result.duration = @"";
  return self;
}
@end

@interface Dining ()
@property (retain) NSString* breakfast;
@property (retain) NSString* lunch;
@property (retain) NSString* dinner;
@end

@implementation Dining

- (BOOL) hasBreakfast {
  return !!hasBreakfast_;
}
- (void) setHasBreakfast:(BOOL) value {
  hasBreakfast_ = !!value;
}
@synthesize breakfast;
- (BOOL) hasLunch {
  return !!hasLunch_;
}
- (void) setHasLunch:(BOOL) value {
  hasLunch_ = !!value;
}
@synthesize lunch;
- (BOOL) hasDinner {
  return !!hasDinner_;
}
- (void) setHasDinner:(BOOL) value {
  hasDinner_ = !!value;
}
@synthesize dinner;
- (void) dealloc {
  self.breakfast = nil;
  self.lunch = nil;
  self.dinner = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.breakfast = @"";
    self.lunch = @"";
    self.dinner = @"";
  }
  return self;
}
static Dining* defaultDiningInstance = nil;
+ (void) initialize {
  if (self == [Dining class]) {
    defaultDiningInstance = [[Dining alloc] init];
  }
}
+ (Dining*) defaultInstance {
  return defaultDiningInstance;
}
- (Dining*) defaultInstance {
  return defaultDiningInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBreakfast) {
    [output writeString:1 value:self.breakfast];
  }
  if (self.hasLunch) {
    [output writeString:2 value:self.lunch];
  }
  if (self.hasDinner) {
    [output writeString:3 value:self.dinner];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBreakfast) {
    size += computeStringSize(1, self.breakfast);
  }
  if (self.hasLunch) {
    size += computeStringSize(2, self.lunch);
  }
  if (self.hasDinner) {
    size += computeStringSize(3, self.dinner);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Dining*) parseFromData:(NSData*) data {
  return (Dining*)[[[Dining builder] mergeFromData:data] build];
}
+ (Dining*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Dining*)[[[Dining builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Dining*) parseFromInputStream:(NSInputStream*) input {
  return (Dining*)[[[Dining builder] mergeFromInputStream:input] build];
}
+ (Dining*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Dining*)[[[Dining builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Dining*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Dining*)[[[Dining builder] mergeFromCodedInputStream:input] build];
}
+ (Dining*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Dining*)[[[Dining builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Dining_Builder*) builder {
  return [[[Dining_Builder alloc] init] autorelease];
}
+ (Dining_Builder*) builderWithPrototype:(Dining*) prototype {
  return [[Dining builder] mergeFrom:prototype];
}
- (Dining_Builder*) builder {
  return [Dining builder];
}
@end

@interface Dining_Builder()
@property (retain) Dining* result;
@end

@implementation Dining_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Dining alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Dining_Builder*) clear {
  self.result = [[[Dining alloc] init] autorelease];
  return self;
}
- (Dining_Builder*) clone {
  return [Dining builderWithPrototype:result];
}
- (Dining*) defaultInstance {
  return [Dining defaultInstance];
}
- (Dining*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Dining*) buildPartial {
  Dining* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Dining_Builder*) mergeFrom:(Dining*) other {
  if (other == [Dining defaultInstance]) {
    return self;
  }
  if (other.hasBreakfast) {
    [self setBreakfast:other.breakfast];
  }
  if (other.hasLunch) {
    [self setLunch:other.lunch];
  }
  if (other.hasDinner) {
    [self setDinner:other.dinner];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Dining_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Dining_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBreakfast:[input readString]];
        break;
      }
      case 18: {
        [self setLunch:[input readString]];
        break;
      }
      case 26: {
        [self setDinner:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBreakfast {
  return result.hasBreakfast;
}
- (NSString*) breakfast {
  return result.breakfast;
}
- (Dining_Builder*) setBreakfast:(NSString*) value {
  result.hasBreakfast = YES;
  result.breakfast = value;
  return self;
}
- (Dining_Builder*) clearBreakfast {
  result.hasBreakfast = NO;
  result.breakfast = @"";
  return self;
}
- (BOOL) hasLunch {
  return result.hasLunch;
}
- (NSString*) lunch {
  return result.lunch;
}
- (Dining_Builder*) setLunch:(NSString*) value {
  result.hasLunch = YES;
  result.lunch = value;
  return self;
}
- (Dining_Builder*) clearLunch {
  result.hasLunch = NO;
  result.lunch = @"";
  return self;
}
- (BOOL) hasDinner {
  return result.hasDinner;
}
- (NSString*) dinner {
  return result.dinner;
}
- (Dining_Builder*) setDinner:(NSString*) value {
  result.hasDinner = YES;
  result.dinner = value;
  return self;
}
- (Dining_Builder*) clearDinner {
  result.hasDinner = NO;
  result.dinner = @"";
  return self;
}
@end

@interface Flight ()
@property (retain) NSString* number;
@property (retain) NSString* company;
@property (retain) NSString* mode;
@property int32_t departCityId;
@property (retain) NSString* departTime;
@property (retain) NSString* departAirport;
@property int32_t arriveCityId;
@property (retain) NSString* arriveTime;
@property (retain) NSString* arriveAirport;
@end

@implementation Flight

- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) value {
  hasNumber_ = !!value;
}
@synthesize number;
- (BOOL) hasCompany {
  return !!hasCompany_;
}
- (void) setHasCompany:(BOOL) value {
  hasCompany_ = !!value;
}
@synthesize company;
- (BOOL) hasMode {
  return !!hasMode_;
}
- (void) setHasMode:(BOOL) value {
  hasMode_ = !!value;
}
@synthesize mode;
- (BOOL) hasDepartCityId {
  return !!hasDepartCityId_;
}
- (void) setHasDepartCityId:(BOOL) value {
  hasDepartCityId_ = !!value;
}
@synthesize departCityId;
- (BOOL) hasDepartTime {
  return !!hasDepartTime_;
}
- (void) setHasDepartTime:(BOOL) value {
  hasDepartTime_ = !!value;
}
@synthesize departTime;
- (BOOL) hasDepartAirport {
  return !!hasDepartAirport_;
}
- (void) setHasDepartAirport:(BOOL) value {
  hasDepartAirport_ = !!value;
}
@synthesize departAirport;
- (BOOL) hasArriveCityId {
  return !!hasArriveCityId_;
}
- (void) setHasArriveCityId:(BOOL) value {
  hasArriveCityId_ = !!value;
}
@synthesize arriveCityId;
- (BOOL) hasArriveTime {
  return !!hasArriveTime_;
}
- (void) setHasArriveTime:(BOOL) value {
  hasArriveTime_ = !!value;
}
@synthesize arriveTime;
- (BOOL) hasArriveAirport {
  return !!hasArriveAirport_;
}
- (void) setHasArriveAirport:(BOOL) value {
  hasArriveAirport_ = !!value;
}
@synthesize arriveAirport;
- (void) dealloc {
  self.number = nil;
  self.company = nil;
  self.mode = nil;
  self.departTime = nil;
  self.departAirport = nil;
  self.arriveTime = nil;
  self.arriveAirport = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.number = @"";
    self.company = @"";
    self.mode = @"";
    self.departCityId = 0;
    self.departTime = @"";
    self.departAirport = @"";
    self.arriveCityId = 0;
    self.arriveTime = @"";
    self.arriveAirport = @"";
  }
  return self;
}
static Flight* defaultFlightInstance = nil;
+ (void) initialize {
  if (self == [Flight class]) {
    defaultFlightInstance = [[Flight alloc] init];
  }
}
+ (Flight*) defaultInstance {
  return defaultFlightInstance;
}
- (Flight*) defaultInstance {
  return defaultFlightInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNumber) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNumber) {
    [output writeString:1 value:self.number];
  }
  if (self.hasCompany) {
    [output writeString:2 value:self.company];
  }
  if (self.hasMode) {
    [output writeString:3 value:self.mode];
  }
  if (self.hasDepartCityId) {
    [output writeInt32:4 value:self.departCityId];
  }
  if (self.hasDepartTime) {
    [output writeString:5 value:self.departTime];
  }
  if (self.hasDepartAirport) {
    [output writeString:6 value:self.departAirport];
  }
  if (self.hasArriveCityId) {
    [output writeInt32:7 value:self.arriveCityId];
  }
  if (self.hasArriveTime) {
    [output writeString:8 value:self.arriveTime];
  }
  if (self.hasArriveAirport) {
    [output writeString:9 value:self.arriveAirport];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasNumber) {
    size += computeStringSize(1, self.number);
  }
  if (self.hasCompany) {
    size += computeStringSize(2, self.company);
  }
  if (self.hasMode) {
    size += computeStringSize(3, self.mode);
  }
  if (self.hasDepartCityId) {
    size += computeInt32Size(4, self.departCityId);
  }
  if (self.hasDepartTime) {
    size += computeStringSize(5, self.departTime);
  }
  if (self.hasDepartAirport) {
    size += computeStringSize(6, self.departAirport);
  }
  if (self.hasArriveCityId) {
    size += computeInt32Size(7, self.arriveCityId);
  }
  if (self.hasArriveTime) {
    size += computeStringSize(8, self.arriveTime);
  }
  if (self.hasArriveAirport) {
    size += computeStringSize(9, self.arriveAirport);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Flight*) parseFromData:(NSData*) data {
  return (Flight*)[[[Flight builder] mergeFromData:data] build];
}
+ (Flight*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Flight*)[[[Flight builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Flight*) parseFromInputStream:(NSInputStream*) input {
  return (Flight*)[[[Flight builder] mergeFromInputStream:input] build];
}
+ (Flight*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Flight*)[[[Flight builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Flight*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Flight*)[[[Flight builder] mergeFromCodedInputStream:input] build];
}
+ (Flight*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Flight*)[[[Flight builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Flight_Builder*) builder {
  return [[[Flight_Builder alloc] init] autorelease];
}
+ (Flight_Builder*) builderWithPrototype:(Flight*) prototype {
  return [[Flight builder] mergeFrom:prototype];
}
- (Flight_Builder*) builder {
  return [Flight builder];
}
@end

@interface Flight_Builder()
@property (retain) Flight* result;
@end

@implementation Flight_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Flight alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Flight_Builder*) clear {
  self.result = [[[Flight alloc] init] autorelease];
  return self;
}
- (Flight_Builder*) clone {
  return [Flight builderWithPrototype:result];
}
- (Flight*) defaultInstance {
  return [Flight defaultInstance];
}
- (Flight*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Flight*) buildPartial {
  Flight* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Flight_Builder*) mergeFrom:(Flight*) other {
  if (other == [Flight defaultInstance]) {
    return self;
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasCompany) {
    [self setCompany:other.company];
  }
  if (other.hasMode) {
    [self setMode:other.mode];
  }
  if (other.hasDepartCityId) {
    [self setDepartCityId:other.departCityId];
  }
  if (other.hasDepartTime) {
    [self setDepartTime:other.departTime];
  }
  if (other.hasDepartAirport) {
    [self setDepartAirport:other.departAirport];
  }
  if (other.hasArriveCityId) {
    [self setArriveCityId:other.arriveCityId];
  }
  if (other.hasArriveTime) {
    [self setArriveTime:other.arriveTime];
  }
  if (other.hasArriveAirport) {
    [self setArriveAirport:other.arriveAirport];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Flight_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Flight_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNumber:[input readString]];
        break;
      }
      case 18: {
        [self setCompany:[input readString]];
        break;
      }
      case 26: {
        [self setMode:[input readString]];
        break;
      }
      case 32: {
        [self setDepartCityId:[input readInt32]];
        break;
      }
      case 42: {
        [self setDepartTime:[input readString]];
        break;
      }
      case 50: {
        [self setDepartAirport:[input readString]];
        break;
      }
      case 56: {
        [self setArriveCityId:[input readInt32]];
        break;
      }
      case 66: {
        [self setArriveTime:[input readString]];
        break;
      }
      case 74: {
        [self setArriveAirport:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasNumber {
  return result.hasNumber;
}
- (NSString*) number {
  return result.number;
}
- (Flight_Builder*) setNumber:(NSString*) value {
  result.hasNumber = YES;
  result.number = value;
  return self;
}
- (Flight_Builder*) clearNumber {
  result.hasNumber = NO;
  result.number = @"";
  return self;
}
- (BOOL) hasCompany {
  return result.hasCompany;
}
- (NSString*) company {
  return result.company;
}
- (Flight_Builder*) setCompany:(NSString*) value {
  result.hasCompany = YES;
  result.company = value;
  return self;
}
- (Flight_Builder*) clearCompany {
  result.hasCompany = NO;
  result.company = @"";
  return self;
}
- (BOOL) hasMode {
  return result.hasMode;
}
- (NSString*) mode {
  return result.mode;
}
- (Flight_Builder*) setMode:(NSString*) value {
  result.hasMode = YES;
  result.mode = value;
  return self;
}
- (Flight_Builder*) clearMode {
  result.hasMode = NO;
  result.mode = @"";
  return self;
}
- (BOOL) hasDepartCityId {
  return result.hasDepartCityId;
}
- (int32_t) departCityId {
  return result.departCityId;
}
- (Flight_Builder*) setDepartCityId:(int32_t) value {
  result.hasDepartCityId = YES;
  result.departCityId = value;
  return self;
}
- (Flight_Builder*) clearDepartCityId {
  result.hasDepartCityId = NO;
  result.departCityId = 0;
  return self;
}
- (BOOL) hasDepartTime {
  return result.hasDepartTime;
}
- (NSString*) departTime {
  return result.departTime;
}
- (Flight_Builder*) setDepartTime:(NSString*) value {
  result.hasDepartTime = YES;
  result.departTime = value;
  return self;
}
- (Flight_Builder*) clearDepartTime {
  result.hasDepartTime = NO;
  result.departTime = @"";
  return self;
}
- (BOOL) hasDepartAirport {
  return result.hasDepartAirport;
}
- (NSString*) departAirport {
  return result.departAirport;
}
- (Flight_Builder*) setDepartAirport:(NSString*) value {
  result.hasDepartAirport = YES;
  result.departAirport = value;
  return self;
}
- (Flight_Builder*) clearDepartAirport {
  result.hasDepartAirport = NO;
  result.departAirport = @"";
  return self;
}
- (BOOL) hasArriveCityId {
  return result.hasArriveCityId;
}
- (int32_t) arriveCityId {
  return result.arriveCityId;
}
- (Flight_Builder*) setArriveCityId:(int32_t) value {
  result.hasArriveCityId = YES;
  result.arriveCityId = value;
  return self;
}
- (Flight_Builder*) clearArriveCityId {
  result.hasArriveCityId = NO;
  result.arriveCityId = 0;
  return self;
}
- (BOOL) hasArriveTime {
  return result.hasArriveTime;
}
- (NSString*) arriveTime {
  return result.arriveTime;
}
- (Flight_Builder*) setArriveTime:(NSString*) value {
  result.hasArriveTime = YES;
  result.arriveTime = value;
  return self;
}
- (Flight_Builder*) clearArriveTime {
  result.hasArriveTime = NO;
  result.arriveTime = @"";
  return self;
}
- (BOOL) hasArriveAirport {
  return result.hasArriveAirport;
}
- (NSString*) arriveAirport {
  return result.arriveAirport;
}
- (Flight_Builder*) setArriveAirport:(NSString*) value {
  result.hasArriveAirport = YES;
  result.arriveAirport = value;
  return self;
}
- (Flight_Builder*) clearArriveAirport {
  result.hasArriveAirport = NO;
  result.arriveAirport = @"";
  return self;
}
@end

@interface Accommodation ()
@property (retain) NSString* hotelName;
@property (retain) NSString* roomType;
@property (retain) NSString* duration;
@end

@implementation Accommodation

- (BOOL) hasHotelName {
  return !!hasHotelName_;
}
- (void) setHasHotelName:(BOOL) value {
  hasHotelName_ = !!value;
}
@synthesize hotelName;
- (BOOL) hasRoomType {
  return !!hasRoomType_;
}
- (void) setHasRoomType:(BOOL) value {
  hasRoomType_ = !!value;
}
@synthesize roomType;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value {
  hasDuration_ = !!value;
}
@synthesize duration;
- (void) dealloc {
  self.hotelName = nil;
  self.roomType = nil;
  self.duration = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.hotelName = @"";
    self.roomType = @"";
    self.duration = @"";
  }
  return self;
}
static Accommodation* defaultAccommodationInstance = nil;
+ (void) initialize {
  if (self == [Accommodation class]) {
    defaultAccommodationInstance = [[Accommodation alloc] init];
  }
}
+ (Accommodation*) defaultInstance {
  return defaultAccommodationInstance;
}
- (Accommodation*) defaultInstance {
  return defaultAccommodationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasHotelName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHotelName) {
    [output writeString:1 value:self.hotelName];
  }
  if (self.hasRoomType) {
    [output writeString:2 value:self.roomType];
  }
  if (self.hasDuration) {
    [output writeString:3 value:self.duration];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasHotelName) {
    size += computeStringSize(1, self.hotelName);
  }
  if (self.hasRoomType) {
    size += computeStringSize(2, self.roomType);
  }
  if (self.hasDuration) {
    size += computeStringSize(3, self.duration);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Accommodation*) parseFromData:(NSData*) data {
  return (Accommodation*)[[[Accommodation builder] mergeFromData:data] build];
}
+ (Accommodation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Accommodation*)[[[Accommodation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Accommodation*) parseFromInputStream:(NSInputStream*) input {
  return (Accommodation*)[[[Accommodation builder] mergeFromInputStream:input] build];
}
+ (Accommodation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Accommodation*)[[[Accommodation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Accommodation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Accommodation*)[[[Accommodation builder] mergeFromCodedInputStream:input] build];
}
+ (Accommodation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Accommodation*)[[[Accommodation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Accommodation_Builder*) builder {
  return [[[Accommodation_Builder alloc] init] autorelease];
}
+ (Accommodation_Builder*) builderWithPrototype:(Accommodation*) prototype {
  return [[Accommodation builder] mergeFrom:prototype];
}
- (Accommodation_Builder*) builder {
  return [Accommodation builder];
}
@end

@interface Accommodation_Builder()
@property (retain) Accommodation* result;
@end

@implementation Accommodation_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Accommodation alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Accommodation_Builder*) clear {
  self.result = [[[Accommodation alloc] init] autorelease];
  return self;
}
- (Accommodation_Builder*) clone {
  return [Accommodation builderWithPrototype:result];
}
- (Accommodation*) defaultInstance {
  return [Accommodation defaultInstance];
}
- (Accommodation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Accommodation*) buildPartial {
  Accommodation* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Accommodation_Builder*) mergeFrom:(Accommodation*) other {
  if (other == [Accommodation defaultInstance]) {
    return self;
  }
  if (other.hasHotelName) {
    [self setHotelName:other.hotelName];
  }
  if (other.hasRoomType) {
    [self setRoomType:other.roomType];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Accommodation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Accommodation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setHotelName:[input readString]];
        break;
      }
      case 18: {
        [self setRoomType:[input readString]];
        break;
      }
      case 26: {
        [self setDuration:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasHotelName {
  return result.hasHotelName;
}
- (NSString*) hotelName {
  return result.hotelName;
}
- (Accommodation_Builder*) setHotelName:(NSString*) value {
  result.hasHotelName = YES;
  result.hotelName = value;
  return self;
}
- (Accommodation_Builder*) clearHotelName {
  result.hasHotelName = NO;
  result.hotelName = @"";
  return self;
}
- (BOOL) hasRoomType {
  return result.hasRoomType;
}
- (NSString*) roomType {
  return result.roomType;
}
- (Accommodation_Builder*) setRoomType:(NSString*) value {
  result.hasRoomType = YES;
  result.roomType = value;
  return self;
}
- (Accommodation_Builder*) clearRoomType {
  result.hasRoomType = NO;
  result.roomType = @"";
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (NSString*) duration {
  return result.duration;
}
- (Accommodation_Builder*) setDuration:(NSString*) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (Accommodation_Builder*) clearDuration {
  result.hasDuration = NO;
  result.duration = @"";
  return self;
}
@end

@interface UserInfo ()
@property int32_t userId;
@property (retain) NSString* userName;
@property (retain) NSString* password;
@property (retain) NSString* nickName;
@property int32_t gender;
@property int32_t type;
@property (retain) NSString* fullName;
@property (retain) NSString* telephone;
@property (retain) NSString* email;
@end

@implementation UserInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) value {
  hasUserName_ = !!value;
}
@synthesize userName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
@synthesize gender;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasFullName {
  return !!hasFullName_;
}
- (void) setHasFullName:(BOOL) value {
  hasFullName_ = !!value;
}
@synthesize fullName;
- (BOOL) hasTelephone {
  return !!hasTelephone_;
}
- (void) setHasTelephone:(BOOL) value {
  hasTelephone_ = !!value;
}
@synthesize telephone;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) value {
  hasEmail_ = !!value;
}
@synthesize email;
- (void) dealloc {
  self.userName = nil;
  self.password = nil;
  self.nickName = nil;
  self.fullName = nil;
  self.telephone = nil;
  self.email = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.userName = @"";
    self.password = @"";
    self.nickName = @"";
    self.gender = 0;
    self.type = 0;
    self.fullName = @"";
    self.telephone = @"";
    self.email = @"";
  }
  return self;
}
static UserInfo* defaultUserInfoInstance = nil;
+ (void) initialize {
  if (self == [UserInfo class]) {
    defaultUserInfoInstance = [[UserInfo alloc] init];
  }
}
+ (UserInfo*) defaultInstance {
  return defaultUserInfoInstance;
}
- (UserInfo*) defaultInstance {
  return defaultUserInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasUserName) {
    [output writeString:2 value:self.userName];
  }
  if (self.hasPassword) {
    [output writeString:3 value:self.password];
  }
  if (self.hasNickName) {
    [output writeString:4 value:self.nickName];
  }
  if (self.hasGender) {
    [output writeInt32:5 value:self.gender];
  }
  if (self.hasType) {
    [output writeInt32:6 value:self.type];
  }
  if (self.hasFullName) {
    [output writeString:7 value:self.fullName];
  }
  if (self.hasTelephone) {
    [output writeString:8 value:self.telephone];
  }
  if (self.hasEmail) {
    [output writeString:9 value:self.email];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasUserName) {
    size += computeStringSize(2, self.userName);
  }
  if (self.hasPassword) {
    size += computeStringSize(3, self.password);
  }
  if (self.hasNickName) {
    size += computeStringSize(4, self.nickName);
  }
  if (self.hasGender) {
    size += computeInt32Size(5, self.gender);
  }
  if (self.hasType) {
    size += computeInt32Size(6, self.type);
  }
  if (self.hasFullName) {
    size += computeStringSize(7, self.fullName);
  }
  if (self.hasTelephone) {
    size += computeStringSize(8, self.telephone);
  }
  if (self.hasEmail) {
    size += computeStringSize(9, self.email);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserInfo*) parseFromData:(NSData*) data {
  return (UserInfo*)[[[UserInfo builder] mergeFromData:data] build];
}
+ (UserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserInfo*) parseFromInputStream:(NSInputStream*) input {
  return (UserInfo*)[[[UserInfo builder] mergeFromInputStream:input] build];
}
+ (UserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserInfo*)[[[UserInfo builder] mergeFromCodedInputStream:input] build];
}
+ (UserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserInfo_Builder*) builder {
  return [[[UserInfo_Builder alloc] init] autorelease];
}
+ (UserInfo_Builder*) builderWithPrototype:(UserInfo*) prototype {
  return [[UserInfo builder] mergeFrom:prototype];
}
- (UserInfo_Builder*) builder {
  return [UserInfo builder];
}
@end

@interface UserInfo_Builder()
@property (retain) UserInfo* result;
@end

@implementation UserInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserInfo_Builder*) clear {
  self.result = [[[UserInfo alloc] init] autorelease];
  return self;
}
- (UserInfo_Builder*) clone {
  return [UserInfo builderWithPrototype:result];
}
- (UserInfo*) defaultInstance {
  return [UserInfo defaultInstance];
}
- (UserInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserInfo*) buildPartial {
  UserInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserInfo_Builder*) mergeFrom:(UserInfo*) other {
  if (other == [UserInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasFullName) {
    [self setFullName:other.fullName];
  }
  if (other.hasTelephone) {
    [self setTelephone:other.telephone];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserName:[input readString]];
        break;
      }
      case 26: {
        [self setPassword:[input readString]];
        break;
      }
      case 34: {
        [self setNickName:[input readString]];
        break;
      }
      case 40: {
        [self setGender:[input readInt32]];
        break;
      }
      case 48: {
        [self setType:[input readInt32]];
        break;
      }
      case 58: {
        [self setFullName:[input readString]];
        break;
      }
      case 66: {
        [self setTelephone:[input readString]];
        break;
      }
      case 74: {
        [self setEmail:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserInfo_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserInfo_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasUserName {
  return result.hasUserName;
}
- (NSString*) userName {
  return result.userName;
}
- (UserInfo_Builder*) setUserName:(NSString*) value {
  result.hasUserName = YES;
  result.userName = value;
  return self;
}
- (UserInfo_Builder*) clearUserName {
  result.hasUserName = NO;
  result.userName = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (UserInfo_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (UserInfo_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (UserInfo_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (UserInfo_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (int32_t) gender {
  return result.gender;
}
- (UserInfo_Builder*) setGender:(int32_t) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (UserInfo_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (UserInfo_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (UserInfo_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasFullName {
  return result.hasFullName;
}
- (NSString*) fullName {
  return result.fullName;
}
- (UserInfo_Builder*) setFullName:(NSString*) value {
  result.hasFullName = YES;
  result.fullName = value;
  return self;
}
- (UserInfo_Builder*) clearFullName {
  result.hasFullName = NO;
  result.fullName = @"";
  return self;
}
- (BOOL) hasTelephone {
  return result.hasTelephone;
}
- (NSString*) telephone {
  return result.telephone;
}
- (UserInfo_Builder*) setTelephone:(NSString*) value {
  result.hasTelephone = YES;
  result.telephone = value;
  return self;
}
- (UserInfo_Builder*) clearTelephone {
  result.hasTelephone = NO;
  result.telephone = @"";
  return self;
}
- (BOOL) hasEmail {
  return result.hasEmail;
}
- (NSString*) email {
  return result.email;
}
- (UserInfo_Builder*) setEmail:(NSString*) value {
  result.hasEmail = YES;
  result.email = value;
  return self;
}
- (UserInfo_Builder*) clearEmail {
  result.hasEmail = NO;
  result.email = @"";
  return self;
}
@end

@interface Order ()
@property int32_t orderId;
@property int32_t routeId;
@property int32_t date;
@property int32_t userId;
@property (retain) NSString* routeName;
@property (retain) NSString* setOutCity;
@property (retain) NSString* setOutDate;
@property (retain) NSString* price;
@property int32_t priceStatus;
@property int32_t status;
@end

@implementation Order

- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) value {
  hasOrderId_ = !!value;
}
@synthesize orderId;
- (BOOL) hasRouteId {
  return !!hasRouteId_;
}
- (void) setHasRouteId:(BOOL) value {
  hasRouteId_ = !!value;
}
@synthesize routeId;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasRouteName {
  return !!hasRouteName_;
}
- (void) setHasRouteName:(BOOL) value {
  hasRouteName_ = !!value;
}
@synthesize routeName;
- (BOOL) hasSetOutCity {
  return !!hasSetOutCity_;
}
- (void) setHasSetOutCity:(BOOL) value {
  hasSetOutCity_ = !!value;
}
@synthesize setOutCity;
- (BOOL) hasSetOutDate {
  return !!hasSetOutDate_;
}
- (void) setHasSetOutDate:(BOOL) value {
  hasSetOutDate_ = !!value;
}
@synthesize setOutDate;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasPriceStatus {
  return !!hasPriceStatus_;
}
- (void) setHasPriceStatus:(BOOL) value {
  hasPriceStatus_ = !!value;
}
@synthesize priceStatus;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (void) dealloc {
  self.routeName = nil;
  self.setOutCity = nil;
  self.setOutDate = nil;
  self.price = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.orderId = 0;
    self.routeId = 0;
    self.date = 0;
    self.userId = 0;
    self.routeName = @"";
    self.setOutCity = @"";
    self.setOutDate = @"";
    self.price = @"";
    self.priceStatus = 0;
    self.status = 0;
  }
  return self;
}
static Order* defaultOrderInstance = nil;
+ (void) initialize {
  if (self == [Order class]) {
    defaultOrderInstance = [[Order alloc] init];
  }
}
+ (Order*) defaultInstance {
  return defaultOrderInstance;
}
- (Order*) defaultInstance {
  return defaultOrderInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOrderId) {
    return NO;
  }
  if (!self.hasRouteId) {
    return NO;
  }
  if (!self.hasDate) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeInt32:1 value:self.orderId];
  }
  if (self.hasRouteId) {
    [output writeInt32:2 value:self.routeId];
  }
  if (self.hasDate) {
    [output writeInt32:3 value:self.date];
  }
  if (self.hasUserId) {
    [output writeInt32:4 value:self.userId];
  }
  if (self.hasRouteName) {
    [output writeString:5 value:self.routeName];
  }
  if (self.hasSetOutCity) {
    [output writeString:6 value:self.setOutCity];
  }
  if (self.hasSetOutDate) {
    [output writeString:7 value:self.setOutDate];
  }
  if (self.hasPrice) {
    [output writeString:8 value:self.price];
  }
  if (self.hasPriceStatus) {
    [output writeInt32:9 value:self.priceStatus];
  }
  if (self.hasStatus) {
    [output writeInt32:10 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasOrderId) {
    size += computeInt32Size(1, self.orderId);
  }
  if (self.hasRouteId) {
    size += computeInt32Size(2, self.routeId);
  }
  if (self.hasDate) {
    size += computeInt32Size(3, self.date);
  }
  if (self.hasUserId) {
    size += computeInt32Size(4, self.userId);
  }
  if (self.hasRouteName) {
    size += computeStringSize(5, self.routeName);
  }
  if (self.hasSetOutCity) {
    size += computeStringSize(6, self.setOutCity);
  }
  if (self.hasSetOutDate) {
    size += computeStringSize(7, self.setOutDate);
  }
  if (self.hasPrice) {
    size += computeStringSize(8, self.price);
  }
  if (self.hasPriceStatus) {
    size += computeInt32Size(9, self.priceStatus);
  }
  if (self.hasStatus) {
    size += computeInt32Size(10, self.status);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Order*) parseFromData:(NSData*) data {
  return (Order*)[[[Order builder] mergeFromData:data] build];
}
+ (Order*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Order*)[[[Order builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Order*) parseFromInputStream:(NSInputStream*) input {
  return (Order*)[[[Order builder] mergeFromInputStream:input] build];
}
+ (Order*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Order*)[[[Order builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Order*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Order*)[[[Order builder] mergeFromCodedInputStream:input] build];
}
+ (Order*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Order*)[[[Order builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Order_Builder*) builder {
  return [[[Order_Builder alloc] init] autorelease];
}
+ (Order_Builder*) builderWithPrototype:(Order*) prototype {
  return [[Order builder] mergeFrom:prototype];
}
- (Order_Builder*) builder {
  return [Order builder];
}
@end

@interface Order_Builder()
@property (retain) Order* result;
@end

@implementation Order_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Order alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Order_Builder*) clear {
  self.result = [[[Order alloc] init] autorelease];
  return self;
}
- (Order_Builder*) clone {
  return [Order builderWithPrototype:result];
}
- (Order*) defaultInstance {
  return [Order defaultInstance];
}
- (Order*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Order*) buildPartial {
  Order* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Order_Builder*) mergeFrom:(Order*) other {
  if (other == [Order defaultInstance]) {
    return self;
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  if (other.hasRouteId) {
    [self setRouteId:other.routeId];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasRouteName) {
    [self setRouteName:other.routeName];
  }
  if (other.hasSetOutCity) {
    [self setSetOutCity:other.setOutCity];
  }
  if (other.hasSetOutDate) {
    [self setSetOutDate:other.setOutDate];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasPriceStatus) {
    [self setPriceStatus:other.priceStatus];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Order_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Order_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOrderId:[input readInt32]];
        break;
      }
      case 16: {
        [self setRouteId:[input readInt32]];
        break;
      }
      case 24: {
        [self setDate:[input readInt32]];
        break;
      }
      case 32: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 42: {
        [self setRouteName:[input readString]];
        break;
      }
      case 50: {
        [self setSetOutCity:[input readString]];
        break;
      }
      case 58: {
        [self setSetOutDate:[input readString]];
        break;
      }
      case 66: {
        [self setPrice:[input readString]];
        break;
      }
      case 72: {
        [self setPriceStatus:[input readInt32]];
        break;
      }
      case 80: {
        [self setStatus:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOrderId {
  return result.hasOrderId;
}
- (int32_t) orderId {
  return result.orderId;
}
- (Order_Builder*) setOrderId:(int32_t) value {
  result.hasOrderId = YES;
  result.orderId = value;
  return self;
}
- (Order_Builder*) clearOrderId {
  result.hasOrderId = NO;
  result.orderId = 0;
  return self;
}
- (BOOL) hasRouteId {
  return result.hasRouteId;
}
- (int32_t) routeId {
  return result.routeId;
}
- (Order_Builder*) setRouteId:(int32_t) value {
  result.hasRouteId = YES;
  result.routeId = value;
  return self;
}
- (Order_Builder*) clearRouteId {
  result.hasRouteId = NO;
  result.routeId = 0;
  return self;
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (Order_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (Order_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (Order_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (Order_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasRouteName {
  return result.hasRouteName;
}
- (NSString*) routeName {
  return result.routeName;
}
- (Order_Builder*) setRouteName:(NSString*) value {
  result.hasRouteName = YES;
  result.routeName = value;
  return self;
}
- (Order_Builder*) clearRouteName {
  result.hasRouteName = NO;
  result.routeName = @"";
  return self;
}
- (BOOL) hasSetOutCity {
  return result.hasSetOutCity;
}
- (NSString*) setOutCity {
  return result.setOutCity;
}
- (Order_Builder*) setSetOutCity:(NSString*) value {
  result.hasSetOutCity = YES;
  result.setOutCity = value;
  return self;
}
- (Order_Builder*) clearSetOutCity {
  result.hasSetOutCity = NO;
  result.setOutCity = @"";
  return self;
}
- (BOOL) hasSetOutDate {
  return result.hasSetOutDate;
}
- (NSString*) setOutDate {
  return result.setOutDate;
}
- (Order_Builder*) setSetOutDate:(NSString*) value {
  result.hasSetOutDate = YES;
  result.setOutDate = value;
  return self;
}
- (Order_Builder*) clearSetOutDate {
  result.hasSetOutDate = NO;
  result.setOutDate = @"";
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (NSString*) price {
  return result.price;
}
- (Order_Builder*) setPrice:(NSString*) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (Order_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = @"";
  return self;
}
- (BOOL) hasPriceStatus {
  return result.hasPriceStatus;
}
- (int32_t) priceStatus {
  return result.priceStatus;
}
- (Order_Builder*) setPriceStatus:(int32_t) value {
  result.hasPriceStatus = YES;
  result.priceStatus = value;
  return self;
}
- (Order_Builder*) clearPriceStatus {
  result.hasPriceStatus = NO;
  result.priceStatus = 0;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (Order_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (Order_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
@end

