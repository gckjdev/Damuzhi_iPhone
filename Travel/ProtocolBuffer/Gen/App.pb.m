// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "App.pb.h"

@implementation AppRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [AppRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PlaceCategoryTypeIsValidValue(PlaceCategoryType value) {
  switch (value) {
    case PlaceCategoryTypePlaceSpot:
    case PlaceCategoryTypePlaceHotel:
    case PlaceCategoryTypePlaceRestraurant:
    case PlaceCategoryTypePlaceShopping:
    case PlaceCategoryTypePlaceEntertainment:
      return YES;
    default:
      return NO;
  }
}
@interface NameIdPair ()
@property (retain) NSString* name;
@property int32_t id;
@property (retain) NSString* image;
@end

@implementation NameIdPair

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) value {
  hasImage_ = !!value;
}
@synthesize image;
- (void) dealloc {
  self.name = nil;
  self.image = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.id = 0;
    self.image = @"";
  }
  return self;
}
static NameIdPair* defaultNameIdPairInstance = nil;
+ (void) initialize {
  if (self == [NameIdPair class]) {
    defaultNameIdPairInstance = [[NameIdPair alloc] init];
  }
}
+ (NameIdPair*) defaultInstance {
  return defaultNameIdPairInstance;
}
- (NameIdPair*) defaultInstance {
  return defaultNameIdPairInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasId) {
    [output writeInt32:2 value:self.id];
  }
  if (self.hasImage) {
    [output writeString:3 value:self.image];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasId) {
    size += computeInt32Size(2, self.id);
  }
  if (self.hasImage) {
    size += computeStringSize(3, self.image);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (NameIdPair*) parseFromData:(NSData*) data {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromData:data] build];
}
+ (NameIdPair*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NameIdPair*) parseFromInputStream:(NSInputStream*) input {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromInputStream:input] build];
}
+ (NameIdPair*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NameIdPair*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromCodedInputStream:input] build];
}
+ (NameIdPair*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NameIdPair_Builder*) builder {
  return [[[NameIdPair_Builder alloc] init] autorelease];
}
+ (NameIdPair_Builder*) builderWithPrototype:(NameIdPair*) prototype {
  return [[NameIdPair builder] mergeFrom:prototype];
}
- (NameIdPair_Builder*) builder {
  return [NameIdPair builder];
}
@end

@interface NameIdPair_Builder()
@property (retain) NameIdPair* result;
@end

@implementation NameIdPair_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[NameIdPair alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (NameIdPair_Builder*) clear {
  self.result = [[[NameIdPair alloc] init] autorelease];
  return self;
}
- (NameIdPair_Builder*) clone {
  return [NameIdPair builderWithPrototype:result];
}
- (NameIdPair*) defaultInstance {
  return [NameIdPair defaultInstance];
}
- (NameIdPair*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NameIdPair*) buildPartial {
  NameIdPair* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (NameIdPair_Builder*) mergeFrom:(NameIdPair*) other {
  if (other == [NameIdPair defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NameIdPair_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NameIdPair_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setId:[input readInt32]];
        break;
      }
      case 26: {
        [self setImage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (NameIdPair_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (NameIdPair_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (NameIdPair_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (NameIdPair_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasImage {
  return result.hasImage;
}
- (NSString*) image {
  return result.image;
}
- (NameIdPair_Builder*) setImage:(NSString*) value {
  result.hasImage = YES;
  result.image = value;
  return self;
}
- (NameIdPair_Builder*) clearImage {
  result.hasImage = NO;
  result.image = @"";
  return self;
}
@end

@interface PlaceMeta ()
@property PlaceCategoryType categoryId;
@property (retain) NSString* name;
@property (retain) NSMutableArray* mutableSubCategoryListList;
@property (retain) NSMutableArray* mutableProvidedServiceListList;
@end

@implementation PlaceMeta

- (BOOL) hasCategoryId {
  return !!hasCategoryId_;
}
- (void) setHasCategoryId:(BOOL) value {
  hasCategoryId_ = !!value;
}
@synthesize categoryId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
@synthesize mutableSubCategoryListList;
@synthesize mutableProvidedServiceListList;
- (void) dealloc {
  self.name = nil;
  self.mutableSubCategoryListList = nil;
  self.mutableProvidedServiceListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.categoryId = PlaceCategoryTypePlaceSpot;
    self.name = @"";
  }
  return self;
}
static PlaceMeta* defaultPlaceMetaInstance = nil;
+ (void) initialize {
  if (self == [PlaceMeta class]) {
    defaultPlaceMetaInstance = [[PlaceMeta alloc] init];
  }
}
+ (PlaceMeta*) defaultInstance {
  return defaultPlaceMetaInstance;
}
- (PlaceMeta*) defaultInstance {
  return defaultPlaceMetaInstance;
}
- (NSArray*) subCategoryListList {
  return mutableSubCategoryListList;
}
- (NameIdPair*) subCategoryListAtIndex:(int32_t) index {
  id value = [mutableSubCategoryListList objectAtIndex:index];
  return value;
}
- (NSArray*) providedServiceListList {
  return mutableProvidedServiceListList;
}
- (NameIdPair*) providedServiceListAtIndex:(int32_t) index {
  id value = [mutableProvidedServiceListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasCategoryId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  for (NameIdPair* element in self.subCategoryListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (NameIdPair* element in self.providedServiceListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategoryId) {
    [output writeEnum:1 value:self.categoryId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  for (NameIdPair* element in self.subCategoryListList) {
    [output writeMessage:3 value:element];
  }
  for (NameIdPair* element in self.providedServiceListList) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCategoryId) {
    size += computeEnumSize(1, self.categoryId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  for (NameIdPair* element in self.subCategoryListList) {
    size += computeMessageSize(3, element);
  }
  for (NameIdPair* element in self.providedServiceListList) {
    size += computeMessageSize(4, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PlaceMeta*) parseFromData:(NSData*) data {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromData:data] build];
}
+ (PlaceMeta*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PlaceMeta*) parseFromInputStream:(NSInputStream*) input {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromInputStream:input] build];
}
+ (PlaceMeta*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaceMeta*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromCodedInputStream:input] build];
}
+ (PlaceMeta*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaceMeta_Builder*) builder {
  return [[[PlaceMeta_Builder alloc] init] autorelease];
}
+ (PlaceMeta_Builder*) builderWithPrototype:(PlaceMeta*) prototype {
  return [[PlaceMeta builder] mergeFrom:prototype];
}
- (PlaceMeta_Builder*) builder {
  return [PlaceMeta builder];
}
@end

@interface PlaceMeta_Builder()
@property (retain) PlaceMeta* result;
@end

@implementation PlaceMeta_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PlaceMeta alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PlaceMeta_Builder*) clear {
  self.result = [[[PlaceMeta alloc] init] autorelease];
  return self;
}
- (PlaceMeta_Builder*) clone {
  return [PlaceMeta builderWithPrototype:result];
}
- (PlaceMeta*) defaultInstance {
  return [PlaceMeta defaultInstance];
}
- (PlaceMeta*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PlaceMeta*) buildPartial {
  PlaceMeta* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PlaceMeta_Builder*) mergeFrom:(PlaceMeta*) other {
  if (other == [PlaceMeta defaultInstance]) {
    return self;
  }
  if (other.hasCategoryId) {
    [self setCategoryId:other.categoryId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.mutableSubCategoryListList.count > 0) {
    if (result.mutableSubCategoryListList == nil) {
      result.mutableSubCategoryListList = [NSMutableArray array];
    }
    [result.mutableSubCategoryListList addObjectsFromArray:other.mutableSubCategoryListList];
  }
  if (other.mutableProvidedServiceListList.count > 0) {
    if (result.mutableProvidedServiceListList == nil) {
      result.mutableProvidedServiceListList = [NSMutableArray array];
    }
    [result.mutableProvidedServiceListList addObjectsFromArray:other.mutableProvidedServiceListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PlaceMeta_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PlaceMeta_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (PlaceCategoryTypeIsValidValue(value)) {
          [self setCategoryId:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSubCategoryList:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProvidedServiceList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCategoryId {
  return result.hasCategoryId;
}
- (PlaceCategoryType) categoryId {
  return result.categoryId;
}
- (PlaceMeta_Builder*) setCategoryId:(PlaceCategoryType) value {
  result.hasCategoryId = YES;
  result.categoryId = value;
  return self;
}
- (PlaceMeta_Builder*) clearCategoryId {
  result.hasCategoryId = NO;
  result.categoryId = PlaceCategoryTypePlaceSpot;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PlaceMeta_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PlaceMeta_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (NSArray*) subCategoryListList {
  if (result.mutableSubCategoryListList == nil) { return [NSArray array]; }
  return result.mutableSubCategoryListList;
}
- (NameIdPair*) subCategoryListAtIndex:(int32_t) index {
  return [result subCategoryListAtIndex:index];
}
- (PlaceMeta_Builder*) replaceSubCategoryListAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableSubCategoryListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PlaceMeta_Builder*) addAllSubCategoryList:(NSArray*) values {
  if (result.mutableSubCategoryListList == nil) {
    result.mutableSubCategoryListList = [NSMutableArray array];
  }
  [result.mutableSubCategoryListList addObjectsFromArray:values];
  return self;
}
- (PlaceMeta_Builder*) clearSubCategoryListList {
  result.mutableSubCategoryListList = nil;
  return self;
}
- (PlaceMeta_Builder*) addSubCategoryList:(NameIdPair*) value {
  if (result.mutableSubCategoryListList == nil) {
    result.mutableSubCategoryListList = [NSMutableArray array];
  }
  [result.mutableSubCategoryListList addObject:value];
  return self;
}
- (NSArray*) providedServiceListList {
  if (result.mutableProvidedServiceListList == nil) { return [NSArray array]; }
  return result.mutableProvidedServiceListList;
}
- (NameIdPair*) providedServiceListAtIndex:(int32_t) index {
  return [result providedServiceListAtIndex:index];
}
- (PlaceMeta_Builder*) replaceProvidedServiceListAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableProvidedServiceListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PlaceMeta_Builder*) addAllProvidedServiceList:(NSArray*) values {
  if (result.mutableProvidedServiceListList == nil) {
    result.mutableProvidedServiceListList = [NSMutableArray array];
  }
  [result.mutableProvidedServiceListList addObjectsFromArray:values];
  return self;
}
- (PlaceMeta_Builder*) clearProvidedServiceListList {
  result.mutableProvidedServiceListList = nil;
  return self;
}
- (PlaceMeta_Builder*) addProvidedServiceList:(NameIdPair*) value {
  if (result.mutableProvidedServiceListList == nil) {
    result.mutableProvidedServiceListList = [NSMutableArray array];
  }
  [result.mutableProvidedServiceListList addObject:value];
  return self;
}
@end

@interface CityArea ()
@property int32_t areaId;
@property (retain) NSString* areaName;
@end

@implementation CityArea

- (BOOL) hasAreaId {
  return !!hasAreaId_;
}
- (void) setHasAreaId:(BOOL) value {
  hasAreaId_ = !!value;
}
@synthesize areaId;
- (BOOL) hasAreaName {
  return !!hasAreaName_;
}
- (void) setHasAreaName:(BOOL) value {
  hasAreaName_ = !!value;
}
@synthesize areaName;
- (void) dealloc {
  self.areaName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.areaId = 0;
    self.areaName = @"";
  }
  return self;
}
static CityArea* defaultCityAreaInstance = nil;
+ (void) initialize {
  if (self == [CityArea class]) {
    defaultCityAreaInstance = [[CityArea alloc] init];
  }
}
+ (CityArea*) defaultInstance {
  return defaultCityAreaInstance;
}
- (CityArea*) defaultInstance {
  return defaultCityAreaInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAreaId) {
    return NO;
  }
  if (!self.hasAreaName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAreaId) {
    [output writeInt32:1 value:self.areaId];
  }
  if (self.hasAreaName) {
    [output writeString:2 value:self.areaName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAreaId) {
    size += computeInt32Size(1, self.areaId);
  }
  if (self.hasAreaName) {
    size += computeStringSize(2, self.areaName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityArea*) parseFromData:(NSData*) data {
  return (CityArea*)[[[CityArea builder] mergeFromData:data] build];
}
+ (CityArea*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityArea*)[[[CityArea builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityArea*) parseFromInputStream:(NSInputStream*) input {
  return (CityArea*)[[[CityArea builder] mergeFromInputStream:input] build];
}
+ (CityArea*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityArea*)[[[CityArea builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityArea*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityArea*)[[[CityArea builder] mergeFromCodedInputStream:input] build];
}
+ (CityArea*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityArea*)[[[CityArea builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityArea_Builder*) builder {
  return [[[CityArea_Builder alloc] init] autorelease];
}
+ (CityArea_Builder*) builderWithPrototype:(CityArea*) prototype {
  return [[CityArea builder] mergeFrom:prototype];
}
- (CityArea_Builder*) builder {
  return [CityArea builder];
}
@end

@interface CityArea_Builder()
@property (retain) CityArea* result;
@end

@implementation CityArea_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityArea alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityArea_Builder*) clear {
  self.result = [[[CityArea alloc] init] autorelease];
  return self;
}
- (CityArea_Builder*) clone {
  return [CityArea builderWithPrototype:result];
}
- (CityArea*) defaultInstance {
  return [CityArea defaultInstance];
}
- (CityArea*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityArea*) buildPartial {
  CityArea* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityArea_Builder*) mergeFrom:(CityArea*) other {
  if (other == [CityArea defaultInstance]) {
    return self;
  }
  if (other.hasAreaId) {
    [self setAreaId:other.areaId];
  }
  if (other.hasAreaName) {
    [self setAreaName:other.areaName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityArea_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityArea_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAreaId:[input readInt32]];
        break;
      }
      case 18: {
        [self setAreaName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAreaId {
  return result.hasAreaId;
}
- (int32_t) areaId {
  return result.areaId;
}
- (CityArea_Builder*) setAreaId:(int32_t) value {
  result.hasAreaId = YES;
  result.areaId = value;
  return self;
}
- (CityArea_Builder*) clearAreaId {
  result.hasAreaId = NO;
  result.areaId = 0;
  return self;
}
- (BOOL) hasAreaName {
  return result.hasAreaName;
}
- (NSString*) areaName {
  return result.areaName;
}
- (CityArea_Builder*) setAreaName:(NSString*) value {
  result.hasAreaName = YES;
  result.areaName = value;
  return self;
}
- (CityArea_Builder*) clearAreaName {
  result.hasAreaName = NO;
  result.areaName = @"";
  return self;
}
@end

@interface City ()
@property int32_t cityId;
@property (retain) NSString* cityName;
@property (retain) NSString* latestVersion;
@property (retain) NSString* countryName;
@property int32_t dataSize;
@property (retain) NSString* downloadUrl;
@property (retain) NSMutableArray* mutableAreaListList;
@property (retain) NSString* currencySymbol;
@property (retain) NSString* currencyId;
@property (retain) NSString* currencyName;
@property int32_t priceRank;
@end

@implementation City

- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) value {
  hasCityName_ = !!value;
}
@synthesize cityName;
- (BOOL) hasLatestVersion {
  return !!hasLatestVersion_;
}
- (void) setHasLatestVersion:(BOOL) value {
  hasLatestVersion_ = !!value;
}
@synthesize latestVersion;
- (BOOL) hasCountryName {
  return !!hasCountryName_;
}
- (void) setHasCountryName:(BOOL) value {
  hasCountryName_ = !!value;
}
@synthesize countryName;
- (BOOL) hasDataSize {
  return !!hasDataSize_;
}
- (void) setHasDataSize:(BOOL) value {
  hasDataSize_ = !!value;
}
@synthesize dataSize;
- (BOOL) hasDownloadUrl {
  return !!hasDownloadUrl_;
}
- (void) setHasDownloadUrl:(BOOL) value {
  hasDownloadUrl_ = !!value;
}
@synthesize downloadUrl;
@synthesize mutableAreaListList;
- (BOOL) hasCurrencySymbol {
  return !!hasCurrencySymbol_;
}
- (void) setHasCurrencySymbol:(BOOL) value {
  hasCurrencySymbol_ = !!value;
}
@synthesize currencySymbol;
- (BOOL) hasCurrencyId {
  return !!hasCurrencyId_;
}
- (void) setHasCurrencyId:(BOOL) value {
  hasCurrencyId_ = !!value;
}
@synthesize currencyId;
- (BOOL) hasCurrencyName {
  return !!hasCurrencyName_;
}
- (void) setHasCurrencyName:(BOOL) value {
  hasCurrencyName_ = !!value;
}
@synthesize currencyName;
- (BOOL) hasPriceRank {
  return !!hasPriceRank_;
}
- (void) setHasPriceRank:(BOOL) value {
  hasPriceRank_ = !!value;
}
@synthesize priceRank;
- (void) dealloc {
  self.cityName = nil;
  self.latestVersion = nil;
  self.countryName = nil;
  self.downloadUrl = nil;
  self.mutableAreaListList = nil;
  self.currencySymbol = nil;
  self.currencyId = nil;
  self.currencyName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cityId = 0;
    self.cityName = @"";
    self.latestVersion = @"";
    self.countryName = @"";
    self.dataSize = 0;
    self.downloadUrl = @"";
    self.currencySymbol = @"";
    self.currencyId = @"";
    self.currencyName = @"";
    self.priceRank = 3;
  }
  return self;
}
static City* defaultCityInstance = nil;
+ (void) initialize {
  if (self == [City class]) {
    defaultCityInstance = [[City alloc] init];
  }
}
+ (City*) defaultInstance {
  return defaultCityInstance;
}
- (City*) defaultInstance {
  return defaultCityInstance;
}
- (NSArray*) areaListList {
  return mutableAreaListList;
}
- (CityArea*) areaListAtIndex:(int32_t) index {
  id value = [mutableAreaListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasCityId) {
    return NO;
  }
  if (!self.hasCityName) {
    return NO;
  }
  if (!self.hasCurrencySymbol) {
    return NO;
  }
  if (!self.hasCurrencyId) {
    return NO;
  }
  if (!self.hasCurrencyName) {
    return NO;
  }
  for (CityArea* element in self.areaListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCityId) {
    [output writeInt32:1 value:self.cityId];
  }
  if (self.hasCityName) {
    [output writeString:2 value:self.cityName];
  }
  if (self.hasLatestVersion) {
    [output writeString:3 value:self.latestVersion];
  }
  if (self.hasCountryName) {
    [output writeString:4 value:self.countryName];
  }
  if (self.hasDataSize) {
    [output writeInt32:5 value:self.dataSize];
  }
  if (self.hasDownloadUrl) {
    [output writeString:6 value:self.downloadUrl];
  }
  for (CityArea* element in self.areaListList) {
    [output writeMessage:10 value:element];
  }
  if (self.hasCurrencySymbol) {
    [output writeString:11 value:self.currencySymbol];
  }
  if (self.hasCurrencyId) {
    [output writeString:12 value:self.currencyId];
  }
  if (self.hasCurrencyName) {
    [output writeString:13 value:self.currencyName];
  }
  if (self.hasPriceRank) {
    [output writeInt32:20 value:self.priceRank];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCityId) {
    size += computeInt32Size(1, self.cityId);
  }
  if (self.hasCityName) {
    size += computeStringSize(2, self.cityName);
  }
  if (self.hasLatestVersion) {
    size += computeStringSize(3, self.latestVersion);
  }
  if (self.hasCountryName) {
    size += computeStringSize(4, self.countryName);
  }
  if (self.hasDataSize) {
    size += computeInt32Size(5, self.dataSize);
  }
  if (self.hasDownloadUrl) {
    size += computeStringSize(6, self.downloadUrl);
  }
  for (CityArea* element in self.areaListList) {
    size += computeMessageSize(10, element);
  }
  if (self.hasCurrencySymbol) {
    size += computeStringSize(11, self.currencySymbol);
  }
  if (self.hasCurrencyId) {
    size += computeStringSize(12, self.currencyId);
  }
  if (self.hasCurrencyName) {
    size += computeStringSize(13, self.currencyName);
  }
  if (self.hasPriceRank) {
    size += computeInt32Size(20, self.priceRank);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (City*) parseFromData:(NSData*) data {
  return (City*)[[[City builder] mergeFromData:data] build];
}
+ (City*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (City*) parseFromInputStream:(NSInputStream*) input {
  return (City*)[[[City builder] mergeFromInputStream:input] build];
}
+ (City*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (City*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (City*)[[[City builder] mergeFromCodedInputStream:input] build];
}
+ (City*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (City_Builder*) builder {
  return [[[City_Builder alloc] init] autorelease];
}
+ (City_Builder*) builderWithPrototype:(City*) prototype {
  return [[City builder] mergeFrom:prototype];
}
- (City_Builder*) builder {
  return [City builder];
}
@end

@interface City_Builder()
@property (retain) City* result;
@end

@implementation City_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[City alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (City_Builder*) clear {
  self.result = [[[City alloc] init] autorelease];
  return self;
}
- (City_Builder*) clone {
  return [City builderWithPrototype:result];
}
- (City*) defaultInstance {
  return [City defaultInstance];
}
- (City*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (City*) buildPartial {
  City* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (City_Builder*) mergeFrom:(City*) other {
  if (other == [City defaultInstance]) {
    return self;
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  if (other.hasLatestVersion) {
    [self setLatestVersion:other.latestVersion];
  }
  if (other.hasCountryName) {
    [self setCountryName:other.countryName];
  }
  if (other.hasDataSize) {
    [self setDataSize:other.dataSize];
  }
  if (other.hasDownloadUrl) {
    [self setDownloadUrl:other.downloadUrl];
  }
  if (other.mutableAreaListList.count > 0) {
    if (result.mutableAreaListList == nil) {
      result.mutableAreaListList = [NSMutableArray array];
    }
    [result.mutableAreaListList addObjectsFromArray:other.mutableAreaListList];
  }
  if (other.hasCurrencySymbol) {
    [self setCurrencySymbol:other.currencySymbol];
  }
  if (other.hasCurrencyId) {
    [self setCurrencyId:other.currencyId];
  }
  if (other.hasCurrencyName) {
    [self setCurrencyName:other.currencyName];
  }
  if (other.hasPriceRank) {
    [self setPriceRank:other.priceRank];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (City_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (City_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCityName:[input readString]];
        break;
      }
      case 26: {
        [self setLatestVersion:[input readString]];
        break;
      }
      case 34: {
        [self setCountryName:[input readString]];
        break;
      }
      case 40: {
        [self setDataSize:[input readInt32]];
        break;
      }
      case 50: {
        [self setDownloadUrl:[input readString]];
        break;
      }
      case 82: {
        CityArea_Builder* subBuilder = [CityArea builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAreaList:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setCurrencySymbol:[input readString]];
        break;
      }
      case 98: {
        [self setCurrencyId:[input readString]];
        break;
      }
      case 106: {
        [self setCurrencyName:[input readString]];
        break;
      }
      case 160: {
        [self setPriceRank:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (City_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (City_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasCityName {
  return result.hasCityName;
}
- (NSString*) cityName {
  return result.cityName;
}
- (City_Builder*) setCityName:(NSString*) value {
  result.hasCityName = YES;
  result.cityName = value;
  return self;
}
- (City_Builder*) clearCityName {
  result.hasCityName = NO;
  result.cityName = @"";
  return self;
}
- (BOOL) hasLatestVersion {
  return result.hasLatestVersion;
}
- (NSString*) latestVersion {
  return result.latestVersion;
}
- (City_Builder*) setLatestVersion:(NSString*) value {
  result.hasLatestVersion = YES;
  result.latestVersion = value;
  return self;
}
- (City_Builder*) clearLatestVersion {
  result.hasLatestVersion = NO;
  result.latestVersion = @"";
  return self;
}
- (BOOL) hasCountryName {
  return result.hasCountryName;
}
- (NSString*) countryName {
  return result.countryName;
}
- (City_Builder*) setCountryName:(NSString*) value {
  result.hasCountryName = YES;
  result.countryName = value;
  return self;
}
- (City_Builder*) clearCountryName {
  result.hasCountryName = NO;
  result.countryName = @"";
  return self;
}
- (BOOL) hasDataSize {
  return result.hasDataSize;
}
- (int32_t) dataSize {
  return result.dataSize;
}
- (City_Builder*) setDataSize:(int32_t) value {
  result.hasDataSize = YES;
  result.dataSize = value;
  return self;
}
- (City_Builder*) clearDataSize {
  result.hasDataSize = NO;
  result.dataSize = 0;
  return self;
}
- (BOOL) hasDownloadUrl {
  return result.hasDownloadUrl;
}
- (NSString*) downloadUrl {
  return result.downloadUrl;
}
- (City_Builder*) setDownloadUrl:(NSString*) value {
  result.hasDownloadUrl = YES;
  result.downloadUrl = value;
  return self;
}
- (City_Builder*) clearDownloadUrl {
  result.hasDownloadUrl = NO;
  result.downloadUrl = @"";
  return self;
}
- (NSArray*) areaListList {
  if (result.mutableAreaListList == nil) { return [NSArray array]; }
  return result.mutableAreaListList;
}
- (CityArea*) areaListAtIndex:(int32_t) index {
  return [result areaListAtIndex:index];
}
- (City_Builder*) replaceAreaListAtIndex:(int32_t) index with:(CityArea*) value {
  [result.mutableAreaListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (City_Builder*) addAllAreaList:(NSArray*) values {
  if (result.mutableAreaListList == nil) {
    result.mutableAreaListList = [NSMutableArray array];
  }
  [result.mutableAreaListList addObjectsFromArray:values];
  return self;
}
- (City_Builder*) clearAreaListList {
  result.mutableAreaListList = nil;
  return self;
}
- (City_Builder*) addAreaList:(CityArea*) value {
  if (result.mutableAreaListList == nil) {
    result.mutableAreaListList = [NSMutableArray array];
  }
  [result.mutableAreaListList addObject:value];
  return self;
}
- (BOOL) hasCurrencySymbol {
  return result.hasCurrencySymbol;
}
- (NSString*) currencySymbol {
  return result.currencySymbol;
}
- (City_Builder*) setCurrencySymbol:(NSString*) value {
  result.hasCurrencySymbol = YES;
  result.currencySymbol = value;
  return self;
}
- (City_Builder*) clearCurrencySymbol {
  result.hasCurrencySymbol = NO;
  result.currencySymbol = @"";
  return self;
}
- (BOOL) hasCurrencyId {
  return result.hasCurrencyId;
}
- (NSString*) currencyId {
  return result.currencyId;
}
- (City_Builder*) setCurrencyId:(NSString*) value {
  result.hasCurrencyId = YES;
  result.currencyId = value;
  return self;
}
- (City_Builder*) clearCurrencyId {
  result.hasCurrencyId = NO;
  result.currencyId = @"";
  return self;
}
- (BOOL) hasCurrencyName {
  return result.hasCurrencyName;
}
- (NSString*) currencyName {
  return result.currencyName;
}
- (City_Builder*) setCurrencyName:(NSString*) value {
  result.hasCurrencyName = YES;
  result.currencyName = value;
  return self;
}
- (City_Builder*) clearCurrencyName {
  result.hasCurrencyName = NO;
  result.currencyName = @"";
  return self;
}
- (BOOL) hasPriceRank {
  return result.hasPriceRank;
}
- (int32_t) priceRank {
  return result.priceRank;
}
- (City_Builder*) setPriceRank:(int32_t) value {
  result.hasPriceRank = YES;
  result.priceRank = value;
  return self;
}
- (City_Builder*) clearPriceRank {
  result.hasPriceRank = NO;
  result.priceRank = 3;
  return self;
}
@end

@interface CityList ()
@property (retain) NSMutableArray* mutableCitiesList;
@end

@implementation CityList

@synthesize mutableCitiesList;
- (void) dealloc {
  self.mutableCitiesList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CityList* defaultCityListInstance = nil;
+ (void) initialize {
  if (self == [CityList class]) {
    defaultCityListInstance = [[CityList alloc] init];
  }
}
+ (CityList*) defaultInstance {
  return defaultCityListInstance;
}
- (CityList*) defaultInstance {
  return defaultCityListInstance;
}
- (NSArray*) citiesList {
  return mutableCitiesList;
}
- (City*) citiesAtIndex:(int32_t) index {
  id value = [mutableCitiesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (City* element in self.citiesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (City* element in self.citiesList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (City* element in self.citiesList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityList*) parseFromData:(NSData*) data {
  return (CityList*)[[[CityList builder] mergeFromData:data] build];
}
+ (CityList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityList*) parseFromInputStream:(NSInputStream*) input {
  return (CityList*)[[[CityList builder] mergeFromInputStream:input] build];
}
+ (CityList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityList*)[[[CityList builder] mergeFromCodedInputStream:input] build];
}
+ (CityList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityList_Builder*) builder {
  return [[[CityList_Builder alloc] init] autorelease];
}
+ (CityList_Builder*) builderWithPrototype:(CityList*) prototype {
  return [[CityList builder] mergeFrom:prototype];
}
- (CityList_Builder*) builder {
  return [CityList builder];
}
@end

@interface CityList_Builder()
@property (retain) CityList* result;
@end

@implementation CityList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityList_Builder*) clear {
  self.result = [[[CityList alloc] init] autorelease];
  return self;
}
- (CityList_Builder*) clone {
  return [CityList builderWithPrototype:result];
}
- (CityList*) defaultInstance {
  return [CityList defaultInstance];
}
- (CityList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityList*) buildPartial {
  CityList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityList_Builder*) mergeFrom:(CityList*) other {
  if (other == [CityList defaultInstance]) {
    return self;
  }
  if (other.mutableCitiesList.count > 0) {
    if (result.mutableCitiesList == nil) {
      result.mutableCitiesList = [NSMutableArray array];
    }
    [result.mutableCitiesList addObjectsFromArray:other.mutableCitiesList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCities:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) citiesList {
  if (result.mutableCitiesList == nil) { return [NSArray array]; }
  return result.mutableCitiesList;
}
- (City*) citiesAtIndex:(int32_t) index {
  return [result citiesAtIndex:index];
}
- (CityList_Builder*) replaceCitiesAtIndex:(int32_t) index with:(City*) value {
  [result.mutableCitiesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CityList_Builder*) addAllCities:(NSArray*) values {
  if (result.mutableCitiesList == nil) {
    result.mutableCitiesList = [NSMutableArray array];
  }
  [result.mutableCitiesList addObjectsFromArray:values];
  return self;
}
- (CityList_Builder*) clearCitiesList {
  result.mutableCitiesList = nil;
  return self;
}
- (CityList_Builder*) addCities:(City*) value {
  if (result.mutableCitiesList == nil) {
    result.mutableCitiesList = [NSMutableArray array];
  }
  [result.mutableCitiesList addObject:value];
  return self;
}
@end

@interface HelpInfo ()
@property (retain) NSString* helpHtml;
@end

@implementation HelpInfo

- (BOOL) hasHelpHtml {
  return !!hasHelpHtml_;
}
- (void) setHasHelpHtml:(BOOL) value {
  hasHelpHtml_ = !!value;
}
@synthesize helpHtml;
- (void) dealloc {
  self.helpHtml = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.helpHtml = @"";
  }
  return self;
}
static HelpInfo* defaultHelpInfoInstance = nil;
+ (void) initialize {
  if (self == [HelpInfo class]) {
    defaultHelpInfoInstance = [[HelpInfo alloc] init];
  }
}
+ (HelpInfo*) defaultInstance {
  return defaultHelpInfoInstance;
}
- (HelpInfo*) defaultInstance {
  return defaultHelpInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHelpHtml) {
    [output writeString:11 value:self.helpHtml];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasHelpHtml) {
    size += computeStringSize(11, self.helpHtml);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HelpInfo*) parseFromData:(NSData*) data {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromData:data] build];
}
+ (HelpInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo*) parseFromInputStream:(NSInputStream*) input {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromInputStream:input] build];
}
+ (HelpInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromCodedInputStream:input] build];
}
+ (HelpInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo_Builder*) builder {
  return [[[HelpInfo_Builder alloc] init] autorelease];
}
+ (HelpInfo_Builder*) builderWithPrototype:(HelpInfo*) prototype {
  return [[HelpInfo builder] mergeFrom:prototype];
}
- (HelpInfo_Builder*) builder {
  return [HelpInfo builder];
}
@end

@interface HelpInfo_Builder()
@property (retain) HelpInfo* result;
@end

@implementation HelpInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HelpInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (HelpInfo_Builder*) clear {
  self.result = [[[HelpInfo alloc] init] autorelease];
  return self;
}
- (HelpInfo_Builder*) clone {
  return [HelpInfo builderWithPrototype:result];
}
- (HelpInfo*) defaultInstance {
  return [HelpInfo defaultInstance];
}
- (HelpInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HelpInfo*) buildPartial {
  HelpInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HelpInfo_Builder*) mergeFrom:(HelpInfo*) other {
  if (other == [HelpInfo defaultInstance]) {
    return self;
  }
  if (other.hasHelpHtml) {
    [self setHelpHtml:other.helpHtml];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HelpInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HelpInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        [self setHelpHtml:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasHelpHtml {
  return result.hasHelpHtml;
}
- (NSString*) helpHtml {
  return result.helpHtml;
}
- (HelpInfo_Builder*) setHelpHtml:(NSString*) value {
  result.hasHelpHtml = YES;
  result.helpHtml = value;
  return self;
}
- (HelpInfo_Builder*) clearHelpHtml {
  result.hasHelpHtml = NO;
  result.helpHtml = @"";
  return self;
}
@end

@interface App ()
@property (retain) NSString* dataVersion;
@property (retain) NSMutableArray* mutableCitiesList;
@property (retain) NSMutableArray* mutableTestCitiesList;
@property (retain) NSMutableArray* mutablePlaceMetaDataListList;
@property (retain) NSString* helpHtml;
@end

@implementation App

- (BOOL) hasDataVersion {
  return !!hasDataVersion_;
}
- (void) setHasDataVersion:(BOOL) value {
  hasDataVersion_ = !!value;
}
@synthesize dataVersion;
@synthesize mutableCitiesList;
@synthesize mutableTestCitiesList;
@synthesize mutablePlaceMetaDataListList;
- (BOOL) hasHelpHtml {
  return !!hasHelpHtml_;
}
- (void) setHasHelpHtml:(BOOL) value {
  hasHelpHtml_ = !!value;
}
@synthesize helpHtml;
- (void) dealloc {
  self.dataVersion = nil;
  self.mutableCitiesList = nil;
  self.mutableTestCitiesList = nil;
  self.mutablePlaceMetaDataListList = nil;
  self.helpHtml = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.dataVersion = @"";
    self.helpHtml = @"";
  }
  return self;
}
static App* defaultAppInstance = nil;
+ (void) initialize {
  if (self == [App class]) {
    defaultAppInstance = [[App alloc] init];
  }
}
+ (App*) defaultInstance {
  return defaultAppInstance;
}
- (App*) defaultInstance {
  return defaultAppInstance;
}
- (NSArray*) citiesList {
  return mutableCitiesList;
}
- (City*) citiesAtIndex:(int32_t) index {
  id value = [mutableCitiesList objectAtIndex:index];
  return value;
}
- (NSArray*) testCitiesList {
  return mutableTestCitiesList;
}
- (City*) testCitiesAtIndex:(int32_t) index {
  id value = [mutableTestCitiesList objectAtIndex:index];
  return value;
}
- (NSArray*) placeMetaDataListList {
  return mutablePlaceMetaDataListList;
}
- (PlaceMeta*) placeMetaDataListAtIndex:(int32_t) index {
  id value = [mutablePlaceMetaDataListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasDataVersion) {
    return NO;
  }
  for (City* element in self.citiesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (City* element in self.testCitiesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PlaceMeta* element in self.placeMetaDataListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDataVersion) {
    [output writeString:1 value:self.dataVersion];
  }
  for (City* element in self.citiesList) {
    [output writeMessage:2 value:element];
  }
  for (City* element in self.testCitiesList) {
    [output writeMessage:3 value:element];
  }
  for (PlaceMeta* element in self.placeMetaDataListList) {
    [output writeMessage:5 value:element];
  }
  if (self.hasHelpHtml) {
    [output writeString:11 value:self.helpHtml];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDataVersion) {
    size += computeStringSize(1, self.dataVersion);
  }
  for (City* element in self.citiesList) {
    size += computeMessageSize(2, element);
  }
  for (City* element in self.testCitiesList) {
    size += computeMessageSize(3, element);
  }
  for (PlaceMeta* element in self.placeMetaDataListList) {
    size += computeMessageSize(5, element);
  }
  if (self.hasHelpHtml) {
    size += computeStringSize(11, self.helpHtml);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (App*) parseFromData:(NSData*) data {
  return (App*)[[[App builder] mergeFromData:data] build];
}
+ (App*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (App*) parseFromInputStream:(NSInputStream*) input {
  return (App*)[[[App builder] mergeFromInputStream:input] build];
}
+ (App*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (App*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (App*)[[[App builder] mergeFromCodedInputStream:input] build];
}
+ (App*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (App_Builder*) builder {
  return [[[App_Builder alloc] init] autorelease];
}
+ (App_Builder*) builderWithPrototype:(App*) prototype {
  return [[App builder] mergeFrom:prototype];
}
- (App_Builder*) builder {
  return [App builder];
}
@end

@interface App_Builder()
@property (retain) App* result;
@end

@implementation App_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[App alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (App_Builder*) clear {
  self.result = [[[App alloc] init] autorelease];
  return self;
}
- (App_Builder*) clone {
  return [App builderWithPrototype:result];
}
- (App*) defaultInstance {
  return [App defaultInstance];
}
- (App*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (App*) buildPartial {
  App* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (App_Builder*) mergeFrom:(App*) other {
  if (other == [App defaultInstance]) {
    return self;
  }
  if (other.hasDataVersion) {
    [self setDataVersion:other.dataVersion];
  }
  if (other.mutableCitiesList.count > 0) {
    if (result.mutableCitiesList == nil) {
      result.mutableCitiesList = [NSMutableArray array];
    }
    [result.mutableCitiesList addObjectsFromArray:other.mutableCitiesList];
  }
  if (other.mutableTestCitiesList.count > 0) {
    if (result.mutableTestCitiesList == nil) {
      result.mutableTestCitiesList = [NSMutableArray array];
    }
    [result.mutableTestCitiesList addObjectsFromArray:other.mutableTestCitiesList];
  }
  if (other.mutablePlaceMetaDataListList.count > 0) {
    if (result.mutablePlaceMetaDataListList == nil) {
      result.mutablePlaceMetaDataListList = [NSMutableArray array];
    }
    [result.mutablePlaceMetaDataListList addObjectsFromArray:other.mutablePlaceMetaDataListList];
  }
  if (other.hasHelpHtml) {
    [self setHelpHtml:other.helpHtml];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (App_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (App_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDataVersion:[input readString]];
        break;
      }
      case 18: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCities:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTestCities:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        PlaceMeta_Builder* subBuilder = [PlaceMeta builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlaceMetaDataList:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setHelpHtml:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDataVersion {
  return result.hasDataVersion;
}
- (NSString*) dataVersion {
  return result.dataVersion;
}
- (App_Builder*) setDataVersion:(NSString*) value {
  result.hasDataVersion = YES;
  result.dataVersion = value;
  return self;
}
- (App_Builder*) clearDataVersion {
  result.hasDataVersion = NO;
  result.dataVersion = @"";
  return self;
}
- (NSArray*) citiesList {
  if (result.mutableCitiesList == nil) { return [NSArray array]; }
  return result.mutableCitiesList;
}
- (City*) citiesAtIndex:(int32_t) index {
  return [result citiesAtIndex:index];
}
- (App_Builder*) replaceCitiesAtIndex:(int32_t) index with:(City*) value {
  [result.mutableCitiesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllCities:(NSArray*) values {
  if (result.mutableCitiesList == nil) {
    result.mutableCitiesList = [NSMutableArray array];
  }
  [result.mutableCitiesList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearCitiesList {
  result.mutableCitiesList = nil;
  return self;
}
- (App_Builder*) addCities:(City*) value {
  if (result.mutableCitiesList == nil) {
    result.mutableCitiesList = [NSMutableArray array];
  }
  [result.mutableCitiesList addObject:value];
  return self;
}
- (NSArray*) testCitiesList {
  if (result.mutableTestCitiesList == nil) { return [NSArray array]; }
  return result.mutableTestCitiesList;
}
- (City*) testCitiesAtIndex:(int32_t) index {
  return [result testCitiesAtIndex:index];
}
- (App_Builder*) replaceTestCitiesAtIndex:(int32_t) index with:(City*) value {
  [result.mutableTestCitiesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllTestCities:(NSArray*) values {
  if (result.mutableTestCitiesList == nil) {
    result.mutableTestCitiesList = [NSMutableArray array];
  }
  [result.mutableTestCitiesList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearTestCitiesList {
  result.mutableTestCitiesList = nil;
  return self;
}
- (App_Builder*) addTestCities:(City*) value {
  if (result.mutableTestCitiesList == nil) {
    result.mutableTestCitiesList = [NSMutableArray array];
  }
  [result.mutableTestCitiesList addObject:value];
  return self;
}
- (NSArray*) placeMetaDataListList {
  if (result.mutablePlaceMetaDataListList == nil) { return [NSArray array]; }
  return result.mutablePlaceMetaDataListList;
}
- (PlaceMeta*) placeMetaDataListAtIndex:(int32_t) index {
  return [result placeMetaDataListAtIndex:index];
}
- (App_Builder*) replacePlaceMetaDataListAtIndex:(int32_t) index with:(PlaceMeta*) value {
  [result.mutablePlaceMetaDataListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllPlaceMetaDataList:(NSArray*) values {
  if (result.mutablePlaceMetaDataListList == nil) {
    result.mutablePlaceMetaDataListList = [NSMutableArray array];
  }
  [result.mutablePlaceMetaDataListList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearPlaceMetaDataListList {
  result.mutablePlaceMetaDataListList = nil;
  return self;
}
- (App_Builder*) addPlaceMetaDataList:(PlaceMeta*) value {
  if (result.mutablePlaceMetaDataListList == nil) {
    result.mutablePlaceMetaDataListList = [NSMutableArray array];
  }
  [result.mutablePlaceMetaDataListList addObject:value];
  return self;
}
- (BOOL) hasHelpHtml {
  return result.hasHelpHtml;
}
- (NSString*) helpHtml {
  return result.helpHtml;
}
- (App_Builder*) setHelpHtml:(NSString*) value {
  result.hasHelpHtml = YES;
  result.helpHtml = value;
  return self;
}
- (App_Builder*) clearHelpHtml {
  result.hasHelpHtml = NO;
  result.helpHtml = @"";
  return self;
}
@end

