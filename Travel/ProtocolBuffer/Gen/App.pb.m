// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "App.pb.h"

@implementation AppRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [AppRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [TouristRouteRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PlaceCategoryTypeIsValidValue(PlaceCategoryType value) {
  switch (value) {
    case PlaceCategoryTypePlaceAll:
    case PlaceCategoryTypePlaceSpot:
    case PlaceCategoryTypePlaceHotel:
    case PlaceCategoryTypePlaceRestraurant:
    case PlaceCategoryTypePlaceShopping:
    case PlaceCategoryTypePlaceEntertainment:
      return YES;
    default:
      return NO;
  }
}
@interface NameIdPair ()
@property (retain) NSString* name;
@property int32_t id;
@property (retain) NSString* image;
@end

@implementation NameIdPair

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) value {
  hasImage_ = !!value;
}
@synthesize image;
- (void) dealloc {
  self.name = nil;
  self.image = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.id = 0;
    self.image = @"";
  }
  return self;
}
static NameIdPair* defaultNameIdPairInstance = nil;
+ (void) initialize {
  if (self == [NameIdPair class]) {
    defaultNameIdPairInstance = [[NameIdPair alloc] init];
  }
}
+ (NameIdPair*) defaultInstance {
  return defaultNameIdPairInstance;
}
- (NameIdPair*) defaultInstance {
  return defaultNameIdPairInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasId) {
    [output writeInt32:2 value:self.id];
  }
  if (self.hasImage) {
    [output writeString:3 value:self.image];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasId) {
    size += computeInt32Size(2, self.id);
  }
  if (self.hasImage) {
    size += computeStringSize(3, self.image);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (NameIdPair*) parseFromData:(NSData*) data {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromData:data] build];
}
+ (NameIdPair*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NameIdPair*) parseFromInputStream:(NSInputStream*) input {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromInputStream:input] build];
}
+ (NameIdPair*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NameIdPair*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromCodedInputStream:input] build];
}
+ (NameIdPair*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NameIdPair_Builder*) builder {
  return [[[NameIdPair_Builder alloc] init] autorelease];
}
+ (NameIdPair_Builder*) builderWithPrototype:(NameIdPair*) prototype {
  return [[NameIdPair builder] mergeFrom:prototype];
}
- (NameIdPair_Builder*) builder {
  return [NameIdPair builder];
}
@end

@interface NameIdPair_Builder()
@property (retain) NameIdPair* result;
@end

@implementation NameIdPair_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[NameIdPair alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (NameIdPair_Builder*) clear {
  self.result = [[[NameIdPair alloc] init] autorelease];
  return self;
}
- (NameIdPair_Builder*) clone {
  return [NameIdPair builderWithPrototype:result];
}
- (NameIdPair*) defaultInstance {
  return [NameIdPair defaultInstance];
}
- (NameIdPair*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NameIdPair*) buildPartial {
  NameIdPair* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (NameIdPair_Builder*) mergeFrom:(NameIdPair*) other {
  if (other == [NameIdPair defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NameIdPair_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NameIdPair_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setId:[input readInt32]];
        break;
      }
      case 26: {
        [self setImage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (NameIdPair_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (NameIdPair_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (NameIdPair_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (NameIdPair_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasImage {
  return result.hasImage;
}
- (NSString*) image {
  return result.image;
}
- (NameIdPair_Builder*) setImage:(NSString*) value {
  result.hasImage = YES;
  result.image = value;
  return self;
}
- (NameIdPair_Builder*) clearImage {
  result.hasImage = NO;
  result.image = @"";
  return self;
}
@end

@interface PlaceMeta ()
@property PlaceCategoryType categoryId;
@property (retain) NSString* name;
@property (retain) NSMutableArray* mutableSubCategoryListList;
@property (retain) NSMutableArray* mutableProvidedServiceListList;
@end

@implementation PlaceMeta

- (BOOL) hasCategoryId {
  return !!hasCategoryId_;
}
- (void) setHasCategoryId:(BOOL) value {
  hasCategoryId_ = !!value;
}
@synthesize categoryId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
@synthesize mutableSubCategoryListList;
@synthesize mutableProvidedServiceListList;
- (void) dealloc {
  self.name = nil;
  self.mutableSubCategoryListList = nil;
  self.mutableProvidedServiceListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.categoryId = PlaceCategoryTypePlaceAll;
    self.name = @"";
  }
  return self;
}
static PlaceMeta* defaultPlaceMetaInstance = nil;
+ (void) initialize {
  if (self == [PlaceMeta class]) {
    defaultPlaceMetaInstance = [[PlaceMeta alloc] init];
  }
}
+ (PlaceMeta*) defaultInstance {
  return defaultPlaceMetaInstance;
}
- (PlaceMeta*) defaultInstance {
  return defaultPlaceMetaInstance;
}
- (NSArray*) subCategoryListList {
  return mutableSubCategoryListList;
}
- (NameIdPair*) subCategoryListAtIndex:(int32_t) index {
  id value = [mutableSubCategoryListList objectAtIndex:index];
  return value;
}
- (NSArray*) providedServiceListList {
  return mutableProvidedServiceListList;
}
- (NameIdPair*) providedServiceListAtIndex:(int32_t) index {
  id value = [mutableProvidedServiceListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasCategoryId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  for (NameIdPair* element in self.subCategoryListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (NameIdPair* element in self.providedServiceListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategoryId) {
    [output writeEnum:1 value:self.categoryId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  for (NameIdPair* element in self.subCategoryListList) {
    [output writeMessage:3 value:element];
  }
  for (NameIdPair* element in self.providedServiceListList) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCategoryId) {
    size += computeEnumSize(1, self.categoryId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  for (NameIdPair* element in self.subCategoryListList) {
    size += computeMessageSize(3, element);
  }
  for (NameIdPair* element in self.providedServiceListList) {
    size += computeMessageSize(4, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PlaceMeta*) parseFromData:(NSData*) data {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromData:data] build];
}
+ (PlaceMeta*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PlaceMeta*) parseFromInputStream:(NSInputStream*) input {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromInputStream:input] build];
}
+ (PlaceMeta*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaceMeta*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromCodedInputStream:input] build];
}
+ (PlaceMeta*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaceMeta_Builder*) builder {
  return [[[PlaceMeta_Builder alloc] init] autorelease];
}
+ (PlaceMeta_Builder*) builderWithPrototype:(PlaceMeta*) prototype {
  return [[PlaceMeta builder] mergeFrom:prototype];
}
- (PlaceMeta_Builder*) builder {
  return [PlaceMeta builder];
}
@end

@interface PlaceMeta_Builder()
@property (retain) PlaceMeta* result;
@end

@implementation PlaceMeta_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PlaceMeta alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PlaceMeta_Builder*) clear {
  self.result = [[[PlaceMeta alloc] init] autorelease];
  return self;
}
- (PlaceMeta_Builder*) clone {
  return [PlaceMeta builderWithPrototype:result];
}
- (PlaceMeta*) defaultInstance {
  return [PlaceMeta defaultInstance];
}
- (PlaceMeta*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PlaceMeta*) buildPartial {
  PlaceMeta* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PlaceMeta_Builder*) mergeFrom:(PlaceMeta*) other {
  if (other == [PlaceMeta defaultInstance]) {
    return self;
  }
  if (other.hasCategoryId) {
    [self setCategoryId:other.categoryId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.mutableSubCategoryListList.count > 0) {
    if (result.mutableSubCategoryListList == nil) {
      result.mutableSubCategoryListList = [NSMutableArray array];
    }
    [result.mutableSubCategoryListList addObjectsFromArray:other.mutableSubCategoryListList];
  }
  if (other.mutableProvidedServiceListList.count > 0) {
    if (result.mutableProvidedServiceListList == nil) {
      result.mutableProvidedServiceListList = [NSMutableArray array];
    }
    [result.mutableProvidedServiceListList addObjectsFromArray:other.mutableProvidedServiceListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PlaceMeta_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PlaceMeta_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (PlaceCategoryTypeIsValidValue(value)) {
          [self setCategoryId:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSubCategoryList:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProvidedServiceList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCategoryId {
  return result.hasCategoryId;
}
- (PlaceCategoryType) categoryId {
  return result.categoryId;
}
- (PlaceMeta_Builder*) setCategoryId:(PlaceCategoryType) value {
  result.hasCategoryId = YES;
  result.categoryId = value;
  return self;
}
- (PlaceMeta_Builder*) clearCategoryId {
  result.hasCategoryId = NO;
  result.categoryId = PlaceCategoryTypePlaceAll;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PlaceMeta_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PlaceMeta_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (NSArray*) subCategoryListList {
  if (result.mutableSubCategoryListList == nil) { return [NSArray array]; }
  return result.mutableSubCategoryListList;
}
- (NameIdPair*) subCategoryListAtIndex:(int32_t) index {
  return [result subCategoryListAtIndex:index];
}
- (PlaceMeta_Builder*) replaceSubCategoryListAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableSubCategoryListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PlaceMeta_Builder*) addAllSubCategoryList:(NSArray*) values {
  if (result.mutableSubCategoryListList == nil) {
    result.mutableSubCategoryListList = [NSMutableArray array];
  }
  [result.mutableSubCategoryListList addObjectsFromArray:values];
  return self;
}
- (PlaceMeta_Builder*) clearSubCategoryListList {
  result.mutableSubCategoryListList = nil;
  return self;
}
- (PlaceMeta_Builder*) addSubCategoryList:(NameIdPair*) value {
  if (result.mutableSubCategoryListList == nil) {
    result.mutableSubCategoryListList = [NSMutableArray array];
  }
  [result.mutableSubCategoryListList addObject:value];
  return self;
}
- (NSArray*) providedServiceListList {
  if (result.mutableProvidedServiceListList == nil) { return [NSArray array]; }
  return result.mutableProvidedServiceListList;
}
- (NameIdPair*) providedServiceListAtIndex:(int32_t) index {
  return [result providedServiceListAtIndex:index];
}
- (PlaceMeta_Builder*) replaceProvidedServiceListAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableProvidedServiceListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PlaceMeta_Builder*) addAllProvidedServiceList:(NSArray*) values {
  if (result.mutableProvidedServiceListList == nil) {
    result.mutableProvidedServiceListList = [NSMutableArray array];
  }
  [result.mutableProvidedServiceListList addObjectsFromArray:values];
  return self;
}
- (PlaceMeta_Builder*) clearProvidedServiceListList {
  result.mutableProvidedServiceListList = nil;
  return self;
}
- (PlaceMeta_Builder*) addProvidedServiceList:(NameIdPair*) value {
  if (result.mutableProvidedServiceListList == nil) {
    result.mutableProvidedServiceListList = [NSMutableArray array];
  }
  [result.mutableProvidedServiceListList addObject:value];
  return self;
}
@end

@interface CityArea ()
@property int32_t areaId;
@property (retain) NSString* areaName;
@end

@implementation CityArea

- (BOOL) hasAreaId {
  return !!hasAreaId_;
}
- (void) setHasAreaId:(BOOL) value {
  hasAreaId_ = !!value;
}
@synthesize areaId;
- (BOOL) hasAreaName {
  return !!hasAreaName_;
}
- (void) setHasAreaName:(BOOL) value {
  hasAreaName_ = !!value;
}
@synthesize areaName;
- (void) dealloc {
  self.areaName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.areaId = 0;
    self.areaName = @"";
  }
  return self;
}
static CityArea* defaultCityAreaInstance = nil;
+ (void) initialize {
  if (self == [CityArea class]) {
    defaultCityAreaInstance = [[CityArea alloc] init];
  }
}
+ (CityArea*) defaultInstance {
  return defaultCityAreaInstance;
}
- (CityArea*) defaultInstance {
  return defaultCityAreaInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAreaId) {
    return NO;
  }
  if (!self.hasAreaName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAreaId) {
    [output writeInt32:1 value:self.areaId];
  }
  if (self.hasAreaName) {
    [output writeString:2 value:self.areaName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAreaId) {
    size += computeInt32Size(1, self.areaId);
  }
  if (self.hasAreaName) {
    size += computeStringSize(2, self.areaName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityArea*) parseFromData:(NSData*) data {
  return (CityArea*)[[[CityArea builder] mergeFromData:data] build];
}
+ (CityArea*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityArea*)[[[CityArea builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityArea*) parseFromInputStream:(NSInputStream*) input {
  return (CityArea*)[[[CityArea builder] mergeFromInputStream:input] build];
}
+ (CityArea*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityArea*)[[[CityArea builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityArea*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityArea*)[[[CityArea builder] mergeFromCodedInputStream:input] build];
}
+ (CityArea*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityArea*)[[[CityArea builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityArea_Builder*) builder {
  return [[[CityArea_Builder alloc] init] autorelease];
}
+ (CityArea_Builder*) builderWithPrototype:(CityArea*) prototype {
  return [[CityArea builder] mergeFrom:prototype];
}
- (CityArea_Builder*) builder {
  return [CityArea builder];
}
@end

@interface CityArea_Builder()
@property (retain) CityArea* result;
@end

@implementation CityArea_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityArea alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityArea_Builder*) clear {
  self.result = [[[CityArea alloc] init] autorelease];
  return self;
}
- (CityArea_Builder*) clone {
  return [CityArea builderWithPrototype:result];
}
- (CityArea*) defaultInstance {
  return [CityArea defaultInstance];
}
- (CityArea*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityArea*) buildPartial {
  CityArea* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityArea_Builder*) mergeFrom:(CityArea*) other {
  if (other == [CityArea defaultInstance]) {
    return self;
  }
  if (other.hasAreaId) {
    [self setAreaId:other.areaId];
  }
  if (other.hasAreaName) {
    [self setAreaName:other.areaName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityArea_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityArea_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAreaId:[input readInt32]];
        break;
      }
      case 18: {
        [self setAreaName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAreaId {
  return result.hasAreaId;
}
- (int32_t) areaId {
  return result.areaId;
}
- (CityArea_Builder*) setAreaId:(int32_t) value {
  result.hasAreaId = YES;
  result.areaId = value;
  return self;
}
- (CityArea_Builder*) clearAreaId {
  result.hasAreaId = NO;
  result.areaId = 0;
  return self;
}
- (BOOL) hasAreaName {
  return result.hasAreaName;
}
- (NSString*) areaName {
  return result.areaName;
}
- (CityArea_Builder*) setAreaName:(NSString*) value {
  result.hasAreaName = YES;
  result.areaName = value;
  return self;
}
- (CityArea_Builder*) clearAreaName {
  result.hasAreaName = NO;
  result.areaName = @"";
  return self;
}
@end

@interface CityLocationInfo ()
@property (retain) NSString* cityName;
@property Float64 longitude;
@property Float64 latitude;
@end

@implementation CityLocationInfo

- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) value {
  hasCityName_ = !!value;
}
@synthesize cityName;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) value {
  hasLongitude_ = !!value;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) value {
  hasLatitude_ = !!value;
}
@synthesize latitude;
- (void) dealloc {
  self.cityName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cityName = @"";
    self.longitude = 0;
    self.latitude = 0;
  }
  return self;
}
static CityLocationInfo* defaultCityLocationInfoInstance = nil;
+ (void) initialize {
  if (self == [CityLocationInfo class]) {
    defaultCityLocationInfoInstance = [[CityLocationInfo alloc] init];
  }
}
+ (CityLocationInfo*) defaultInstance {
  return defaultCityLocationInfoInstance;
}
- (CityLocationInfo*) defaultInstance {
  return defaultCityLocationInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCityName) {
    [output writeString:1 value:self.cityName];
  }
  if (self.hasLongitude) {
    [output writeDouble:2 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeDouble:3 value:self.latitude];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCityName) {
    size += computeStringSize(1, self.cityName);
  }
  if (self.hasLongitude) {
    size += computeDoubleSize(2, self.longitude);
  }
  if (self.hasLatitude) {
    size += computeDoubleSize(3, self.latitude);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityLocationInfo*) parseFromData:(NSData*) data {
  return (CityLocationInfo*)[[[CityLocationInfo builder] mergeFromData:data] build];
}
+ (CityLocationInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityLocationInfo*)[[[CityLocationInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityLocationInfo*) parseFromInputStream:(NSInputStream*) input {
  return (CityLocationInfo*)[[[CityLocationInfo builder] mergeFromInputStream:input] build];
}
+ (CityLocationInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityLocationInfo*)[[[CityLocationInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityLocationInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityLocationInfo*)[[[CityLocationInfo builder] mergeFromCodedInputStream:input] build];
}
+ (CityLocationInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityLocationInfo*)[[[CityLocationInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityLocationInfo_Builder*) builder {
  return [[[CityLocationInfo_Builder alloc] init] autorelease];
}
+ (CityLocationInfo_Builder*) builderWithPrototype:(CityLocationInfo*) prototype {
  return [[CityLocationInfo builder] mergeFrom:prototype];
}
- (CityLocationInfo_Builder*) builder {
  return [CityLocationInfo builder];
}
@end

@interface CityLocationInfo_Builder()
@property (retain) CityLocationInfo* result;
@end

@implementation CityLocationInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityLocationInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityLocationInfo_Builder*) clear {
  self.result = [[[CityLocationInfo alloc] init] autorelease];
  return self;
}
- (CityLocationInfo_Builder*) clone {
  return [CityLocationInfo builderWithPrototype:result];
}
- (CityLocationInfo*) defaultInstance {
  return [CityLocationInfo defaultInstance];
}
- (CityLocationInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityLocationInfo*) buildPartial {
  CityLocationInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityLocationInfo_Builder*) mergeFrom:(CityLocationInfo*) other {
  if (other == [CityLocationInfo defaultInstance]) {
    return self;
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityLocationInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityLocationInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCityName:[input readString]];
        break;
      }
      case 17: {
        [self setLongitude:[input readDouble]];
        break;
      }
      case 25: {
        [self setLatitude:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasCityName {
  return result.hasCityName;
}
- (NSString*) cityName {
  return result.cityName;
}
- (CityLocationInfo_Builder*) setCityName:(NSString*) value {
  result.hasCityName = YES;
  result.cityName = value;
  return self;
}
- (CityLocationInfo_Builder*) clearCityName {
  result.hasCityName = NO;
  result.cityName = @"";
  return self;
}
- (BOOL) hasLongitude {
  return result.hasLongitude;
}
- (Float64) longitude {
  return result.longitude;
}
- (CityLocationInfo_Builder*) setLongitude:(Float64) value {
  result.hasLongitude = YES;
  result.longitude = value;
  return self;
}
- (CityLocationInfo_Builder*) clearLongitude {
  result.hasLongitude = NO;
  result.longitude = 0;
  return self;
}
- (BOOL) hasLatitude {
  return result.hasLatitude;
}
- (Float64) latitude {
  return result.latitude;
}
- (CityLocationInfo_Builder*) setLatitude:(Float64) value {
  result.hasLatitude = YES;
  result.latitude = value;
  return self;
}
- (CityLocationInfo_Builder*) clearLatitude {
  result.hasLatitude = NO;
  result.latitude = 0;
  return self;
}
@end

@interface City ()
@property int32_t cityId;
@property (retain) NSString* cityName;
@property (retain) NSString* latestVersion;
@property (retain) NSString* countryName;
@property int32_t dataSize;
@property (retain) NSString* downloadUrl;
@property (retain) NSMutableArray* mutableAreaListList;
@property (retain) NSString* currencySymbol;
@property (retain) NSString* currencyId;
@property (retain) NSString* currencyName;
@property int32_t priceRank;
@property int32_t groupId;
@property BOOL hotCity;
@property (retain) NSMutableArray* mutableLocationInfoList;
@end

@implementation City

- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) value {
  hasCityName_ = !!value;
}
@synthesize cityName;
- (BOOL) hasLatestVersion {
  return !!hasLatestVersion_;
}
- (void) setHasLatestVersion:(BOOL) value {
  hasLatestVersion_ = !!value;
}
@synthesize latestVersion;
- (BOOL) hasCountryName {
  return !!hasCountryName_;
}
- (void) setHasCountryName:(BOOL) value {
  hasCountryName_ = !!value;
}
@synthesize countryName;
- (BOOL) hasDataSize {
  return !!hasDataSize_;
}
- (void) setHasDataSize:(BOOL) value {
  hasDataSize_ = !!value;
}
@synthesize dataSize;
- (BOOL) hasDownloadUrl {
  return !!hasDownloadUrl_;
}
- (void) setHasDownloadUrl:(BOOL) value {
  hasDownloadUrl_ = !!value;
}
@synthesize downloadUrl;
@synthesize mutableAreaListList;
- (BOOL) hasCurrencySymbol {
  return !!hasCurrencySymbol_;
}
- (void) setHasCurrencySymbol:(BOOL) value {
  hasCurrencySymbol_ = !!value;
}
@synthesize currencySymbol;
- (BOOL) hasCurrencyId {
  return !!hasCurrencyId_;
}
- (void) setHasCurrencyId:(BOOL) value {
  hasCurrencyId_ = !!value;
}
@synthesize currencyId;
- (BOOL) hasCurrencyName {
  return !!hasCurrencyName_;
}
- (void) setHasCurrencyName:(BOOL) value {
  hasCurrencyName_ = !!value;
}
@synthesize currencyName;
- (BOOL) hasPriceRank {
  return !!hasPriceRank_;
}
- (void) setHasPriceRank:(BOOL) value {
  hasPriceRank_ = !!value;
}
@synthesize priceRank;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) value {
  hasGroupId_ = !!value;
}
@synthesize groupId;
- (BOOL) hasHotCity {
  return !!hasHotCity_;
}
- (void) setHasHotCity:(BOOL) value {
  hasHotCity_ = !!value;
}
- (BOOL) hotCity {
  return !!hotCity_;
}
- (void) setHotCity:(BOOL) value {
  hotCity_ = !!value;
}
@synthesize mutableLocationInfoList;
- (void) dealloc {
  self.cityName = nil;
  self.latestVersion = nil;
  self.countryName = nil;
  self.downloadUrl = nil;
  self.mutableAreaListList = nil;
  self.currencySymbol = nil;
  self.currencyId = nil;
  self.currencyName = nil;
  self.mutableLocationInfoList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cityId = 0;
    self.cityName = @"";
    self.latestVersion = @"";
    self.countryName = @"";
    self.dataSize = 0;
    self.downloadUrl = @"";
    self.currencySymbol = @"";
    self.currencyId = @"";
    self.currencyName = @"";
    self.priceRank = 3;
    self.groupId = 0;
    self.hotCity = NO;
  }
  return self;
}
static City* defaultCityInstance = nil;
+ (void) initialize {
  if (self == [City class]) {
    defaultCityInstance = [[City alloc] init];
  }
}
+ (City*) defaultInstance {
  return defaultCityInstance;
}
- (City*) defaultInstance {
  return defaultCityInstance;
}
- (NSArray*) areaListList {
  return mutableAreaListList;
}
- (CityArea*) areaListAtIndex:(int32_t) index {
  id value = [mutableAreaListList objectAtIndex:index];
  return value;
}
- (NSArray*) locationInfoList {
  return mutableLocationInfoList;
}
- (CityLocationInfo*) locationInfoAtIndex:(int32_t) index {
  id value = [mutableLocationInfoList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasCityId) {
    return NO;
  }
  if (!self.hasCityName) {
    return NO;
  }
  if (!self.hasCurrencySymbol) {
    return NO;
  }
  if (!self.hasCurrencyId) {
    return NO;
  }
  if (!self.hasCurrencyName) {
    return NO;
  }
  for (CityArea* element in self.areaListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCityId) {
    [output writeInt32:1 value:self.cityId];
  }
  if (self.hasCityName) {
    [output writeString:2 value:self.cityName];
  }
  if (self.hasLatestVersion) {
    [output writeString:3 value:self.latestVersion];
  }
  if (self.hasCountryName) {
    [output writeString:4 value:self.countryName];
  }
  if (self.hasDataSize) {
    [output writeInt32:5 value:self.dataSize];
  }
  if (self.hasDownloadUrl) {
    [output writeString:6 value:self.downloadUrl];
  }
  for (CityArea* element in self.areaListList) {
    [output writeMessage:10 value:element];
  }
  if (self.hasCurrencySymbol) {
    [output writeString:11 value:self.currencySymbol];
  }
  if (self.hasCurrencyId) {
    [output writeString:12 value:self.currencyId];
  }
  if (self.hasCurrencyName) {
    [output writeString:13 value:self.currencyName];
  }
  if (self.hasPriceRank) {
    [output writeInt32:20 value:self.priceRank];
  }
  if (self.hasGroupId) {
    [output writeInt32:50 value:self.groupId];
  }
  if (self.hasHotCity) {
    [output writeBool:51 value:self.hotCity];
  }
  for (CityLocationInfo* element in self.locationInfoList) {
    [output writeMessage:55 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCityId) {
    size += computeInt32Size(1, self.cityId);
  }
  if (self.hasCityName) {
    size += computeStringSize(2, self.cityName);
  }
  if (self.hasLatestVersion) {
    size += computeStringSize(3, self.latestVersion);
  }
  if (self.hasCountryName) {
    size += computeStringSize(4, self.countryName);
  }
  if (self.hasDataSize) {
    size += computeInt32Size(5, self.dataSize);
  }
  if (self.hasDownloadUrl) {
    size += computeStringSize(6, self.downloadUrl);
  }
  for (CityArea* element in self.areaListList) {
    size += computeMessageSize(10, element);
  }
  if (self.hasCurrencySymbol) {
    size += computeStringSize(11, self.currencySymbol);
  }
  if (self.hasCurrencyId) {
    size += computeStringSize(12, self.currencyId);
  }
  if (self.hasCurrencyName) {
    size += computeStringSize(13, self.currencyName);
  }
  if (self.hasPriceRank) {
    size += computeInt32Size(20, self.priceRank);
  }
  if (self.hasGroupId) {
    size += computeInt32Size(50, self.groupId);
  }
  if (self.hasHotCity) {
    size += computeBoolSize(51, self.hotCity);
  }
  for (CityLocationInfo* element in self.locationInfoList) {
    size += computeMessageSize(55, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (City*) parseFromData:(NSData*) data {
  return (City*)[[[City builder] mergeFromData:data] build];
}
+ (City*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (City*) parseFromInputStream:(NSInputStream*) input {
  return (City*)[[[City builder] mergeFromInputStream:input] build];
}
+ (City*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (City*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (City*)[[[City builder] mergeFromCodedInputStream:input] build];
}
+ (City*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (City_Builder*) builder {
  return [[[City_Builder alloc] init] autorelease];
}
+ (City_Builder*) builderWithPrototype:(City*) prototype {
  return [[City builder] mergeFrom:prototype];
}
- (City_Builder*) builder {
  return [City builder];
}
@end

@interface City_Builder()
@property (retain) City* result;
@end

@implementation City_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[City alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (City_Builder*) clear {
  self.result = [[[City alloc] init] autorelease];
  return self;
}
- (City_Builder*) clone {
  return [City builderWithPrototype:result];
}
- (City*) defaultInstance {
  return [City defaultInstance];
}
- (City*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (City*) buildPartial {
  City* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (City_Builder*) mergeFrom:(City*) other {
  if (other == [City defaultInstance]) {
    return self;
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  if (other.hasLatestVersion) {
    [self setLatestVersion:other.latestVersion];
  }
  if (other.hasCountryName) {
    [self setCountryName:other.countryName];
  }
  if (other.hasDataSize) {
    [self setDataSize:other.dataSize];
  }
  if (other.hasDownloadUrl) {
    [self setDownloadUrl:other.downloadUrl];
  }
  if (other.mutableAreaListList.count > 0) {
    if (result.mutableAreaListList == nil) {
      result.mutableAreaListList = [NSMutableArray array];
    }
    [result.mutableAreaListList addObjectsFromArray:other.mutableAreaListList];
  }
  if (other.hasCurrencySymbol) {
    [self setCurrencySymbol:other.currencySymbol];
  }
  if (other.hasCurrencyId) {
    [self setCurrencyId:other.currencyId];
  }
  if (other.hasCurrencyName) {
    [self setCurrencyName:other.currencyName];
  }
  if (other.hasPriceRank) {
    [self setPriceRank:other.priceRank];
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasHotCity) {
    [self setHotCity:other.hotCity];
  }
  if (other.mutableLocationInfoList.count > 0) {
    if (result.mutableLocationInfoList == nil) {
      result.mutableLocationInfoList = [NSMutableArray array];
    }
    [result.mutableLocationInfoList addObjectsFromArray:other.mutableLocationInfoList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (City_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (City_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCityName:[input readString]];
        break;
      }
      case 26: {
        [self setLatestVersion:[input readString]];
        break;
      }
      case 34: {
        [self setCountryName:[input readString]];
        break;
      }
      case 40: {
        [self setDataSize:[input readInt32]];
        break;
      }
      case 50: {
        [self setDownloadUrl:[input readString]];
        break;
      }
      case 82: {
        CityArea_Builder* subBuilder = [CityArea builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAreaList:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setCurrencySymbol:[input readString]];
        break;
      }
      case 98: {
        [self setCurrencyId:[input readString]];
        break;
      }
      case 106: {
        [self setCurrencyName:[input readString]];
        break;
      }
      case 160: {
        [self setPriceRank:[input readInt32]];
        break;
      }
      case 400: {
        [self setGroupId:[input readInt32]];
        break;
      }
      case 408: {
        [self setHotCity:[input readBool]];
        break;
      }
      case 442: {
        CityLocationInfo_Builder* subBuilder = [CityLocationInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLocationInfo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (City_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (City_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasCityName {
  return result.hasCityName;
}
- (NSString*) cityName {
  return result.cityName;
}
- (City_Builder*) setCityName:(NSString*) value {
  result.hasCityName = YES;
  result.cityName = value;
  return self;
}
- (City_Builder*) clearCityName {
  result.hasCityName = NO;
  result.cityName = @"";
  return self;
}
- (BOOL) hasLatestVersion {
  return result.hasLatestVersion;
}
- (NSString*) latestVersion {
  return result.latestVersion;
}
- (City_Builder*) setLatestVersion:(NSString*) value {
  result.hasLatestVersion = YES;
  result.latestVersion = value;
  return self;
}
- (City_Builder*) clearLatestVersion {
  result.hasLatestVersion = NO;
  result.latestVersion = @"";
  return self;
}
- (BOOL) hasCountryName {
  return result.hasCountryName;
}
- (NSString*) countryName {
  return result.countryName;
}
- (City_Builder*) setCountryName:(NSString*) value {
  result.hasCountryName = YES;
  result.countryName = value;
  return self;
}
- (City_Builder*) clearCountryName {
  result.hasCountryName = NO;
  result.countryName = @"";
  return self;
}
- (BOOL) hasDataSize {
  return result.hasDataSize;
}
- (int32_t) dataSize {
  return result.dataSize;
}
- (City_Builder*) setDataSize:(int32_t) value {
  result.hasDataSize = YES;
  result.dataSize = value;
  return self;
}
- (City_Builder*) clearDataSize {
  result.hasDataSize = NO;
  result.dataSize = 0;
  return self;
}
- (BOOL) hasDownloadUrl {
  return result.hasDownloadUrl;
}
- (NSString*) downloadUrl {
  return result.downloadUrl;
}
- (City_Builder*) setDownloadUrl:(NSString*) value {
  result.hasDownloadUrl = YES;
  result.downloadUrl = value;
  return self;
}
- (City_Builder*) clearDownloadUrl {
  result.hasDownloadUrl = NO;
  result.downloadUrl = @"";
  return self;
}
- (NSArray*) areaListList {
  if (result.mutableAreaListList == nil) { return [NSArray array]; }
  return result.mutableAreaListList;
}
- (CityArea*) areaListAtIndex:(int32_t) index {
  return [result areaListAtIndex:index];
}
- (City_Builder*) replaceAreaListAtIndex:(int32_t) index with:(CityArea*) value {
  [result.mutableAreaListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (City_Builder*) addAllAreaList:(NSArray*) values {
  if (result.mutableAreaListList == nil) {
    result.mutableAreaListList = [NSMutableArray array];
  }
  [result.mutableAreaListList addObjectsFromArray:values];
  return self;
}
- (City_Builder*) clearAreaListList {
  result.mutableAreaListList = nil;
  return self;
}
- (City_Builder*) addAreaList:(CityArea*) value {
  if (result.mutableAreaListList == nil) {
    result.mutableAreaListList = [NSMutableArray array];
  }
  [result.mutableAreaListList addObject:value];
  return self;
}
- (BOOL) hasCurrencySymbol {
  return result.hasCurrencySymbol;
}
- (NSString*) currencySymbol {
  return result.currencySymbol;
}
- (City_Builder*) setCurrencySymbol:(NSString*) value {
  result.hasCurrencySymbol = YES;
  result.currencySymbol = value;
  return self;
}
- (City_Builder*) clearCurrencySymbol {
  result.hasCurrencySymbol = NO;
  result.currencySymbol = @"";
  return self;
}
- (BOOL) hasCurrencyId {
  return result.hasCurrencyId;
}
- (NSString*) currencyId {
  return result.currencyId;
}
- (City_Builder*) setCurrencyId:(NSString*) value {
  result.hasCurrencyId = YES;
  result.currencyId = value;
  return self;
}
- (City_Builder*) clearCurrencyId {
  result.hasCurrencyId = NO;
  result.currencyId = @"";
  return self;
}
- (BOOL) hasCurrencyName {
  return result.hasCurrencyName;
}
- (NSString*) currencyName {
  return result.currencyName;
}
- (City_Builder*) setCurrencyName:(NSString*) value {
  result.hasCurrencyName = YES;
  result.currencyName = value;
  return self;
}
- (City_Builder*) clearCurrencyName {
  result.hasCurrencyName = NO;
  result.currencyName = @"";
  return self;
}
- (BOOL) hasPriceRank {
  return result.hasPriceRank;
}
- (int32_t) priceRank {
  return result.priceRank;
}
- (City_Builder*) setPriceRank:(int32_t) value {
  result.hasPriceRank = YES;
  result.priceRank = value;
  return self;
}
- (City_Builder*) clearPriceRank {
  result.hasPriceRank = NO;
  result.priceRank = 3;
  return self;
}
- (BOOL) hasGroupId {
  return result.hasGroupId;
}
- (int32_t) groupId {
  return result.groupId;
}
- (City_Builder*) setGroupId:(int32_t) value {
  result.hasGroupId = YES;
  result.groupId = value;
  return self;
}
- (City_Builder*) clearGroupId {
  result.hasGroupId = NO;
  result.groupId = 0;
  return self;
}
- (BOOL) hasHotCity {
  return result.hasHotCity;
}
- (BOOL) hotCity {
  return result.hotCity;
}
- (City_Builder*) setHotCity:(BOOL) value {
  result.hasHotCity = YES;
  result.hotCity = value;
  return self;
}
- (City_Builder*) clearHotCity {
  result.hasHotCity = NO;
  result.hotCity = NO;
  return self;
}
- (NSArray*) locationInfoList {
  if (result.mutableLocationInfoList == nil) { return [NSArray array]; }
  return result.mutableLocationInfoList;
}
- (CityLocationInfo*) locationInfoAtIndex:(int32_t) index {
  return [result locationInfoAtIndex:index];
}
- (City_Builder*) replaceLocationInfoAtIndex:(int32_t) index with:(CityLocationInfo*) value {
  [result.mutableLocationInfoList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (City_Builder*) addAllLocationInfo:(NSArray*) values {
  if (result.mutableLocationInfoList == nil) {
    result.mutableLocationInfoList = [NSMutableArray array];
  }
  [result.mutableLocationInfoList addObjectsFromArray:values];
  return self;
}
- (City_Builder*) clearLocationInfoList {
  result.mutableLocationInfoList = nil;
  return self;
}
- (City_Builder*) addLocationInfo:(CityLocationInfo*) value {
  if (result.mutableLocationInfoList == nil) {
    result.mutableLocationInfoList = [NSMutableArray array];
  }
  [result.mutableLocationInfoList addObject:value];
  return self;
}
@end

@interface CityList ()
@property (retain) NSMutableArray* mutableCitiesList;
@end

@implementation CityList

@synthesize mutableCitiesList;
- (void) dealloc {
  self.mutableCitiesList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CityList* defaultCityListInstance = nil;
+ (void) initialize {
  if (self == [CityList class]) {
    defaultCityListInstance = [[CityList alloc] init];
  }
}
+ (CityList*) defaultInstance {
  return defaultCityListInstance;
}
- (CityList*) defaultInstance {
  return defaultCityListInstance;
}
- (NSArray*) citiesList {
  return mutableCitiesList;
}
- (City*) citiesAtIndex:(int32_t) index {
  id value = [mutableCitiesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (City* element in self.citiesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (City* element in self.citiesList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (City* element in self.citiesList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityList*) parseFromData:(NSData*) data {
  return (CityList*)[[[CityList builder] mergeFromData:data] build];
}
+ (CityList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityList*) parseFromInputStream:(NSInputStream*) input {
  return (CityList*)[[[CityList builder] mergeFromInputStream:input] build];
}
+ (CityList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityList*)[[[CityList builder] mergeFromCodedInputStream:input] build];
}
+ (CityList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityList_Builder*) builder {
  return [[[CityList_Builder alloc] init] autorelease];
}
+ (CityList_Builder*) builderWithPrototype:(CityList*) prototype {
  return [[CityList builder] mergeFrom:prototype];
}
- (CityList_Builder*) builder {
  return [CityList builder];
}
@end

@interface CityList_Builder()
@property (retain) CityList* result;
@end

@implementation CityList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityList_Builder*) clear {
  self.result = [[[CityList alloc] init] autorelease];
  return self;
}
- (CityList_Builder*) clone {
  return [CityList builderWithPrototype:result];
}
- (CityList*) defaultInstance {
  return [CityList defaultInstance];
}
- (CityList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityList*) buildPartial {
  CityList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityList_Builder*) mergeFrom:(CityList*) other {
  if (other == [CityList defaultInstance]) {
    return self;
  }
  if (other.mutableCitiesList.count > 0) {
    if (result.mutableCitiesList == nil) {
      result.mutableCitiesList = [NSMutableArray array];
    }
    [result.mutableCitiesList addObjectsFromArray:other.mutableCitiesList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCities:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) citiesList {
  if (result.mutableCitiesList == nil) { return [NSArray array]; }
  return result.mutableCitiesList;
}
- (City*) citiesAtIndex:(int32_t) index {
  return [result citiesAtIndex:index];
}
- (CityList_Builder*) replaceCitiesAtIndex:(int32_t) index with:(City*) value {
  [result.mutableCitiesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CityList_Builder*) addAllCities:(NSArray*) values {
  if (result.mutableCitiesList == nil) {
    result.mutableCitiesList = [NSMutableArray array];
  }
  [result.mutableCitiesList addObjectsFromArray:values];
  return self;
}
- (CityList_Builder*) clearCitiesList {
  result.mutableCitiesList = nil;
  return self;
}
- (CityList_Builder*) addCities:(City*) value {
  if (result.mutableCitiesList == nil) {
    result.mutableCitiesList = [NSMutableArray array];
  }
  [result.mutableCitiesList addObject:value];
  return self;
}
@end

@interface HelpInfo ()
@property (retain) NSString* version;
@property (retain) NSString* helpHtml;
@end

@implementation HelpInfo

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (BOOL) hasHelpHtml {
  return !!hasHelpHtml_;
}
- (void) setHasHelpHtml:(BOOL) value {
  hasHelpHtml_ = !!value;
}
@synthesize helpHtml;
- (void) dealloc {
  self.version = nil;
  self.helpHtml = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.version = @"";
    self.helpHtml = @"";
  }
  return self;
}
static HelpInfo* defaultHelpInfoInstance = nil;
+ (void) initialize {
  if (self == [HelpInfo class]) {
    defaultHelpInfoInstance = [[HelpInfo alloc] init];
  }
}
+ (HelpInfo*) defaultInstance {
  return defaultHelpInfoInstance;
}
- (HelpInfo*) defaultInstance {
  return defaultHelpInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeString:1 value:self.version];
  }
  if (self.hasHelpHtml) {
    [output writeString:11 value:self.helpHtml];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasVersion) {
    size += computeStringSize(1, self.version);
  }
  if (self.hasHelpHtml) {
    size += computeStringSize(11, self.helpHtml);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HelpInfo*) parseFromData:(NSData*) data {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromData:data] build];
}
+ (HelpInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo*) parseFromInputStream:(NSInputStream*) input {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromInputStream:input] build];
}
+ (HelpInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromCodedInputStream:input] build];
}
+ (HelpInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo_Builder*) builder {
  return [[[HelpInfo_Builder alloc] init] autorelease];
}
+ (HelpInfo_Builder*) builderWithPrototype:(HelpInfo*) prototype {
  return [[HelpInfo builder] mergeFrom:prototype];
}
- (HelpInfo_Builder*) builder {
  return [HelpInfo builder];
}
@end

@interface HelpInfo_Builder()
@property (retain) HelpInfo* result;
@end

@implementation HelpInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HelpInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (HelpInfo_Builder*) clear {
  self.result = [[[HelpInfo alloc] init] autorelease];
  return self;
}
- (HelpInfo_Builder*) clone {
  return [HelpInfo builderWithPrototype:result];
}
- (HelpInfo*) defaultInstance {
  return [HelpInfo defaultInstance];
}
- (HelpInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HelpInfo*) buildPartial {
  HelpInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HelpInfo_Builder*) mergeFrom:(HelpInfo*) other {
  if (other == [HelpInfo defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasHelpHtml) {
    [self setHelpHtml:other.helpHtml];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HelpInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HelpInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setVersion:[input readString]];
        break;
      }
      case 90: {
        [self setHelpHtml:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (NSString*) version {
  return result.version;
}
- (HelpInfo_Builder*) setVersion:(NSString*) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (HelpInfo_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = @"";
  return self;
}
- (BOOL) hasHelpHtml {
  return result.hasHelpHtml;
}
- (NSString*) helpHtml {
  return result.helpHtml;
}
- (HelpInfo_Builder*) setHelpHtml:(NSString*) value {
  result.hasHelpHtml = YES;
  result.helpHtml = value;
  return self;
}
- (HelpInfo_Builder*) clearHelpHtml {
  result.hasHelpHtml = NO;
  result.helpHtml = @"";
  return self;
}
@end

@interface RecommendedApp ()
@property (retain) NSString* name;
@property int32_t id;
@property (retain) NSString* appId;
@property (retain) NSString* description;
@property (retain) NSString* icon;
@property (retain) NSString* url;
@end

@implementation RecommendedApp

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasAppId {
  return !!hasAppId_;
}
- (void) setHasAppId:(BOOL) value {
  hasAppId_ = !!value;
}
@synthesize appId;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (BOOL) hasIcon {
  return !!hasIcon_;
}
- (void) setHasIcon:(BOOL) value {
  hasIcon_ = !!value;
}
@synthesize icon;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value {
  hasUrl_ = !!value;
}
@synthesize url;
- (void) dealloc {
  self.name = nil;
  self.appId = nil;
  self.description = nil;
  self.icon = nil;
  self.url = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.id = 0;
    self.appId = @"";
    self.description = @"";
    self.icon = @"";
    self.url = @"";
  }
  return self;
}
static RecommendedApp* defaultRecommendedAppInstance = nil;
+ (void) initialize {
  if (self == [RecommendedApp class]) {
    defaultRecommendedAppInstance = [[RecommendedApp alloc] init];
  }
}
+ (RecommendedApp*) defaultInstance {
  return defaultRecommendedAppInstance;
}
- (RecommendedApp*) defaultInstance {
  return defaultRecommendedAppInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasId) {
    [output writeInt32:2 value:self.id];
  }
  if (self.hasAppId) {
    [output writeString:3 value:self.appId];
  }
  if (self.hasDescription) {
    [output writeString:4 value:self.description];
  }
  if (self.hasIcon) {
    [output writeString:5 value:self.icon];
  }
  if (self.hasUrl) {
    [output writeString:6 value:self.url];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasId) {
    size += computeInt32Size(2, self.id);
  }
  if (self.hasAppId) {
    size += computeStringSize(3, self.appId);
  }
  if (self.hasDescription) {
    size += computeStringSize(4, self.description);
  }
  if (self.hasIcon) {
    size += computeStringSize(5, self.icon);
  }
  if (self.hasUrl) {
    size += computeStringSize(6, self.url);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RecommendedApp*) parseFromData:(NSData*) data {
  return (RecommendedApp*)[[[RecommendedApp builder] mergeFromData:data] build];
}
+ (RecommendedApp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RecommendedApp*)[[[RecommendedApp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RecommendedApp*) parseFromInputStream:(NSInputStream*) input {
  return (RecommendedApp*)[[[RecommendedApp builder] mergeFromInputStream:input] build];
}
+ (RecommendedApp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RecommendedApp*)[[[RecommendedApp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RecommendedApp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RecommendedApp*)[[[RecommendedApp builder] mergeFromCodedInputStream:input] build];
}
+ (RecommendedApp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RecommendedApp*)[[[RecommendedApp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RecommendedApp_Builder*) builder {
  return [[[RecommendedApp_Builder alloc] init] autorelease];
}
+ (RecommendedApp_Builder*) builderWithPrototype:(RecommendedApp*) prototype {
  return [[RecommendedApp builder] mergeFrom:prototype];
}
- (RecommendedApp_Builder*) builder {
  return [RecommendedApp builder];
}
@end

@interface RecommendedApp_Builder()
@property (retain) RecommendedApp* result;
@end

@implementation RecommendedApp_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RecommendedApp alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RecommendedApp_Builder*) clear {
  self.result = [[[RecommendedApp alloc] init] autorelease];
  return self;
}
- (RecommendedApp_Builder*) clone {
  return [RecommendedApp builderWithPrototype:result];
}
- (RecommendedApp*) defaultInstance {
  return [RecommendedApp defaultInstance];
}
- (RecommendedApp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RecommendedApp*) buildPartial {
  RecommendedApp* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RecommendedApp_Builder*) mergeFrom:(RecommendedApp*) other {
  if (other == [RecommendedApp defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasAppId) {
    [self setAppId:other.appId];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasIcon) {
    [self setIcon:other.icon];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RecommendedApp_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RecommendedApp_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setId:[input readInt32]];
        break;
      }
      case 26: {
        [self setAppId:[input readString]];
        break;
      }
      case 34: {
        [self setDescription:[input readString]];
        break;
      }
      case 42: {
        [self setIcon:[input readString]];
        break;
      }
      case 50: {
        [self setUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (RecommendedApp_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (RecommendedApp_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (RecommendedApp_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (RecommendedApp_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasAppId {
  return result.hasAppId;
}
- (NSString*) appId {
  return result.appId;
}
- (RecommendedApp_Builder*) setAppId:(NSString*) value {
  result.hasAppId = YES;
  result.appId = value;
  return self;
}
- (RecommendedApp_Builder*) clearAppId {
  result.hasAppId = NO;
  result.appId = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (RecommendedApp_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (RecommendedApp_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasIcon {
  return result.hasIcon;
}
- (NSString*) icon {
  return result.icon;
}
- (RecommendedApp_Builder*) setIcon:(NSString*) value {
  result.hasIcon = YES;
  result.icon = value;
  return self;
}
- (RecommendedApp_Builder*) clearIcon {
  result.hasIcon = NO;
  result.icon = @"";
  return self;
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (RecommendedApp_Builder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (RecommendedApp_Builder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
@end

@interface Agency ()
@property int32_t agencyId;
@property (retain) NSString* name;
@property (retain) NSString* shortName;
@property (retain) NSString* url;
@end

@implementation Agency

- (BOOL) hasAgencyId {
  return !!hasAgencyId_;
}
- (void) setHasAgencyId:(BOOL) value {
  hasAgencyId_ = !!value;
}
@synthesize agencyId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasShortName {
  return !!hasShortName_;
}
- (void) setHasShortName:(BOOL) value {
  hasShortName_ = !!value;
}
@synthesize shortName;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value {
  hasUrl_ = !!value;
}
@synthesize url;
- (void) dealloc {
  self.name = nil;
  self.shortName = nil;
  self.url = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.agencyId = 0;
    self.name = @"";
    self.shortName = @"";
    self.url = @"";
  }
  return self;
}
static Agency* defaultAgencyInstance = nil;
+ (void) initialize {
  if (self == [Agency class]) {
    defaultAgencyInstance = [[Agency alloc] init];
  }
}
+ (Agency*) defaultInstance {
  return defaultAgencyInstance;
}
- (Agency*) defaultInstance {
  return defaultAgencyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAgencyId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAgencyId) {
    [output writeInt32:1 value:self.agencyId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasShortName) {
    [output writeString:5 value:self.shortName];
  }
  if (self.hasUrl) {
    [output writeString:6 value:self.url];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAgencyId) {
    size += computeInt32Size(1, self.agencyId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasShortName) {
    size += computeStringSize(5, self.shortName);
  }
  if (self.hasUrl) {
    size += computeStringSize(6, self.url);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Agency*) parseFromData:(NSData*) data {
  return (Agency*)[[[Agency builder] mergeFromData:data] build];
}
+ (Agency*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Agency*)[[[Agency builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Agency*) parseFromInputStream:(NSInputStream*) input {
  return (Agency*)[[[Agency builder] mergeFromInputStream:input] build];
}
+ (Agency*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Agency*)[[[Agency builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Agency*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Agency*)[[[Agency builder] mergeFromCodedInputStream:input] build];
}
+ (Agency*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Agency*)[[[Agency builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Agency_Builder*) builder {
  return [[[Agency_Builder alloc] init] autorelease];
}
+ (Agency_Builder*) builderWithPrototype:(Agency*) prototype {
  return [[Agency builder] mergeFrom:prototype];
}
- (Agency_Builder*) builder {
  return [Agency builder];
}
@end

@interface Agency_Builder()
@property (retain) Agency* result;
@end

@implementation Agency_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Agency alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Agency_Builder*) clear {
  self.result = [[[Agency alloc] init] autorelease];
  return self;
}
- (Agency_Builder*) clone {
  return [Agency builderWithPrototype:result];
}
- (Agency*) defaultInstance {
  return [Agency defaultInstance];
}
- (Agency*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Agency*) buildPartial {
  Agency* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Agency_Builder*) mergeFrom:(Agency*) other {
  if (other == [Agency defaultInstance]) {
    return self;
  }
  if (other.hasAgencyId) {
    [self setAgencyId:other.agencyId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasShortName) {
    [self setShortName:other.shortName];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Agency_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Agency_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAgencyId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 42: {
        [self setShortName:[input readString]];
        break;
      }
      case 50: {
        [self setUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAgencyId {
  return result.hasAgencyId;
}
- (int32_t) agencyId {
  return result.agencyId;
}
- (Agency_Builder*) setAgencyId:(int32_t) value {
  result.hasAgencyId = YES;
  result.agencyId = value;
  return self;
}
- (Agency_Builder*) clearAgencyId {
  result.hasAgencyId = NO;
  result.agencyId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Agency_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Agency_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasShortName {
  return result.hasShortName;
}
- (NSString*) shortName {
  return result.shortName;
}
- (Agency_Builder*) setShortName:(NSString*) value {
  result.hasShortName = YES;
  result.shortName = value;
  return self;
}
- (Agency_Builder*) clearShortName {
  result.hasShortName = NO;
  result.shortName = @"";
  return self;
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (Agency_Builder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (Agency_Builder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
@end

@interface RouteCity ()
@property int32_t routeCityId;
@property (retain) NSString* cityName;
@property (retain) NSString* countryName;
@property int32_t regionId;
@end

@implementation RouteCity

- (BOOL) hasRouteCityId {
  return !!hasRouteCityId_;
}
- (void) setHasRouteCityId:(BOOL) value {
  hasRouteCityId_ = !!value;
}
@synthesize routeCityId;
- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) value {
  hasCityName_ = !!value;
}
@synthesize cityName;
- (BOOL) hasCountryName {
  return !!hasCountryName_;
}
- (void) setHasCountryName:(BOOL) value {
  hasCountryName_ = !!value;
}
@synthesize countryName;
- (BOOL) hasRegionId {
  return !!hasRegionId_;
}
- (void) setHasRegionId:(BOOL) value {
  hasRegionId_ = !!value;
}
@synthesize regionId;
- (void) dealloc {
  self.cityName = nil;
  self.countryName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.routeCityId = 0;
    self.cityName = @"";
    self.countryName = @"";
    self.regionId = 0;
  }
  return self;
}
static RouteCity* defaultRouteCityInstance = nil;
+ (void) initialize {
  if (self == [RouteCity class]) {
    defaultRouteCityInstance = [[RouteCity alloc] init];
  }
}
+ (RouteCity*) defaultInstance {
  return defaultRouteCityInstance;
}
- (RouteCity*) defaultInstance {
  return defaultRouteCityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRouteCityId) {
    return NO;
  }
  if (!self.hasCityName) {
    return NO;
  }
  if (!self.hasCountryName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRouteCityId) {
    [output writeInt32:1 value:self.routeCityId];
  }
  if (self.hasCityName) {
    [output writeString:2 value:self.cityName];
  }
  if (self.hasCountryName) {
    [output writeString:3 value:self.countryName];
  }
  if (self.hasRegionId) {
    [output writeInt32:8 value:self.regionId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRouteCityId) {
    size += computeInt32Size(1, self.routeCityId);
  }
  if (self.hasCityName) {
    size += computeStringSize(2, self.cityName);
  }
  if (self.hasCountryName) {
    size += computeStringSize(3, self.countryName);
  }
  if (self.hasRegionId) {
    size += computeInt32Size(8, self.regionId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RouteCity*) parseFromData:(NSData*) data {
  return (RouteCity*)[[[RouteCity builder] mergeFromData:data] build];
}
+ (RouteCity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteCity*)[[[RouteCity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RouteCity*) parseFromInputStream:(NSInputStream*) input {
  return (RouteCity*)[[[RouteCity builder] mergeFromInputStream:input] build];
}
+ (RouteCity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteCity*)[[[RouteCity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RouteCity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RouteCity*)[[[RouteCity builder] mergeFromCodedInputStream:input] build];
}
+ (RouteCity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteCity*)[[[RouteCity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RouteCity_Builder*) builder {
  return [[[RouteCity_Builder alloc] init] autorelease];
}
+ (RouteCity_Builder*) builderWithPrototype:(RouteCity*) prototype {
  return [[RouteCity builder] mergeFrom:prototype];
}
- (RouteCity_Builder*) builder {
  return [RouteCity builder];
}
@end

@interface RouteCity_Builder()
@property (retain) RouteCity* result;
@end

@implementation RouteCity_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RouteCity alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RouteCity_Builder*) clear {
  self.result = [[[RouteCity alloc] init] autorelease];
  return self;
}
- (RouteCity_Builder*) clone {
  return [RouteCity builderWithPrototype:result];
}
- (RouteCity*) defaultInstance {
  return [RouteCity defaultInstance];
}
- (RouteCity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RouteCity*) buildPartial {
  RouteCity* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RouteCity_Builder*) mergeFrom:(RouteCity*) other {
  if (other == [RouteCity defaultInstance]) {
    return self;
  }
  if (other.hasRouteCityId) {
    [self setRouteCityId:other.routeCityId];
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  if (other.hasCountryName) {
    [self setCountryName:other.countryName];
  }
  if (other.hasRegionId) {
    [self setRegionId:other.regionId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RouteCity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RouteCity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRouteCityId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCityName:[input readString]];
        break;
      }
      case 26: {
        [self setCountryName:[input readString]];
        break;
      }
      case 64: {
        [self setRegionId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRouteCityId {
  return result.hasRouteCityId;
}
- (int32_t) routeCityId {
  return result.routeCityId;
}
- (RouteCity_Builder*) setRouteCityId:(int32_t) value {
  result.hasRouteCityId = YES;
  result.routeCityId = value;
  return self;
}
- (RouteCity_Builder*) clearRouteCityId {
  result.hasRouteCityId = NO;
  result.routeCityId = 0;
  return self;
}
- (BOOL) hasCityName {
  return result.hasCityName;
}
- (NSString*) cityName {
  return result.cityName;
}
- (RouteCity_Builder*) setCityName:(NSString*) value {
  result.hasCityName = YES;
  result.cityName = value;
  return self;
}
- (RouteCity_Builder*) clearCityName {
  result.hasCityName = NO;
  result.cityName = @"";
  return self;
}
- (BOOL) hasCountryName {
  return result.hasCountryName;
}
- (NSString*) countryName {
  return result.countryName;
}
- (RouteCity_Builder*) setCountryName:(NSString*) value {
  result.hasCountryName = YES;
  result.countryName = value;
  return self;
}
- (RouteCity_Builder*) clearCountryName {
  result.hasCountryName = NO;
  result.countryName = @"";
  return self;
}
- (BOOL) hasRegionId {
  return result.hasRegionId;
}
- (int32_t) regionId {
  return result.regionId;
}
- (RouteCity_Builder*) setRegionId:(int32_t) value {
  result.hasRegionId = YES;
  result.regionId = value;
  return self;
}
- (RouteCity_Builder*) clearRegionId {
  result.hasRegionId = NO;
  result.regionId = 0;
  return self;
}
@end

@interface Region ()
@property int32_t regionId;
@property (retain) NSString* regionName;
@end

@implementation Region

- (BOOL) hasRegionId {
  return !!hasRegionId_;
}
- (void) setHasRegionId:(BOOL) value {
  hasRegionId_ = !!value;
}
@synthesize regionId;
- (BOOL) hasRegionName {
  return !!hasRegionName_;
}
- (void) setHasRegionName:(BOOL) value {
  hasRegionName_ = !!value;
}
@synthesize regionName;
- (void) dealloc {
  self.regionName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.regionId = 0;
    self.regionName = @"";
  }
  return self;
}
static Region* defaultRegionInstance = nil;
+ (void) initialize {
  if (self == [Region class]) {
    defaultRegionInstance = [[Region alloc] init];
  }
}
+ (Region*) defaultInstance {
  return defaultRegionInstance;
}
- (Region*) defaultInstance {
  return defaultRegionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRegionId) {
    return NO;
  }
  if (!self.hasRegionName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRegionId) {
    [output writeInt32:1 value:self.regionId];
  }
  if (self.hasRegionName) {
    [output writeString:2 value:self.regionName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRegionId) {
    size += computeInt32Size(1, self.regionId);
  }
  if (self.hasRegionName) {
    size += computeStringSize(2, self.regionName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Region*) parseFromData:(NSData*) data {
  return (Region*)[[[Region builder] mergeFromData:data] build];
}
+ (Region*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Region*)[[[Region builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Region*) parseFromInputStream:(NSInputStream*) input {
  return (Region*)[[[Region builder] mergeFromInputStream:input] build];
}
+ (Region*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Region*)[[[Region builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Region*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Region*)[[[Region builder] mergeFromCodedInputStream:input] build];
}
+ (Region*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Region*)[[[Region builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Region_Builder*) builder {
  return [[[Region_Builder alloc] init] autorelease];
}
+ (Region_Builder*) builderWithPrototype:(Region*) prototype {
  return [[Region builder] mergeFrom:prototype];
}
- (Region_Builder*) builder {
  return [Region builder];
}
@end

@interface Region_Builder()
@property (retain) Region* result;
@end

@implementation Region_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Region alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Region_Builder*) clear {
  self.result = [[[Region alloc] init] autorelease];
  return self;
}
- (Region_Builder*) clone {
  return [Region builderWithPrototype:result];
}
- (Region*) defaultInstance {
  return [Region defaultInstance];
}
- (Region*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Region*) buildPartial {
  Region* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Region_Builder*) mergeFrom:(Region*) other {
  if (other == [Region defaultInstance]) {
    return self;
  }
  if (other.hasRegionId) {
    [self setRegionId:other.regionId];
  }
  if (other.hasRegionName) {
    [self setRegionName:other.regionName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Region_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Region_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRegionId:[input readInt32]];
        break;
      }
      case 18: {
        [self setRegionName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRegionId {
  return result.hasRegionId;
}
- (int32_t) regionId {
  return result.regionId;
}
- (Region_Builder*) setRegionId:(int32_t) value {
  result.hasRegionId = YES;
  result.regionId = value;
  return self;
}
- (Region_Builder*) clearRegionId {
  result.hasRegionId = NO;
  result.regionId = 0;
  return self;
}
- (BOOL) hasRegionName {
  return result.hasRegionName;
}
- (NSString*) regionName {
  return result.regionName;
}
- (Region_Builder*) setRegionName:(NSString*) value {
  result.hasRegionName = YES;
  result.regionName = value;
  return self;
}
- (Region_Builder*) clearRegionName {
  result.hasRegionName = NO;
  result.regionName = @"";
  return self;
}
@end

@interface CityGroup ()
@property int32_t groupId;
@property (retain) NSString* name;
@end

@implementation CityGroup

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) value {
  hasGroupId_ = !!value;
}
@synthesize groupId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.groupId = 0;
    self.name = @"";
  }
  return self;
}
static CityGroup* defaultCityGroupInstance = nil;
+ (void) initialize {
  if (self == [CityGroup class]) {
    defaultCityGroupInstance = [[CityGroup alloc] init];
  }
}
+ (CityGroup*) defaultInstance {
  return defaultCityGroupInstance;
}
- (CityGroup*) defaultInstance {
  return defaultCityGroupInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeInt32:1 value:self.groupId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGroupId) {
    size += computeInt32Size(1, self.groupId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityGroup*) parseFromData:(NSData*) data {
  return (CityGroup*)[[[CityGroup builder] mergeFromData:data] build];
}
+ (CityGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityGroup*)[[[CityGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityGroup*) parseFromInputStream:(NSInputStream*) input {
  return (CityGroup*)[[[CityGroup builder] mergeFromInputStream:input] build];
}
+ (CityGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityGroup*)[[[CityGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityGroup*)[[[CityGroup builder] mergeFromCodedInputStream:input] build];
}
+ (CityGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityGroup*)[[[CityGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityGroup_Builder*) builder {
  return [[[CityGroup_Builder alloc] init] autorelease];
}
+ (CityGroup_Builder*) builderWithPrototype:(CityGroup*) prototype {
  return [[CityGroup builder] mergeFrom:prototype];
}
- (CityGroup_Builder*) builder {
  return [CityGroup builder];
}
@end

@interface CityGroup_Builder()
@property (retain) CityGroup* result;
@end

@implementation CityGroup_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityGroup alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityGroup_Builder*) clear {
  self.result = [[[CityGroup alloc] init] autorelease];
  return self;
}
- (CityGroup_Builder*) clone {
  return [CityGroup builderWithPrototype:result];
}
- (CityGroup*) defaultInstance {
  return [CityGroup defaultInstance];
}
- (CityGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityGroup*) buildPartial {
  CityGroup* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityGroup_Builder*) mergeFrom:(CityGroup*) other {
  if (other == [CityGroup defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityGroup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityGroup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGroupId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return result.hasGroupId;
}
- (int32_t) groupId {
  return result.groupId;
}
- (CityGroup_Builder*) setGroupId:(int32_t) value {
  result.hasGroupId = YES;
  result.groupId = value;
  return self;
}
- (CityGroup_Builder*) clearGroupId {
  result.hasGroupId = NO;
  result.groupId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (CityGroup_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (CityGroup_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

@interface AirCity ()
@property int32_t cityId;
@property (retain) NSString* cityName;
@end

@implementation AirCity

- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) value {
  hasCityName_ = !!value;
}
@synthesize cityName;
- (void) dealloc {
  self.cityName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cityId = 0;
    self.cityName = @"";
  }
  return self;
}
static AirCity* defaultAirCityInstance = nil;
+ (void) initialize {
  if (self == [AirCity class]) {
    defaultAirCityInstance = [[AirCity alloc] init];
  }
}
+ (AirCity*) defaultInstance {
  return defaultAirCityInstance;
}
- (AirCity*) defaultInstance {
  return defaultAirCityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCityId) {
    return NO;
  }
  if (!self.hasCityName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCityId) {
    [output writeInt32:1 value:self.cityId];
  }
  if (self.hasCityName) {
    [output writeString:2 value:self.cityName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCityId) {
    size += computeInt32Size(1, self.cityId);
  }
  if (self.hasCityName) {
    size += computeStringSize(2, self.cityName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AirCity*) parseFromData:(NSData*) data {
  return (AirCity*)[[[AirCity builder] mergeFromData:data] build];
}
+ (AirCity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirCity*)[[[AirCity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AirCity*) parseFromInputStream:(NSInputStream*) input {
  return (AirCity*)[[[AirCity builder] mergeFromInputStream:input] build];
}
+ (AirCity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirCity*)[[[AirCity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AirCity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AirCity*)[[[AirCity builder] mergeFromCodedInputStream:input] build];
}
+ (AirCity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirCity*)[[[AirCity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AirCity_Builder*) builder {
  return [[[AirCity_Builder alloc] init] autorelease];
}
+ (AirCity_Builder*) builderWithPrototype:(AirCity*) prototype {
  return [[AirCity builder] mergeFrom:prototype];
}
- (AirCity_Builder*) builder {
  return [AirCity builder];
}
@end

@interface AirCity_Builder()
@property (retain) AirCity* result;
@end

@implementation AirCity_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AirCity alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AirCity_Builder*) clear {
  self.result = [[[AirCity alloc] init] autorelease];
  return self;
}
- (AirCity_Builder*) clone {
  return [AirCity builderWithPrototype:result];
}
- (AirCity*) defaultInstance {
  return [AirCity defaultInstance];
}
- (AirCity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AirCity*) buildPartial {
  AirCity* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AirCity_Builder*) mergeFrom:(AirCity*) other {
  if (other == [AirCity defaultInstance]) {
    return self;
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AirCity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AirCity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCityName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (AirCity_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (AirCity_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasCityName {
  return result.hasCityName;
}
- (NSString*) cityName {
  return result.cityName;
}
- (AirCity_Builder*) setCityName:(NSString*) value {
  result.hasCityName = YES;
  result.cityName = value;
  return self;
}
- (AirCity_Builder*) clearCityName {
  result.hasCityName = NO;
  result.cityName = @"";
  return self;
}
@end

@interface App ()
@property (retain) NSString* dataVersion;
@property (retain) NSMutableArray* mutableCitiesList;
@property (retain) NSMutableArray* mutableTestCitiesList;
@property (retain) NSMutableArray* mutablePlaceMetaDataListList;
@property (retain) NSMutableArray* mutableRecommendedAppsList;
@property (retain) NSMutableArray* mutableRegionsList;
@property (retain) NSMutableArray* mutableDepartCitiesList;
@property (retain) NSMutableArray* mutableDestinationCitiesList;
@property (retain) NSMutableArray* mutableRouteThemesList;
@property (retain) NSMutableArray* mutableRouteCategorysList;
@property (retain) NSMutableArray* mutableAgenciesList;
@property (retain) NSString* serviceTelephone;
@property (retain) NSMutableArray* mutableCityGroupsList;
@property (retain) NSMutableArray* mutableAirlinesList;
@property (retain) NSMutableArray* mutableNationalitysList;
@property (retain) NSMutableArray* mutableCardsList;
@property (retain) NSMutableArray* mutableBanksList;
@property (retain) NSMutableArray* mutableAirDepartCitiesList;
@end

@implementation App

- (BOOL) hasDataVersion {
  return !!hasDataVersion_;
}
- (void) setHasDataVersion:(BOOL) value {
  hasDataVersion_ = !!value;
}
@synthesize dataVersion;
@synthesize mutableCitiesList;
@synthesize mutableTestCitiesList;
@synthesize mutablePlaceMetaDataListList;
@synthesize mutableRecommendedAppsList;
@synthesize mutableRegionsList;
@synthesize mutableDepartCitiesList;
@synthesize mutableDestinationCitiesList;
@synthesize mutableRouteThemesList;
@synthesize mutableRouteCategorysList;
@synthesize mutableAgenciesList;
- (BOOL) hasServiceTelephone {
  return !!hasServiceTelephone_;
}
- (void) setHasServiceTelephone:(BOOL) value {
  hasServiceTelephone_ = !!value;
}
@synthesize serviceTelephone;
@synthesize mutableCityGroupsList;
@synthesize mutableAirlinesList;
@synthesize mutableNationalitysList;
@synthesize mutableCardsList;
@synthesize mutableBanksList;
@synthesize mutableAirDepartCitiesList;
- (void) dealloc {
  self.dataVersion = nil;
  self.mutableCitiesList = nil;
  self.mutableTestCitiesList = nil;
  self.mutablePlaceMetaDataListList = nil;
  self.mutableRecommendedAppsList = nil;
  self.mutableRegionsList = nil;
  self.mutableDepartCitiesList = nil;
  self.mutableDestinationCitiesList = nil;
  self.mutableRouteThemesList = nil;
  self.mutableRouteCategorysList = nil;
  self.mutableAgenciesList = nil;
  self.serviceTelephone = nil;
  self.mutableCityGroupsList = nil;
  self.mutableAirlinesList = nil;
  self.mutableNationalitysList = nil;
  self.mutableCardsList = nil;
  self.mutableBanksList = nil;
  self.mutableAirDepartCitiesList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.dataVersion = @"";
    self.serviceTelephone = @"";
  }
  return self;
}
static App* defaultAppInstance = nil;
+ (void) initialize {
  if (self == [App class]) {
    defaultAppInstance = [[App alloc] init];
  }
}
+ (App*) defaultInstance {
  return defaultAppInstance;
}
- (App*) defaultInstance {
  return defaultAppInstance;
}
- (NSArray*) citiesList {
  return mutableCitiesList;
}
- (City*) citiesAtIndex:(int32_t) index {
  id value = [mutableCitiesList objectAtIndex:index];
  return value;
}
- (NSArray*) testCitiesList {
  return mutableTestCitiesList;
}
- (City*) testCitiesAtIndex:(int32_t) index {
  id value = [mutableTestCitiesList objectAtIndex:index];
  return value;
}
- (NSArray*) placeMetaDataListList {
  return mutablePlaceMetaDataListList;
}
- (PlaceMeta*) placeMetaDataListAtIndex:(int32_t) index {
  id value = [mutablePlaceMetaDataListList objectAtIndex:index];
  return value;
}
- (NSArray*) recommendedAppsList {
  return mutableRecommendedAppsList;
}
- (RecommendedApp*) recommendedAppsAtIndex:(int32_t) index {
  id value = [mutableRecommendedAppsList objectAtIndex:index];
  return value;
}
- (NSArray*) regionsList {
  return mutableRegionsList;
}
- (Region*) regionsAtIndex:(int32_t) index {
  id value = [mutableRegionsList objectAtIndex:index];
  return value;
}
- (NSArray*) departCitiesList {
  return mutableDepartCitiesList;
}
- (RouteCity*) departCitiesAtIndex:(int32_t) index {
  id value = [mutableDepartCitiesList objectAtIndex:index];
  return value;
}
- (NSArray*) destinationCitiesList {
  return mutableDestinationCitiesList;
}
- (RouteCity*) destinationCitiesAtIndex:(int32_t) index {
  id value = [mutableDestinationCitiesList objectAtIndex:index];
  return value;
}
- (NSArray*) routeThemesList {
  return mutableRouteThemesList;
}
- (NameIdPair*) routeThemesAtIndex:(int32_t) index {
  id value = [mutableRouteThemesList objectAtIndex:index];
  return value;
}
- (NSArray*) routeCategorysList {
  return mutableRouteCategorysList;
}
- (NameIdPair*) routeCategorysAtIndex:(int32_t) index {
  id value = [mutableRouteCategorysList objectAtIndex:index];
  return value;
}
- (NSArray*) agenciesList {
  return mutableAgenciesList;
}
- (Agency*) agenciesAtIndex:(int32_t) index {
  id value = [mutableAgenciesList objectAtIndex:index];
  return value;
}
- (NSArray*) cityGroupsList {
  return mutableCityGroupsList;
}
- (CityGroup*) cityGroupsAtIndex:(int32_t) index {
  id value = [mutableCityGroupsList objectAtIndex:index];
  return value;
}
- (NSArray*) airlinesList {
  return mutableAirlinesList;
}
- (NameIdPair*) airlinesAtIndex:(int32_t) index {
  id value = [mutableAirlinesList objectAtIndex:index];
  return value;
}
- (NSArray*) nationalitysList {
  return mutableNationalitysList;
}
- (NameIdPair*) nationalitysAtIndex:(int32_t) index {
  id value = [mutableNationalitysList objectAtIndex:index];
  return value;
}
- (NSArray*) cardsList {
  return mutableCardsList;
}
- (NameIdPair*) cardsAtIndex:(int32_t) index {
  id value = [mutableCardsList objectAtIndex:index];
  return value;
}
- (NSArray*) banksList {
  return mutableBanksList;
}
- (NameIdPair*) banksAtIndex:(int32_t) index {
  id value = [mutableBanksList objectAtIndex:index];
  return value;
}
- (NSArray*) airDepartCitiesList {
  return mutableAirDepartCitiesList;
}
- (AirCity*) airDepartCitiesAtIndex:(int32_t) index {
  id value = [mutableAirDepartCitiesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasDataVersion) {
    return NO;
  }
  for (City* element in self.citiesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (City* element in self.testCitiesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PlaceMeta* element in self.placeMetaDataListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (RecommendedApp* element in self.recommendedAppsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Region* element in self.regionsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (RouteCity* element in self.departCitiesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (RouteCity* element in self.destinationCitiesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (NameIdPair* element in self.routeThemesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (NameIdPair* element in self.routeCategorysList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Agency* element in self.agenciesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (CityGroup* element in self.cityGroupsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (NameIdPair* element in self.airlinesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (NameIdPair* element in self.nationalitysList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (NameIdPair* element in self.cardsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (NameIdPair* element in self.banksList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (AirCity* element in self.airDepartCitiesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDataVersion) {
    [output writeString:1 value:self.dataVersion];
  }
  for (City* element in self.citiesList) {
    [output writeMessage:2 value:element];
  }
  for (City* element in self.testCitiesList) {
    [output writeMessage:3 value:element];
  }
  for (PlaceMeta* element in self.placeMetaDataListList) {
    [output writeMessage:5 value:element];
  }
  for (RecommendedApp* element in self.recommendedAppsList) {
    [output writeMessage:10 value:element];
  }
  for (Region* element in self.regionsList) {
    [output writeMessage:15 value:element];
  }
  for (RouteCity* element in self.departCitiesList) {
    [output writeMessage:20 value:element];
  }
  for (RouteCity* element in self.destinationCitiesList) {
    [output writeMessage:21 value:element];
  }
  for (NameIdPair* element in self.routeThemesList) {
    [output writeMessage:25 value:element];
  }
  for (NameIdPair* element in self.routeCategorysList) {
    [output writeMessage:26 value:element];
  }
  for (Agency* element in self.agenciesList) {
    [output writeMessage:30 value:element];
  }
  for (CityGroup* element in self.cityGroupsList) {
    [output writeMessage:80 value:element];
  }
  if (self.hasServiceTelephone) {
    [output writeString:100 value:self.serviceTelephone];
  }
  for (NameIdPair* element in self.airlinesList) {
    [output writeMessage:110 value:element];
  }
  for (NameIdPair* element in self.nationalitysList) {
    [output writeMessage:112 value:element];
  }
  for (NameIdPair* element in self.cardsList) {
    [output writeMessage:113 value:element];
  }
  for (NameIdPair* element in self.banksList) {
    [output writeMessage:114 value:element];
  }
  for (AirCity* element in self.airDepartCitiesList) {
    [output writeMessage:120 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDataVersion) {
    size += computeStringSize(1, self.dataVersion);
  }
  for (City* element in self.citiesList) {
    size += computeMessageSize(2, element);
  }
  for (City* element in self.testCitiesList) {
    size += computeMessageSize(3, element);
  }
  for (PlaceMeta* element in self.placeMetaDataListList) {
    size += computeMessageSize(5, element);
  }
  for (RecommendedApp* element in self.recommendedAppsList) {
    size += computeMessageSize(10, element);
  }
  for (Region* element in self.regionsList) {
    size += computeMessageSize(15, element);
  }
  for (RouteCity* element in self.departCitiesList) {
    size += computeMessageSize(20, element);
  }
  for (RouteCity* element in self.destinationCitiesList) {
    size += computeMessageSize(21, element);
  }
  for (NameIdPair* element in self.routeThemesList) {
    size += computeMessageSize(25, element);
  }
  for (NameIdPair* element in self.routeCategorysList) {
    size += computeMessageSize(26, element);
  }
  for (Agency* element in self.agenciesList) {
    size += computeMessageSize(30, element);
  }
  for (CityGroup* element in self.cityGroupsList) {
    size += computeMessageSize(80, element);
  }
  if (self.hasServiceTelephone) {
    size += computeStringSize(100, self.serviceTelephone);
  }
  for (NameIdPair* element in self.airlinesList) {
    size += computeMessageSize(110, element);
  }
  for (NameIdPair* element in self.nationalitysList) {
    size += computeMessageSize(112, element);
  }
  for (NameIdPair* element in self.cardsList) {
    size += computeMessageSize(113, element);
  }
  for (NameIdPair* element in self.banksList) {
    size += computeMessageSize(114, element);
  }
  for (AirCity* element in self.airDepartCitiesList) {
    size += computeMessageSize(120, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (App*) parseFromData:(NSData*) data {
  return (App*)[[[App builder] mergeFromData:data] build];
}
+ (App*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (App*) parseFromInputStream:(NSInputStream*) input {
  return (App*)[[[App builder] mergeFromInputStream:input] build];
}
+ (App*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (App*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (App*)[[[App builder] mergeFromCodedInputStream:input] build];
}
+ (App*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (App_Builder*) builder {
  return [[[App_Builder alloc] init] autorelease];
}
+ (App_Builder*) builderWithPrototype:(App*) prototype {
  return [[App builder] mergeFrom:prototype];
}
- (App_Builder*) builder {
  return [App builder];
}
@end

@interface App_Builder()
@property (retain) App* result;
@end

@implementation App_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[App alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (App_Builder*) clear {
  self.result = [[[App alloc] init] autorelease];
  return self;
}
- (App_Builder*) clone {
  return [App builderWithPrototype:result];
}
- (App*) defaultInstance {
  return [App defaultInstance];
}
- (App*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (App*) buildPartial {
  App* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (App_Builder*) mergeFrom:(App*) other {
  if (other == [App defaultInstance]) {
    return self;
  }
  if (other.hasDataVersion) {
    [self setDataVersion:other.dataVersion];
  }
  if (other.mutableCitiesList.count > 0) {
    if (result.mutableCitiesList == nil) {
      result.mutableCitiesList = [NSMutableArray array];
    }
    [result.mutableCitiesList addObjectsFromArray:other.mutableCitiesList];
  }
  if (other.mutableTestCitiesList.count > 0) {
    if (result.mutableTestCitiesList == nil) {
      result.mutableTestCitiesList = [NSMutableArray array];
    }
    [result.mutableTestCitiesList addObjectsFromArray:other.mutableTestCitiesList];
  }
  if (other.mutablePlaceMetaDataListList.count > 0) {
    if (result.mutablePlaceMetaDataListList == nil) {
      result.mutablePlaceMetaDataListList = [NSMutableArray array];
    }
    [result.mutablePlaceMetaDataListList addObjectsFromArray:other.mutablePlaceMetaDataListList];
  }
  if (other.mutableRecommendedAppsList.count > 0) {
    if (result.mutableRecommendedAppsList == nil) {
      result.mutableRecommendedAppsList = [NSMutableArray array];
    }
    [result.mutableRecommendedAppsList addObjectsFromArray:other.mutableRecommendedAppsList];
  }
  if (other.mutableRegionsList.count > 0) {
    if (result.mutableRegionsList == nil) {
      result.mutableRegionsList = [NSMutableArray array];
    }
    [result.mutableRegionsList addObjectsFromArray:other.mutableRegionsList];
  }
  if (other.mutableDepartCitiesList.count > 0) {
    if (result.mutableDepartCitiesList == nil) {
      result.mutableDepartCitiesList = [NSMutableArray array];
    }
    [result.mutableDepartCitiesList addObjectsFromArray:other.mutableDepartCitiesList];
  }
  if (other.mutableDestinationCitiesList.count > 0) {
    if (result.mutableDestinationCitiesList == nil) {
      result.mutableDestinationCitiesList = [NSMutableArray array];
    }
    [result.mutableDestinationCitiesList addObjectsFromArray:other.mutableDestinationCitiesList];
  }
  if (other.mutableRouteThemesList.count > 0) {
    if (result.mutableRouteThemesList == nil) {
      result.mutableRouteThemesList = [NSMutableArray array];
    }
    [result.mutableRouteThemesList addObjectsFromArray:other.mutableRouteThemesList];
  }
  if (other.mutableRouteCategorysList.count > 0) {
    if (result.mutableRouteCategorysList == nil) {
      result.mutableRouteCategorysList = [NSMutableArray array];
    }
    [result.mutableRouteCategorysList addObjectsFromArray:other.mutableRouteCategorysList];
  }
  if (other.mutableAgenciesList.count > 0) {
    if (result.mutableAgenciesList == nil) {
      result.mutableAgenciesList = [NSMutableArray array];
    }
    [result.mutableAgenciesList addObjectsFromArray:other.mutableAgenciesList];
  }
  if (other.hasServiceTelephone) {
    [self setServiceTelephone:other.serviceTelephone];
  }
  if (other.mutableCityGroupsList.count > 0) {
    if (result.mutableCityGroupsList == nil) {
      result.mutableCityGroupsList = [NSMutableArray array];
    }
    [result.mutableCityGroupsList addObjectsFromArray:other.mutableCityGroupsList];
  }
  if (other.mutableAirlinesList.count > 0) {
    if (result.mutableAirlinesList == nil) {
      result.mutableAirlinesList = [NSMutableArray array];
    }
    [result.mutableAirlinesList addObjectsFromArray:other.mutableAirlinesList];
  }
  if (other.mutableNationalitysList.count > 0) {
    if (result.mutableNationalitysList == nil) {
      result.mutableNationalitysList = [NSMutableArray array];
    }
    [result.mutableNationalitysList addObjectsFromArray:other.mutableNationalitysList];
  }
  if (other.mutableCardsList.count > 0) {
    if (result.mutableCardsList == nil) {
      result.mutableCardsList = [NSMutableArray array];
    }
    [result.mutableCardsList addObjectsFromArray:other.mutableCardsList];
  }
  if (other.mutableBanksList.count > 0) {
    if (result.mutableBanksList == nil) {
      result.mutableBanksList = [NSMutableArray array];
    }
    [result.mutableBanksList addObjectsFromArray:other.mutableBanksList];
  }
  if (other.mutableAirDepartCitiesList.count > 0) {
    if (result.mutableAirDepartCitiesList == nil) {
      result.mutableAirDepartCitiesList = [NSMutableArray array];
    }
    [result.mutableAirDepartCitiesList addObjectsFromArray:other.mutableAirDepartCitiesList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (App_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (App_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDataVersion:[input readString]];
        break;
      }
      case 18: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCities:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTestCities:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        PlaceMeta_Builder* subBuilder = [PlaceMeta builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlaceMetaDataList:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        RecommendedApp_Builder* subBuilder = [RecommendedApp builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecommendedApps:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        Region_Builder* subBuilder = [Region builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRegions:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        RouteCity_Builder* subBuilder = [RouteCity builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartCities:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        RouteCity_Builder* subBuilder = [RouteCity builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDestinationCities:[subBuilder buildPartial]];
        break;
      }
      case 202: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRouteThemes:[subBuilder buildPartial]];
        break;
      }
      case 210: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRouteCategorys:[subBuilder buildPartial]];
        break;
      }
      case 242: {
        Agency_Builder* subBuilder = [Agency builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAgencies:[subBuilder buildPartial]];
        break;
      }
      case 642: {
        CityGroup_Builder* subBuilder = [CityGroup builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCityGroups:[subBuilder buildPartial]];
        break;
      }
      case 802: {
        [self setServiceTelephone:[input readString]];
        break;
      }
      case 882: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAirlines:[subBuilder buildPartial]];
        break;
      }
      case 898: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNationalitys:[subBuilder buildPartial]];
        break;
      }
      case 906: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCards:[subBuilder buildPartial]];
        break;
      }
      case 914: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBanks:[subBuilder buildPartial]];
        break;
      }
      case 962: {
        AirCity_Builder* subBuilder = [AirCity builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAirDepartCities:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDataVersion {
  return result.hasDataVersion;
}
- (NSString*) dataVersion {
  return result.dataVersion;
}
- (App_Builder*) setDataVersion:(NSString*) value {
  result.hasDataVersion = YES;
  result.dataVersion = value;
  return self;
}
- (App_Builder*) clearDataVersion {
  result.hasDataVersion = NO;
  result.dataVersion = @"";
  return self;
}
- (NSArray*) citiesList {
  if (result.mutableCitiesList == nil) { return [NSArray array]; }
  return result.mutableCitiesList;
}
- (City*) citiesAtIndex:(int32_t) index {
  return [result citiesAtIndex:index];
}
- (App_Builder*) replaceCitiesAtIndex:(int32_t) index with:(City*) value {
  [result.mutableCitiesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllCities:(NSArray*) values {
  if (result.mutableCitiesList == nil) {
    result.mutableCitiesList = [NSMutableArray array];
  }
  [result.mutableCitiesList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearCitiesList {
  result.mutableCitiesList = nil;
  return self;
}
- (App_Builder*) addCities:(City*) value {
  if (result.mutableCitiesList == nil) {
    result.mutableCitiesList = [NSMutableArray array];
  }
  [result.mutableCitiesList addObject:value];
  return self;
}
- (NSArray*) testCitiesList {
  if (result.mutableTestCitiesList == nil) { return [NSArray array]; }
  return result.mutableTestCitiesList;
}
- (City*) testCitiesAtIndex:(int32_t) index {
  return [result testCitiesAtIndex:index];
}
- (App_Builder*) replaceTestCitiesAtIndex:(int32_t) index with:(City*) value {
  [result.mutableTestCitiesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllTestCities:(NSArray*) values {
  if (result.mutableTestCitiesList == nil) {
    result.mutableTestCitiesList = [NSMutableArray array];
  }
  [result.mutableTestCitiesList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearTestCitiesList {
  result.mutableTestCitiesList = nil;
  return self;
}
- (App_Builder*) addTestCities:(City*) value {
  if (result.mutableTestCitiesList == nil) {
    result.mutableTestCitiesList = [NSMutableArray array];
  }
  [result.mutableTestCitiesList addObject:value];
  return self;
}
- (NSArray*) placeMetaDataListList {
  if (result.mutablePlaceMetaDataListList == nil) { return [NSArray array]; }
  return result.mutablePlaceMetaDataListList;
}
- (PlaceMeta*) placeMetaDataListAtIndex:(int32_t) index {
  return [result placeMetaDataListAtIndex:index];
}
- (App_Builder*) replacePlaceMetaDataListAtIndex:(int32_t) index with:(PlaceMeta*) value {
  [result.mutablePlaceMetaDataListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllPlaceMetaDataList:(NSArray*) values {
  if (result.mutablePlaceMetaDataListList == nil) {
    result.mutablePlaceMetaDataListList = [NSMutableArray array];
  }
  [result.mutablePlaceMetaDataListList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearPlaceMetaDataListList {
  result.mutablePlaceMetaDataListList = nil;
  return self;
}
- (App_Builder*) addPlaceMetaDataList:(PlaceMeta*) value {
  if (result.mutablePlaceMetaDataListList == nil) {
    result.mutablePlaceMetaDataListList = [NSMutableArray array];
  }
  [result.mutablePlaceMetaDataListList addObject:value];
  return self;
}
- (NSArray*) recommendedAppsList {
  if (result.mutableRecommendedAppsList == nil) { return [NSArray array]; }
  return result.mutableRecommendedAppsList;
}
- (RecommendedApp*) recommendedAppsAtIndex:(int32_t) index {
  return [result recommendedAppsAtIndex:index];
}
- (App_Builder*) replaceRecommendedAppsAtIndex:(int32_t) index with:(RecommendedApp*) value {
  [result.mutableRecommendedAppsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllRecommendedApps:(NSArray*) values {
  if (result.mutableRecommendedAppsList == nil) {
    result.mutableRecommendedAppsList = [NSMutableArray array];
  }
  [result.mutableRecommendedAppsList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearRecommendedAppsList {
  result.mutableRecommendedAppsList = nil;
  return self;
}
- (App_Builder*) addRecommendedApps:(RecommendedApp*) value {
  if (result.mutableRecommendedAppsList == nil) {
    result.mutableRecommendedAppsList = [NSMutableArray array];
  }
  [result.mutableRecommendedAppsList addObject:value];
  return self;
}
- (NSArray*) regionsList {
  if (result.mutableRegionsList == nil) { return [NSArray array]; }
  return result.mutableRegionsList;
}
- (Region*) regionsAtIndex:(int32_t) index {
  return [result regionsAtIndex:index];
}
- (App_Builder*) replaceRegionsAtIndex:(int32_t) index with:(Region*) value {
  [result.mutableRegionsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllRegions:(NSArray*) values {
  if (result.mutableRegionsList == nil) {
    result.mutableRegionsList = [NSMutableArray array];
  }
  [result.mutableRegionsList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearRegionsList {
  result.mutableRegionsList = nil;
  return self;
}
- (App_Builder*) addRegions:(Region*) value {
  if (result.mutableRegionsList == nil) {
    result.mutableRegionsList = [NSMutableArray array];
  }
  [result.mutableRegionsList addObject:value];
  return self;
}
- (NSArray*) departCitiesList {
  if (result.mutableDepartCitiesList == nil) { return [NSArray array]; }
  return result.mutableDepartCitiesList;
}
- (RouteCity*) departCitiesAtIndex:(int32_t) index {
  return [result departCitiesAtIndex:index];
}
- (App_Builder*) replaceDepartCitiesAtIndex:(int32_t) index with:(RouteCity*) value {
  [result.mutableDepartCitiesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllDepartCities:(NSArray*) values {
  if (result.mutableDepartCitiesList == nil) {
    result.mutableDepartCitiesList = [NSMutableArray array];
  }
  [result.mutableDepartCitiesList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearDepartCitiesList {
  result.mutableDepartCitiesList = nil;
  return self;
}
- (App_Builder*) addDepartCities:(RouteCity*) value {
  if (result.mutableDepartCitiesList == nil) {
    result.mutableDepartCitiesList = [NSMutableArray array];
  }
  [result.mutableDepartCitiesList addObject:value];
  return self;
}
- (NSArray*) destinationCitiesList {
  if (result.mutableDestinationCitiesList == nil) { return [NSArray array]; }
  return result.mutableDestinationCitiesList;
}
- (RouteCity*) destinationCitiesAtIndex:(int32_t) index {
  return [result destinationCitiesAtIndex:index];
}
- (App_Builder*) replaceDestinationCitiesAtIndex:(int32_t) index with:(RouteCity*) value {
  [result.mutableDestinationCitiesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllDestinationCities:(NSArray*) values {
  if (result.mutableDestinationCitiesList == nil) {
    result.mutableDestinationCitiesList = [NSMutableArray array];
  }
  [result.mutableDestinationCitiesList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearDestinationCitiesList {
  result.mutableDestinationCitiesList = nil;
  return self;
}
- (App_Builder*) addDestinationCities:(RouteCity*) value {
  if (result.mutableDestinationCitiesList == nil) {
    result.mutableDestinationCitiesList = [NSMutableArray array];
  }
  [result.mutableDestinationCitiesList addObject:value];
  return self;
}
- (NSArray*) routeThemesList {
  if (result.mutableRouteThemesList == nil) { return [NSArray array]; }
  return result.mutableRouteThemesList;
}
- (NameIdPair*) routeThemesAtIndex:(int32_t) index {
  return [result routeThemesAtIndex:index];
}
- (App_Builder*) replaceRouteThemesAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableRouteThemesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllRouteThemes:(NSArray*) values {
  if (result.mutableRouteThemesList == nil) {
    result.mutableRouteThemesList = [NSMutableArray array];
  }
  [result.mutableRouteThemesList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearRouteThemesList {
  result.mutableRouteThemesList = nil;
  return self;
}
- (App_Builder*) addRouteThemes:(NameIdPair*) value {
  if (result.mutableRouteThemesList == nil) {
    result.mutableRouteThemesList = [NSMutableArray array];
  }
  [result.mutableRouteThemesList addObject:value];
  return self;
}
- (NSArray*) routeCategorysList {
  if (result.mutableRouteCategorysList == nil) { return [NSArray array]; }
  return result.mutableRouteCategorysList;
}
- (NameIdPair*) routeCategorysAtIndex:(int32_t) index {
  return [result routeCategorysAtIndex:index];
}
- (App_Builder*) replaceRouteCategorysAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableRouteCategorysList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllRouteCategorys:(NSArray*) values {
  if (result.mutableRouteCategorysList == nil) {
    result.mutableRouteCategorysList = [NSMutableArray array];
  }
  [result.mutableRouteCategorysList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearRouteCategorysList {
  result.mutableRouteCategorysList = nil;
  return self;
}
- (App_Builder*) addRouteCategorys:(NameIdPair*) value {
  if (result.mutableRouteCategorysList == nil) {
    result.mutableRouteCategorysList = [NSMutableArray array];
  }
  [result.mutableRouteCategorysList addObject:value];
  return self;
}
- (NSArray*) agenciesList {
  if (result.mutableAgenciesList == nil) { return [NSArray array]; }
  return result.mutableAgenciesList;
}
- (Agency*) agenciesAtIndex:(int32_t) index {
  return [result agenciesAtIndex:index];
}
- (App_Builder*) replaceAgenciesAtIndex:(int32_t) index with:(Agency*) value {
  [result.mutableAgenciesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllAgencies:(NSArray*) values {
  if (result.mutableAgenciesList == nil) {
    result.mutableAgenciesList = [NSMutableArray array];
  }
  [result.mutableAgenciesList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearAgenciesList {
  result.mutableAgenciesList = nil;
  return self;
}
- (App_Builder*) addAgencies:(Agency*) value {
  if (result.mutableAgenciesList == nil) {
    result.mutableAgenciesList = [NSMutableArray array];
  }
  [result.mutableAgenciesList addObject:value];
  return self;
}
- (BOOL) hasServiceTelephone {
  return result.hasServiceTelephone;
}
- (NSString*) serviceTelephone {
  return result.serviceTelephone;
}
- (App_Builder*) setServiceTelephone:(NSString*) value {
  result.hasServiceTelephone = YES;
  result.serviceTelephone = value;
  return self;
}
- (App_Builder*) clearServiceTelephone {
  result.hasServiceTelephone = NO;
  result.serviceTelephone = @"";
  return self;
}
- (NSArray*) cityGroupsList {
  if (result.mutableCityGroupsList == nil) { return [NSArray array]; }
  return result.mutableCityGroupsList;
}
- (CityGroup*) cityGroupsAtIndex:(int32_t) index {
  return [result cityGroupsAtIndex:index];
}
- (App_Builder*) replaceCityGroupsAtIndex:(int32_t) index with:(CityGroup*) value {
  [result.mutableCityGroupsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllCityGroups:(NSArray*) values {
  if (result.mutableCityGroupsList == nil) {
    result.mutableCityGroupsList = [NSMutableArray array];
  }
  [result.mutableCityGroupsList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearCityGroupsList {
  result.mutableCityGroupsList = nil;
  return self;
}
- (App_Builder*) addCityGroups:(CityGroup*) value {
  if (result.mutableCityGroupsList == nil) {
    result.mutableCityGroupsList = [NSMutableArray array];
  }
  [result.mutableCityGroupsList addObject:value];
  return self;
}
- (NSArray*) airlinesList {
  if (result.mutableAirlinesList == nil) { return [NSArray array]; }
  return result.mutableAirlinesList;
}
- (NameIdPair*) airlinesAtIndex:(int32_t) index {
  return [result airlinesAtIndex:index];
}
- (App_Builder*) replaceAirlinesAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableAirlinesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllAirlines:(NSArray*) values {
  if (result.mutableAirlinesList == nil) {
    result.mutableAirlinesList = [NSMutableArray array];
  }
  [result.mutableAirlinesList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearAirlinesList {
  result.mutableAirlinesList = nil;
  return self;
}
- (App_Builder*) addAirlines:(NameIdPair*) value {
  if (result.mutableAirlinesList == nil) {
    result.mutableAirlinesList = [NSMutableArray array];
  }
  [result.mutableAirlinesList addObject:value];
  return self;
}
- (NSArray*) nationalitysList {
  if (result.mutableNationalitysList == nil) { return [NSArray array]; }
  return result.mutableNationalitysList;
}
- (NameIdPair*) nationalitysAtIndex:(int32_t) index {
  return [result nationalitysAtIndex:index];
}
- (App_Builder*) replaceNationalitysAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableNationalitysList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllNationalitys:(NSArray*) values {
  if (result.mutableNationalitysList == nil) {
    result.mutableNationalitysList = [NSMutableArray array];
  }
  [result.mutableNationalitysList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearNationalitysList {
  result.mutableNationalitysList = nil;
  return self;
}
- (App_Builder*) addNationalitys:(NameIdPair*) value {
  if (result.mutableNationalitysList == nil) {
    result.mutableNationalitysList = [NSMutableArray array];
  }
  [result.mutableNationalitysList addObject:value];
  return self;
}
- (NSArray*) cardsList {
  if (result.mutableCardsList == nil) { return [NSArray array]; }
  return result.mutableCardsList;
}
- (NameIdPair*) cardsAtIndex:(int32_t) index {
  return [result cardsAtIndex:index];
}
- (App_Builder*) replaceCardsAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableCardsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllCards:(NSArray*) values {
  if (result.mutableCardsList == nil) {
    result.mutableCardsList = [NSMutableArray array];
  }
  [result.mutableCardsList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearCardsList {
  result.mutableCardsList = nil;
  return self;
}
- (App_Builder*) addCards:(NameIdPair*) value {
  if (result.mutableCardsList == nil) {
    result.mutableCardsList = [NSMutableArray array];
  }
  [result.mutableCardsList addObject:value];
  return self;
}
- (NSArray*) banksList {
  if (result.mutableBanksList == nil) { return [NSArray array]; }
  return result.mutableBanksList;
}
- (NameIdPair*) banksAtIndex:(int32_t) index {
  return [result banksAtIndex:index];
}
- (App_Builder*) replaceBanksAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableBanksList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllBanks:(NSArray*) values {
  if (result.mutableBanksList == nil) {
    result.mutableBanksList = [NSMutableArray array];
  }
  [result.mutableBanksList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearBanksList {
  result.mutableBanksList = nil;
  return self;
}
- (App_Builder*) addBanks:(NameIdPair*) value {
  if (result.mutableBanksList == nil) {
    result.mutableBanksList = [NSMutableArray array];
  }
  [result.mutableBanksList addObject:value];
  return self;
}
- (NSArray*) airDepartCitiesList {
  if (result.mutableAirDepartCitiesList == nil) { return [NSArray array]; }
  return result.mutableAirDepartCitiesList;
}
- (AirCity*) airDepartCitiesAtIndex:(int32_t) index {
  return [result airDepartCitiesAtIndex:index];
}
- (App_Builder*) replaceAirDepartCitiesAtIndex:(int32_t) index with:(AirCity*) value {
  [result.mutableAirDepartCitiesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllAirDepartCities:(NSArray*) values {
  if (result.mutableAirDepartCitiesList == nil) {
    result.mutableAirDepartCitiesList = [NSMutableArray array];
  }
  [result.mutableAirDepartCitiesList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearAirDepartCitiesList {
  result.mutableAirDepartCitiesList = nil;
  return self;
}
- (App_Builder*) addAirDepartCities:(AirCity*) value {
  if (result.mutableAirDepartCitiesList == nil) {
    result.mutableAirDepartCitiesList = [NSMutableArray array];
  }
  [result.mutableAirDepartCitiesList addObject:value];
  return self;
}
@end

