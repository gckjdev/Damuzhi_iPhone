// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "App.pb.h"

@implementation AppRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [AppRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface NameIdPair ()
@property (retain) NSString* name;
@property (retain) NSString* id;
@end

@implementation NameIdPair

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (void) dealloc {
  self.name = nil;
  self.id = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.id = @"";
  }
  return self;
}
static NameIdPair* defaultNameIdPairInstance = nil;
+ (void) initialize {
  if (self == [NameIdPair class]) {
    defaultNameIdPairInstance = [[NameIdPair alloc] init];
  }
}
+ (NameIdPair*) defaultInstance {
  return defaultNameIdPairInstance;
}
- (NameIdPair*) defaultInstance {
  return defaultNameIdPairInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasId) {
    [output writeString:2 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasId) {
    size += computeStringSize(2, self.id);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (NameIdPair*) parseFromData:(NSData*) data {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromData:data] build];
}
+ (NameIdPair*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NameIdPair*) parseFromInputStream:(NSInputStream*) input {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromInputStream:input] build];
}
+ (NameIdPair*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NameIdPair*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromCodedInputStream:input] build];
}
+ (NameIdPair*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NameIdPair*)[[[NameIdPair builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NameIdPair_Builder*) builder {
  return [[[NameIdPair_Builder alloc] init] autorelease];
}
+ (NameIdPair_Builder*) builderWithPrototype:(NameIdPair*) prototype {
  return [[NameIdPair builder] mergeFrom:prototype];
}
- (NameIdPair_Builder*) builder {
  return [NameIdPair builder];
}
@end

@interface NameIdPair_Builder()
@property (retain) NameIdPair* result;
@end

@implementation NameIdPair_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[NameIdPair alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (NameIdPair_Builder*) clear {
  self.result = [[[NameIdPair alloc] init] autorelease];
  return self;
}
- (NameIdPair_Builder*) clone {
  return [NameIdPair builderWithPrototype:result];
}
- (NameIdPair*) defaultInstance {
  return [NameIdPair defaultInstance];
}
- (NameIdPair*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NameIdPair*) buildPartial {
  NameIdPair* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (NameIdPair_Builder*) mergeFrom:(NameIdPair*) other {
  if (other == [NameIdPair defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NameIdPair_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NameIdPair_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (NameIdPair_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (NameIdPair_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (NameIdPair_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (NameIdPair_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
@end

@interface PlaceMeta ()
@property int32_t categoryId;
@property (retain) NSString* name;
@property (retain) NSMutableArray* mutableProvidedServiceListList;
@property (retain) NSMutableArray* mutableSubCategoryListList;
@end

@implementation PlaceMeta

- (BOOL) hasCategoryId {
  return !!hasCategoryId_;
}
- (void) setHasCategoryId:(BOOL) value {
  hasCategoryId_ = !!value;
}
@synthesize categoryId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
@synthesize mutableProvidedServiceListList;
@synthesize mutableSubCategoryListList;
- (void) dealloc {
  self.name = nil;
  self.mutableProvidedServiceListList = nil;
  self.mutableSubCategoryListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.categoryId = 0;
    self.name = @"";
  }
  return self;
}
static PlaceMeta* defaultPlaceMetaInstance = nil;
+ (void) initialize {
  if (self == [PlaceMeta class]) {
    defaultPlaceMetaInstance = [[PlaceMeta alloc] init];
  }
}
+ (PlaceMeta*) defaultInstance {
  return defaultPlaceMetaInstance;
}
- (PlaceMeta*) defaultInstance {
  return defaultPlaceMetaInstance;
}
- (NSArray*) providedServiceListList {
  return mutableProvidedServiceListList;
}
- (NameIdPair*) providedServiceListAtIndex:(int32_t) index {
  id value = [mutableProvidedServiceListList objectAtIndex:index];
  return value;
}
- (NSArray*) subCategoryListList {
  return mutableSubCategoryListList;
}
- (NameIdPair*) subCategoryListAtIndex:(int32_t) index {
  id value = [mutableSubCategoryListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasCategoryId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  for (NameIdPair* element in self.providedServiceListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (NameIdPair* element in self.subCategoryListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategoryId) {
    [output writeInt32:1 value:self.categoryId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  for (NameIdPair* element in self.providedServiceListList) {
    [output writeMessage:3 value:element];
  }
  for (NameIdPair* element in self.subCategoryListList) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCategoryId) {
    size += computeInt32Size(1, self.categoryId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  for (NameIdPair* element in self.providedServiceListList) {
    size += computeMessageSize(3, element);
  }
  for (NameIdPair* element in self.subCategoryListList) {
    size += computeMessageSize(4, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PlaceMeta*) parseFromData:(NSData*) data {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromData:data] build];
}
+ (PlaceMeta*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PlaceMeta*) parseFromInputStream:(NSInputStream*) input {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromInputStream:input] build];
}
+ (PlaceMeta*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaceMeta*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromCodedInputStream:input] build];
}
+ (PlaceMeta*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlaceMeta*)[[[PlaceMeta builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaceMeta_Builder*) builder {
  return [[[PlaceMeta_Builder alloc] init] autorelease];
}
+ (PlaceMeta_Builder*) builderWithPrototype:(PlaceMeta*) prototype {
  return [[PlaceMeta builder] mergeFrom:prototype];
}
- (PlaceMeta_Builder*) builder {
  return [PlaceMeta builder];
}
@end

@interface PlaceMeta_Builder()
@property (retain) PlaceMeta* result;
@end

@implementation PlaceMeta_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PlaceMeta alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PlaceMeta_Builder*) clear {
  self.result = [[[PlaceMeta alloc] init] autorelease];
  return self;
}
- (PlaceMeta_Builder*) clone {
  return [PlaceMeta builderWithPrototype:result];
}
- (PlaceMeta*) defaultInstance {
  return [PlaceMeta defaultInstance];
}
- (PlaceMeta*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PlaceMeta*) buildPartial {
  PlaceMeta* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PlaceMeta_Builder*) mergeFrom:(PlaceMeta*) other {
  if (other == [PlaceMeta defaultInstance]) {
    return self;
  }
  if (other.hasCategoryId) {
    [self setCategoryId:other.categoryId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.mutableProvidedServiceListList.count > 0) {
    if (result.mutableProvidedServiceListList == nil) {
      result.mutableProvidedServiceListList = [NSMutableArray array];
    }
    [result.mutableProvidedServiceListList addObjectsFromArray:other.mutableProvidedServiceListList];
  }
  if (other.mutableSubCategoryListList.count > 0) {
    if (result.mutableSubCategoryListList == nil) {
      result.mutableSubCategoryListList = [NSMutableArray array];
    }
    [result.mutableSubCategoryListList addObjectsFromArray:other.mutableSubCategoryListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PlaceMeta_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PlaceMeta_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCategoryId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProvidedServiceList:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        NameIdPair_Builder* subBuilder = [NameIdPair builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSubCategoryList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCategoryId {
  return result.hasCategoryId;
}
- (int32_t) categoryId {
  return result.categoryId;
}
- (PlaceMeta_Builder*) setCategoryId:(int32_t) value {
  result.hasCategoryId = YES;
  result.categoryId = value;
  return self;
}
- (PlaceMeta_Builder*) clearCategoryId {
  result.hasCategoryId = NO;
  result.categoryId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PlaceMeta_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PlaceMeta_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (NSArray*) providedServiceListList {
  if (result.mutableProvidedServiceListList == nil) { return [NSArray array]; }
  return result.mutableProvidedServiceListList;
}
- (NameIdPair*) providedServiceListAtIndex:(int32_t) index {
  return [result providedServiceListAtIndex:index];
}
- (PlaceMeta_Builder*) replaceProvidedServiceListAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableProvidedServiceListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PlaceMeta_Builder*) addAllProvidedServiceList:(NSArray*) values {
  if (result.mutableProvidedServiceListList == nil) {
    result.mutableProvidedServiceListList = [NSMutableArray array];
  }
  [result.mutableProvidedServiceListList addObjectsFromArray:values];
  return self;
}
- (PlaceMeta_Builder*) clearProvidedServiceListList {
  result.mutableProvidedServiceListList = nil;
  return self;
}
- (PlaceMeta_Builder*) addProvidedServiceList:(NameIdPair*) value {
  if (result.mutableProvidedServiceListList == nil) {
    result.mutableProvidedServiceListList = [NSMutableArray array];
  }
  [result.mutableProvidedServiceListList addObject:value];
  return self;
}
- (NSArray*) subCategoryListList {
  if (result.mutableSubCategoryListList == nil) { return [NSArray array]; }
  return result.mutableSubCategoryListList;
}
- (NameIdPair*) subCategoryListAtIndex:(int32_t) index {
  return [result subCategoryListAtIndex:index];
}
- (PlaceMeta_Builder*) replaceSubCategoryListAtIndex:(int32_t) index with:(NameIdPair*) value {
  [result.mutableSubCategoryListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PlaceMeta_Builder*) addAllSubCategoryList:(NSArray*) values {
  if (result.mutableSubCategoryListList == nil) {
    result.mutableSubCategoryListList = [NSMutableArray array];
  }
  [result.mutableSubCategoryListList addObjectsFromArray:values];
  return self;
}
- (PlaceMeta_Builder*) clearSubCategoryListList {
  result.mutableSubCategoryListList = nil;
  return self;
}
- (PlaceMeta_Builder*) addSubCategoryList:(NameIdPair*) value {
  if (result.mutableSubCategoryListList == nil) {
    result.mutableSubCategoryListList = [NSMutableArray array];
  }
  [result.mutableSubCategoryListList addObject:value];
  return self;
}
@end

@interface City ()
@property (retain) NSString* cityId;
@property (retain) NSString* cityName;
@property (retain) NSString* latestVersion;
@end

@implementation City

- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) value {
  hasCityName_ = !!value;
}
@synthesize cityName;
- (BOOL) hasLatestVersion {
  return !!hasLatestVersion_;
}
- (void) setHasLatestVersion:(BOOL) value {
  hasLatestVersion_ = !!value;
}
@synthesize latestVersion;
- (void) dealloc {
  self.cityId = nil;
  self.cityName = nil;
  self.latestVersion = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cityId = @"";
    self.cityName = @"";
    self.latestVersion = @"";
  }
  return self;
}
static City* defaultCityInstance = nil;
+ (void) initialize {
  if (self == [City class]) {
    defaultCityInstance = [[City alloc] init];
  }
}
+ (City*) defaultInstance {
  return defaultCityInstance;
}
- (City*) defaultInstance {
  return defaultCityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCityId) {
    return NO;
  }
  if (!self.hasCityName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCityId) {
    [output writeString:1 value:self.cityId];
  }
  if (self.hasCityName) {
    [output writeString:2 value:self.cityName];
  }
  if (self.hasLatestVersion) {
    [output writeString:3 value:self.latestVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCityId) {
    size += computeStringSize(1, self.cityId);
  }
  if (self.hasCityName) {
    size += computeStringSize(2, self.cityName);
  }
  if (self.hasLatestVersion) {
    size += computeStringSize(3, self.latestVersion);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (City*) parseFromData:(NSData*) data {
  return (City*)[[[City builder] mergeFromData:data] build];
}
+ (City*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (City*) parseFromInputStream:(NSInputStream*) input {
  return (City*)[[[City builder] mergeFromInputStream:input] build];
}
+ (City*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (City*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (City*)[[[City builder] mergeFromCodedInputStream:input] build];
}
+ (City*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (City_Builder*) builder {
  return [[[City_Builder alloc] init] autorelease];
}
+ (City_Builder*) builderWithPrototype:(City*) prototype {
  return [[City builder] mergeFrom:prototype];
}
- (City_Builder*) builder {
  return [City builder];
}
@end

@interface City_Builder()
@property (retain) City* result;
@end

@implementation City_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[City alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (City_Builder*) clear {
  self.result = [[[City alloc] init] autorelease];
  return self;
}
- (City_Builder*) clone {
  return [City builderWithPrototype:result];
}
- (City*) defaultInstance {
  return [City defaultInstance];
}
- (City*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (City*) buildPartial {
  City* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (City_Builder*) mergeFrom:(City*) other {
  if (other == [City defaultInstance]) {
    return self;
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  if (other.hasLatestVersion) {
    [self setLatestVersion:other.latestVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (City_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (City_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCityId:[input readString]];
        break;
      }
      case 18: {
        [self setCityName:[input readString]];
        break;
      }
      case 26: {
        [self setLatestVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (NSString*) cityId {
  return result.cityId;
}
- (City_Builder*) setCityId:(NSString*) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (City_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = @"";
  return self;
}
- (BOOL) hasCityName {
  return result.hasCityName;
}
- (NSString*) cityName {
  return result.cityName;
}
- (City_Builder*) setCityName:(NSString*) value {
  result.hasCityName = YES;
  result.cityName = value;
  return self;
}
- (City_Builder*) clearCityName {
  result.hasCityName = NO;
  result.cityName = @"";
  return self;
}
- (BOOL) hasLatestVersion {
  return result.hasLatestVersion;
}
- (NSString*) latestVersion {
  return result.latestVersion;
}
- (City_Builder*) setLatestVersion:(NSString*) value {
  result.hasLatestVersion = YES;
  result.latestVersion = value;
  return self;
}
- (City_Builder*) clearLatestVersion {
  result.hasLatestVersion = NO;
  result.latestVersion = @"";
  return self;
}
@end

@interface CityList ()
@property (retain) NSMutableArray* mutableCityListList;
@end

@implementation CityList

@synthesize mutableCityListList;
- (void) dealloc {
  self.mutableCityListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CityList* defaultCityListInstance = nil;
+ (void) initialize {
  if (self == [CityList class]) {
    defaultCityListInstance = [[CityList alloc] init];
  }
}
+ (CityList*) defaultInstance {
  return defaultCityListInstance;
}
- (CityList*) defaultInstance {
  return defaultCityListInstance;
}
- (NSArray*) cityListList {
  return mutableCityListList;
}
- (City*) cityListAtIndex:(int32_t) index {
  id value = [mutableCityListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (City* element in self.cityListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (City* element in self.cityListList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (City* element in self.cityListList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityList*) parseFromData:(NSData*) data {
  return (CityList*)[[[CityList builder] mergeFromData:data] build];
}
+ (CityList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityList*) parseFromInputStream:(NSInputStream*) input {
  return (CityList*)[[[CityList builder] mergeFromInputStream:input] build];
}
+ (CityList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityList*)[[[CityList builder] mergeFromCodedInputStream:input] build];
}
+ (CityList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityList_Builder*) builder {
  return [[[CityList_Builder alloc] init] autorelease];
}
+ (CityList_Builder*) builderWithPrototype:(CityList*) prototype {
  return [[CityList builder] mergeFrom:prototype];
}
- (CityList_Builder*) builder {
  return [CityList builder];
}
@end

@interface CityList_Builder()
@property (retain) CityList* result;
@end

@implementation CityList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityList_Builder*) clear {
  self.result = [[[CityList alloc] init] autorelease];
  return self;
}
- (CityList_Builder*) clone {
  return [CityList builderWithPrototype:result];
}
- (CityList*) defaultInstance {
  return [CityList defaultInstance];
}
- (CityList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityList*) buildPartial {
  CityList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityList_Builder*) mergeFrom:(CityList*) other {
  if (other == [CityList defaultInstance]) {
    return self;
  }
  if (other.mutableCityListList.count > 0) {
    if (result.mutableCityListList == nil) {
      result.mutableCityListList = [NSMutableArray array];
    }
    [result.mutableCityListList addObjectsFromArray:other.mutableCityListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCityList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) cityListList {
  if (result.mutableCityListList == nil) { return [NSArray array]; }
  return result.mutableCityListList;
}
- (City*) cityListAtIndex:(int32_t) index {
  return [result cityListAtIndex:index];
}
- (CityList_Builder*) replaceCityListAtIndex:(int32_t) index with:(City*) value {
  [result.mutableCityListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CityList_Builder*) addAllCityList:(NSArray*) values {
  if (result.mutableCityListList == nil) {
    result.mutableCityListList = [NSMutableArray array];
  }
  [result.mutableCityListList addObjectsFromArray:values];
  return self;
}
- (CityList_Builder*) clearCityListList {
  result.mutableCityListList = nil;
  return self;
}
- (CityList_Builder*) addCityList:(City*) value {
  if (result.mutableCityListList == nil) {
    result.mutableCityListList = [NSMutableArray array];
  }
  [result.mutableCityListList addObject:value];
  return self;
}
@end

@interface HelpInfo ()
@property (retain) NSString* helpHtml;
@end

@implementation HelpInfo

- (BOOL) hasHelpHtml {
  return !!hasHelpHtml_;
}
- (void) setHasHelpHtml:(BOOL) value {
  hasHelpHtml_ = !!value;
}
@synthesize helpHtml;
- (void) dealloc {
  self.helpHtml = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.helpHtml = @"";
  }
  return self;
}
static HelpInfo* defaultHelpInfoInstance = nil;
+ (void) initialize {
  if (self == [HelpInfo class]) {
    defaultHelpInfoInstance = [[HelpInfo alloc] init];
  }
}
+ (HelpInfo*) defaultInstance {
  return defaultHelpInfoInstance;
}
- (HelpInfo*) defaultInstance {
  return defaultHelpInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHelpHtml) {
    [output writeString:11 value:self.helpHtml];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasHelpHtml) {
    size += computeStringSize(11, self.helpHtml);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HelpInfo*) parseFromData:(NSData*) data {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromData:data] build];
}
+ (HelpInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo*) parseFromInputStream:(NSInputStream*) input {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromInputStream:input] build];
}
+ (HelpInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromCodedInputStream:input] build];
}
+ (HelpInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo_Builder*) builder {
  return [[[HelpInfo_Builder alloc] init] autorelease];
}
+ (HelpInfo_Builder*) builderWithPrototype:(HelpInfo*) prototype {
  return [[HelpInfo builder] mergeFrom:prototype];
}
- (HelpInfo_Builder*) builder {
  return [HelpInfo builder];
}
@end

@interface HelpInfo_Builder()
@property (retain) HelpInfo* result;
@end

@implementation HelpInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HelpInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (HelpInfo_Builder*) clear {
  self.result = [[[HelpInfo alloc] init] autorelease];
  return self;
}
- (HelpInfo_Builder*) clone {
  return [HelpInfo builderWithPrototype:result];
}
- (HelpInfo*) defaultInstance {
  return [HelpInfo defaultInstance];
}
- (HelpInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HelpInfo*) buildPartial {
  HelpInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HelpInfo_Builder*) mergeFrom:(HelpInfo*) other {
  if (other == [HelpInfo defaultInstance]) {
    return self;
  }
  if (other.hasHelpHtml) {
    [self setHelpHtml:other.helpHtml];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HelpInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HelpInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        [self setHelpHtml:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasHelpHtml {
  return result.hasHelpHtml;
}
- (NSString*) helpHtml {
  return result.helpHtml;
}
- (HelpInfo_Builder*) setHelpHtml:(NSString*) value {
  result.hasHelpHtml = YES;
  result.helpHtml = value;
  return self;
}
- (HelpInfo_Builder*) clearHelpHtml {
  result.hasHelpHtml = NO;
  result.helpHtml = @"";
  return self;
}
@end

@interface App ()
@property (retain) NSMutableArray* mutableCityListList;
@property (retain) NSMutableArray* mutableTestCityListList;
@property (retain) NSMutableArray* mutablePlaceMetaDataListList;
@property (retain) NSString* helpHtml;
@end

@implementation App

@synthesize mutableCityListList;
@synthesize mutableTestCityListList;
@synthesize mutablePlaceMetaDataListList;
- (BOOL) hasHelpHtml {
  return !!hasHelpHtml_;
}
- (void) setHasHelpHtml:(BOOL) value {
  hasHelpHtml_ = !!value;
}
@synthesize helpHtml;
- (void) dealloc {
  self.mutableCityListList = nil;
  self.mutableTestCityListList = nil;
  self.mutablePlaceMetaDataListList = nil;
  self.helpHtml = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.helpHtml = @"";
  }
  return self;
}
static App* defaultAppInstance = nil;
+ (void) initialize {
  if (self == [App class]) {
    defaultAppInstance = [[App alloc] init];
  }
}
+ (App*) defaultInstance {
  return defaultAppInstance;
}
- (App*) defaultInstance {
  return defaultAppInstance;
}
- (NSArray*) cityListList {
  return mutableCityListList;
}
- (City*) cityListAtIndex:(int32_t) index {
  id value = [mutableCityListList objectAtIndex:index];
  return value;
}
- (NSArray*) testCityListList {
  return mutableTestCityListList;
}
- (City*) testCityListAtIndex:(int32_t) index {
  id value = [mutableTestCityListList objectAtIndex:index];
  return value;
}
- (NSArray*) placeMetaDataListList {
  return mutablePlaceMetaDataListList;
}
- (PlaceMeta*) placeMetaDataListAtIndex:(int32_t) index {
  id value = [mutablePlaceMetaDataListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (City* element in self.cityListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (City* element in self.testCityListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PlaceMeta* element in self.placeMetaDataListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (City* element in self.cityListList) {
    [output writeMessage:1 value:element];
  }
  for (City* element in self.testCityListList) {
    [output writeMessage:2 value:element];
  }
  for (PlaceMeta* element in self.placeMetaDataListList) {
    [output writeMessage:3 value:element];
  }
  if (self.hasHelpHtml) {
    [output writeString:11 value:self.helpHtml];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (City* element in self.cityListList) {
    size += computeMessageSize(1, element);
  }
  for (City* element in self.testCityListList) {
    size += computeMessageSize(2, element);
  }
  for (PlaceMeta* element in self.placeMetaDataListList) {
    size += computeMessageSize(3, element);
  }
  if (self.hasHelpHtml) {
    size += computeStringSize(11, self.helpHtml);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (App*) parseFromData:(NSData*) data {
  return (App*)[[[App builder] mergeFromData:data] build];
}
+ (App*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (App*) parseFromInputStream:(NSInputStream*) input {
  return (App*)[[[App builder] mergeFromInputStream:input] build];
}
+ (App*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (App*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (App*)[[[App builder] mergeFromCodedInputStream:input] build];
}
+ (App*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (App_Builder*) builder {
  return [[[App_Builder alloc] init] autorelease];
}
+ (App_Builder*) builderWithPrototype:(App*) prototype {
  return [[App builder] mergeFrom:prototype];
}
- (App_Builder*) builder {
  return [App builder];
}
@end

@interface App_Builder()
@property (retain) App* result;
@end

@implementation App_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[App alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (App_Builder*) clear {
  self.result = [[[App alloc] init] autorelease];
  return self;
}
- (App_Builder*) clone {
  return [App builderWithPrototype:result];
}
- (App*) defaultInstance {
  return [App defaultInstance];
}
- (App*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (App*) buildPartial {
  App* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (App_Builder*) mergeFrom:(App*) other {
  if (other == [App defaultInstance]) {
    return self;
  }
  if (other.mutableCityListList.count > 0) {
    if (result.mutableCityListList == nil) {
      result.mutableCityListList = [NSMutableArray array];
    }
    [result.mutableCityListList addObjectsFromArray:other.mutableCityListList];
  }
  if (other.mutableTestCityListList.count > 0) {
    if (result.mutableTestCityListList == nil) {
      result.mutableTestCityListList = [NSMutableArray array];
    }
    [result.mutableTestCityListList addObjectsFromArray:other.mutableTestCityListList];
  }
  if (other.mutablePlaceMetaDataListList.count > 0) {
    if (result.mutablePlaceMetaDataListList == nil) {
      result.mutablePlaceMetaDataListList = [NSMutableArray array];
    }
    [result.mutablePlaceMetaDataListList addObjectsFromArray:other.mutablePlaceMetaDataListList];
  }
  if (other.hasHelpHtml) {
    [self setHelpHtml:other.helpHtml];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (App_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (App_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCityList:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTestCityList:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PlaceMeta_Builder* subBuilder = [PlaceMeta builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlaceMetaDataList:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setHelpHtml:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) cityListList {
  if (result.mutableCityListList == nil) { return [NSArray array]; }
  return result.mutableCityListList;
}
- (City*) cityListAtIndex:(int32_t) index {
  return [result cityListAtIndex:index];
}
- (App_Builder*) replaceCityListAtIndex:(int32_t) index with:(City*) value {
  [result.mutableCityListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllCityList:(NSArray*) values {
  if (result.mutableCityListList == nil) {
    result.mutableCityListList = [NSMutableArray array];
  }
  [result.mutableCityListList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearCityListList {
  result.mutableCityListList = nil;
  return self;
}
- (App_Builder*) addCityList:(City*) value {
  if (result.mutableCityListList == nil) {
    result.mutableCityListList = [NSMutableArray array];
  }
  [result.mutableCityListList addObject:value];
  return self;
}
- (NSArray*) testCityListList {
  if (result.mutableTestCityListList == nil) { return [NSArray array]; }
  return result.mutableTestCityListList;
}
- (City*) testCityListAtIndex:(int32_t) index {
  return [result testCityListAtIndex:index];
}
- (App_Builder*) replaceTestCityListAtIndex:(int32_t) index with:(City*) value {
  [result.mutableTestCityListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllTestCityList:(NSArray*) values {
  if (result.mutableTestCityListList == nil) {
    result.mutableTestCityListList = [NSMutableArray array];
  }
  [result.mutableTestCityListList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearTestCityListList {
  result.mutableTestCityListList = nil;
  return self;
}
- (App_Builder*) addTestCityList:(City*) value {
  if (result.mutableTestCityListList == nil) {
    result.mutableTestCityListList = [NSMutableArray array];
  }
  [result.mutableTestCityListList addObject:value];
  return self;
}
- (NSArray*) placeMetaDataListList {
  if (result.mutablePlaceMetaDataListList == nil) { return [NSArray array]; }
  return result.mutablePlaceMetaDataListList;
}
- (PlaceMeta*) placeMetaDataListAtIndex:(int32_t) index {
  return [result placeMetaDataListAtIndex:index];
}
- (App_Builder*) replacePlaceMetaDataListAtIndex:(int32_t) index with:(PlaceMeta*) value {
  [result.mutablePlaceMetaDataListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllPlaceMetaDataList:(NSArray*) values {
  if (result.mutablePlaceMetaDataListList == nil) {
    result.mutablePlaceMetaDataListList = [NSMutableArray array];
  }
  [result.mutablePlaceMetaDataListList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearPlaceMetaDataListList {
  result.mutablePlaceMetaDataListList = nil;
  return self;
}
- (App_Builder*) addPlaceMetaDataList:(PlaceMeta*) value {
  if (result.mutablePlaceMetaDataListList == nil) {
    result.mutablePlaceMetaDataListList = [NSMutableArray array];
  }
  [result.mutablePlaceMetaDataListList addObject:value];
  return self;
}
- (BOOL) hasHelpHtml {
  return result.hasHelpHtml;
}
- (NSString*) helpHtml {
  return result.helpHtml;
}
- (App_Builder*) setHelpHtml:(NSString*) value {
  result.hasHelpHtml = YES;
  result.helpHtml = value;
  return self;
}
- (App_Builder*) clearHelpHtml {
  result.hasHelpHtml = NO;
  result.helpHtml = @"";
  return self;
}
@end

