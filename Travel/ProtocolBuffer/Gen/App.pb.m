// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "App.pb.h"

@implementation AppRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [AppRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface City ()
@property (retain) NSString* cityId;
@property (retain) NSString* cityName;
@end

@implementation City

- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) value {
  hasCityName_ = !!value;
}
@synthesize cityName;
- (void) dealloc {
  self.cityId = nil;
  self.cityName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cityId = @"";
    self.cityName = @"";
  }
  return self;
}
static City* defaultCityInstance = nil;
+ (void) initialize {
  if (self == [City class]) {
    defaultCityInstance = [[City alloc] init];
  }
}
+ (City*) defaultInstance {
  return defaultCityInstance;
}
- (City*) defaultInstance {
  return defaultCityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCityId) {
    return NO;
  }
  if (!self.hasCityName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCityId) {
    [output writeString:1 value:self.cityId];
  }
  if (self.hasCityName) {
    [output writeString:2 value:self.cityName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCityId) {
    size += computeStringSize(1, self.cityId);
  }
  if (self.hasCityName) {
    size += computeStringSize(2, self.cityName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (City*) parseFromData:(NSData*) data {
  return (City*)[[[City builder] mergeFromData:data] build];
}
+ (City*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (City*) parseFromInputStream:(NSInputStream*) input {
  return (City*)[[[City builder] mergeFromInputStream:input] build];
}
+ (City*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (City*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (City*)[[[City builder] mergeFromCodedInputStream:input] build];
}
+ (City*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (City_Builder*) builder {
  return [[[City_Builder alloc] init] autorelease];
}
+ (City_Builder*) builderWithPrototype:(City*) prototype {
  return [[City builder] mergeFrom:prototype];
}
- (City_Builder*) builder {
  return [City builder];
}
@end

@interface City_Builder()
@property (retain) City* result;
@end

@implementation City_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[City alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (City_Builder*) clear {
  self.result = [[[City alloc] init] autorelease];
  return self;
}
- (City_Builder*) clone {
  return [City builderWithPrototype:result];
}
- (City*) defaultInstance {
  return [City defaultInstance];
}
- (City*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (City*) buildPartial {
  City* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (City_Builder*) mergeFrom:(City*) other {
  if (other == [City defaultInstance]) {
    return self;
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (City_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (City_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCityId:[input readString]];
        break;
      }
      case 18: {
        [self setCityName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (NSString*) cityId {
  return result.cityId;
}
- (City_Builder*) setCityId:(NSString*) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (City_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = @"";
  return self;
}
- (BOOL) hasCityName {
  return result.hasCityName;
}
- (NSString*) cityName {
  return result.cityName;
}
- (City_Builder*) setCityName:(NSString*) value {
  result.hasCityName = YES;
  result.cityName = value;
  return self;
}
- (City_Builder*) clearCityName {
  result.hasCityName = NO;
  result.cityName = @"";
  return self;
}
@end

@interface CityList ()
@property (retain) NSMutableArray* mutableCityListList;
@end

@implementation CityList

@synthesize mutableCityListList;
- (void) dealloc {
  self.mutableCityListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CityList* defaultCityListInstance = nil;
+ (void) initialize {
  if (self == [CityList class]) {
    defaultCityListInstance = [[CityList alloc] init];
  }
}
+ (CityList*) defaultInstance {
  return defaultCityListInstance;
}
- (CityList*) defaultInstance {
  return defaultCityListInstance;
}
- (NSArray*) cityListList {
  return mutableCityListList;
}
- (City*) cityListAtIndex:(int32_t) index {
  id value = [mutableCityListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (City* element in self.cityListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (City* element in self.cityListList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (City* element in self.cityListList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityList*) parseFromData:(NSData*) data {
  return (CityList*)[[[CityList builder] mergeFromData:data] build];
}
+ (CityList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityList*) parseFromInputStream:(NSInputStream*) input {
  return (CityList*)[[[CityList builder] mergeFromInputStream:input] build];
}
+ (CityList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityList*)[[[CityList builder] mergeFromCodedInputStream:input] build];
}
+ (CityList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityList*)[[[CityList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityList_Builder*) builder {
  return [[[CityList_Builder alloc] init] autorelease];
}
+ (CityList_Builder*) builderWithPrototype:(CityList*) prototype {
  return [[CityList builder] mergeFrom:prototype];
}
- (CityList_Builder*) builder {
  return [CityList builder];
}
@end

@interface CityList_Builder()
@property (retain) CityList* result;
@end

@implementation CityList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityList_Builder*) clear {
  self.result = [[[CityList alloc] init] autorelease];
  return self;
}
- (CityList_Builder*) clone {
  return [CityList builderWithPrototype:result];
}
- (CityList*) defaultInstance {
  return [CityList defaultInstance];
}
- (CityList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityList*) buildPartial {
  CityList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityList_Builder*) mergeFrom:(CityList*) other {
  if (other == [CityList defaultInstance]) {
    return self;
  }
  if (other.mutableCityListList.count > 0) {
    if (result.mutableCityListList == nil) {
      result.mutableCityListList = [NSMutableArray array];
    }
    [result.mutableCityListList addObjectsFromArray:other.mutableCityListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCityList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) cityListList {
  if (result.mutableCityListList == nil) { return [NSArray array]; }
  return result.mutableCityListList;
}
- (City*) cityListAtIndex:(int32_t) index {
  return [result cityListAtIndex:index];
}
- (CityList_Builder*) replaceCityListAtIndex:(int32_t) index with:(City*) value {
  [result.mutableCityListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CityList_Builder*) addAllCityList:(NSArray*) values {
  if (result.mutableCityListList == nil) {
    result.mutableCityListList = [NSMutableArray array];
  }
  [result.mutableCityListList addObjectsFromArray:values];
  return self;
}
- (CityList_Builder*) clearCityListList {
  result.mutableCityListList = nil;
  return self;
}
- (CityList_Builder*) addCityList:(City*) value {
  if (result.mutableCityListList == nil) {
    result.mutableCityListList = [NSMutableArray array];
  }
  [result.mutableCityListList addObject:value];
  return self;
}
@end

@interface HelpInfo ()
@property (retain) NSString* helpHtml;
@end

@implementation HelpInfo

- (BOOL) hasHelpHtml {
  return !!hasHelpHtml_;
}
- (void) setHasHelpHtml:(BOOL) value {
  hasHelpHtml_ = !!value;
}
@synthesize helpHtml;
- (void) dealloc {
  self.helpHtml = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.helpHtml = @"";
  }
  return self;
}
static HelpInfo* defaultHelpInfoInstance = nil;
+ (void) initialize {
  if (self == [HelpInfo class]) {
    defaultHelpInfoInstance = [[HelpInfo alloc] init];
  }
}
+ (HelpInfo*) defaultInstance {
  return defaultHelpInfoInstance;
}
- (HelpInfo*) defaultInstance {
  return defaultHelpInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHelpHtml) {
    [output writeString:11 value:self.helpHtml];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasHelpHtml) {
    size += computeStringSize(11, self.helpHtml);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HelpInfo*) parseFromData:(NSData*) data {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromData:data] build];
}
+ (HelpInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo*) parseFromInputStream:(NSInputStream*) input {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromInputStream:input] build];
}
+ (HelpInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromCodedInputStream:input] build];
}
+ (HelpInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelpInfo*)[[[HelpInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelpInfo_Builder*) builder {
  return [[[HelpInfo_Builder alloc] init] autorelease];
}
+ (HelpInfo_Builder*) builderWithPrototype:(HelpInfo*) prototype {
  return [[HelpInfo builder] mergeFrom:prototype];
}
- (HelpInfo_Builder*) builder {
  return [HelpInfo builder];
}
@end

@interface HelpInfo_Builder()
@property (retain) HelpInfo* result;
@end

@implementation HelpInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HelpInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (HelpInfo_Builder*) clear {
  self.result = [[[HelpInfo alloc] init] autorelease];
  return self;
}
- (HelpInfo_Builder*) clone {
  return [HelpInfo builderWithPrototype:result];
}
- (HelpInfo*) defaultInstance {
  return [HelpInfo defaultInstance];
}
- (HelpInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HelpInfo*) buildPartial {
  HelpInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HelpInfo_Builder*) mergeFrom:(HelpInfo*) other {
  if (other == [HelpInfo defaultInstance]) {
    return self;
  }
  if (other.hasHelpHtml) {
    [self setHelpHtml:other.helpHtml];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HelpInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HelpInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        [self setHelpHtml:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasHelpHtml {
  return result.hasHelpHtml;
}
- (NSString*) helpHtml {
  return result.helpHtml;
}
- (HelpInfo_Builder*) setHelpHtml:(NSString*) value {
  result.hasHelpHtml = YES;
  result.helpHtml = value;
  return self;
}
- (HelpInfo_Builder*) clearHelpHtml {
  result.hasHelpHtml = NO;
  result.helpHtml = @"";
  return self;
}
@end

@interface App ()
@property (retain) NSMutableArray* mutableCityListList;
@property (retain) NSMutableArray* mutableTestCityListList;
@property (retain) NSString* helpHtml;
@end

@implementation App

@synthesize mutableCityListList;
@synthesize mutableTestCityListList;
- (BOOL) hasHelpHtml {
  return !!hasHelpHtml_;
}
- (void) setHasHelpHtml:(BOOL) value {
  hasHelpHtml_ = !!value;
}
@synthesize helpHtml;
- (void) dealloc {
  self.mutableCityListList = nil;
  self.mutableTestCityListList = nil;
  self.helpHtml = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.helpHtml = @"";
  }
  return self;
}
static App* defaultAppInstance = nil;
+ (void) initialize {
  if (self == [App class]) {
    defaultAppInstance = [[App alloc] init];
  }
}
+ (App*) defaultInstance {
  return defaultAppInstance;
}
- (App*) defaultInstance {
  return defaultAppInstance;
}
- (NSArray*) cityListList {
  return mutableCityListList;
}
- (City*) cityListAtIndex:(int32_t) index {
  id value = [mutableCityListList objectAtIndex:index];
  return value;
}
- (NSArray*) testCityListList {
  return mutableTestCityListList;
}
- (City*) testCityListAtIndex:(int32_t) index {
  id value = [mutableTestCityListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (City* element in self.cityListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (City* element in self.testCityListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (City* element in self.cityListList) {
    [output writeMessage:1 value:element];
  }
  for (City* element in self.testCityListList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasHelpHtml) {
    [output writeString:11 value:self.helpHtml];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (City* element in self.cityListList) {
    size += computeMessageSize(1, element);
  }
  for (City* element in self.testCityListList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasHelpHtml) {
    size += computeStringSize(11, self.helpHtml);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (App*) parseFromData:(NSData*) data {
  return (App*)[[[App builder] mergeFromData:data] build];
}
+ (App*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (App*) parseFromInputStream:(NSInputStream*) input {
  return (App*)[[[App builder] mergeFromInputStream:input] build];
}
+ (App*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (App*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (App*)[[[App builder] mergeFromCodedInputStream:input] build];
}
+ (App*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (App_Builder*) builder {
  return [[[App_Builder alloc] init] autorelease];
}
+ (App_Builder*) builderWithPrototype:(App*) prototype {
  return [[App builder] mergeFrom:prototype];
}
- (App_Builder*) builder {
  return [App builder];
}
@end

@interface App_Builder()
@property (retain) App* result;
@end

@implementation App_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[App alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (App_Builder*) clear {
  self.result = [[[App alloc] init] autorelease];
  return self;
}
- (App_Builder*) clone {
  return [App builderWithPrototype:result];
}
- (App*) defaultInstance {
  return [App defaultInstance];
}
- (App*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (App*) buildPartial {
  App* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (App_Builder*) mergeFrom:(App*) other {
  if (other == [App defaultInstance]) {
    return self;
  }
  if (other.mutableCityListList.count > 0) {
    if (result.mutableCityListList == nil) {
      result.mutableCityListList = [NSMutableArray array];
    }
    [result.mutableCityListList addObjectsFromArray:other.mutableCityListList];
  }
  if (other.mutableTestCityListList.count > 0) {
    if (result.mutableTestCityListList == nil) {
      result.mutableTestCityListList = [NSMutableArray array];
    }
    [result.mutableTestCityListList addObjectsFromArray:other.mutableTestCityListList];
  }
  if (other.hasHelpHtml) {
    [self setHelpHtml:other.helpHtml];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (App_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (App_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCityList:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        City_Builder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTestCityList:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setHelpHtml:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) cityListList {
  if (result.mutableCityListList == nil) { return [NSArray array]; }
  return result.mutableCityListList;
}
- (City*) cityListAtIndex:(int32_t) index {
  return [result cityListAtIndex:index];
}
- (App_Builder*) replaceCityListAtIndex:(int32_t) index with:(City*) value {
  [result.mutableCityListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllCityList:(NSArray*) values {
  if (result.mutableCityListList == nil) {
    result.mutableCityListList = [NSMutableArray array];
  }
  [result.mutableCityListList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearCityListList {
  result.mutableCityListList = nil;
  return self;
}
- (App_Builder*) addCityList:(City*) value {
  if (result.mutableCityListList == nil) {
    result.mutableCityListList = [NSMutableArray array];
  }
  [result.mutableCityListList addObject:value];
  return self;
}
- (NSArray*) testCityListList {
  if (result.mutableTestCityListList == nil) { return [NSArray array]; }
  return result.mutableTestCityListList;
}
- (City*) testCityListAtIndex:(int32_t) index {
  return [result testCityListAtIndex:index];
}
- (App_Builder*) replaceTestCityListAtIndex:(int32_t) index with:(City*) value {
  [result.mutableTestCityListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addAllTestCityList:(NSArray*) values {
  if (result.mutableTestCityListList == nil) {
    result.mutableTestCityListList = [NSMutableArray array];
  }
  [result.mutableTestCityListList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearTestCityListList {
  result.mutableTestCityListList = nil;
  return self;
}
- (App_Builder*) addTestCityList:(City*) value {
  if (result.mutableTestCityListList == nil) {
    result.mutableTestCityListList = [NSMutableArray array];
  }
  [result.mutableTestCityListList addObject:value];
  return self;
}
- (BOOL) hasHelpHtml {
  return result.hasHelpHtml;
}
- (NSString*) helpHtml {
  return result.helpHtml;
}
- (App_Builder*) setHelpHtml:(NSString*) value {
  result.hasHelpHtml = YES;
  result.helpHtml = value;
  return self;
}
- (App_Builder*) clearHelpHtml {
  result.hasHelpHtml = NO;
  result.helpHtml = @"";
  return self;
}
@end

