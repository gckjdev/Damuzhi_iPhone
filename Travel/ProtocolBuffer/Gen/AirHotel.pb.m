// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "AirHotel.pb.h"

@implementation AirHotelRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [AirHotelRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [PlaceRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PersonAgeTypeIsValidValue(PersonAgeType value) {
  switch (value) {
    case PersonAgeTypePersonAgeAdult:
    case PersonAgeTypePersonAgeChild:
      return YES;
    default:
      return NO;
  }
}
BOOL PersonGenderIsValidValue(PersonGender value) {
  switch (value) {
    case PersonGenderPersonGenderMale:
    case PersonGenderPersonGenderFemale:
      return YES;
    default:
      return NO;
  }
}
BOOL AirPaymentStatusIsValidValue(AirPaymentStatus value) {
  switch (value) {
    case AirPaymentStatusAirPaymentNotPaid:
    case AirPaymentStatusAirPaymentFinish:
      return YES;
    default:
      return NO;
  }
}
@interface Person ()
@property (retain) NSString* name;
@property (retain) NSString* nameEnglish;
@property PersonAgeType ageType;
@property PersonGender gender;
@property int32_t nationalityId;
@property int32_t cardTypeId;
@property (retain) NSString* cardNumber;
@property int32_t cardValidDate;
@property int32_t birthday;
@property (retain) NSString* phone;
@end

@implementation Person

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasNameEnglish {
  return !!hasNameEnglish_;
}
- (void) setHasNameEnglish:(BOOL) value {
  hasNameEnglish_ = !!value;
}
@synthesize nameEnglish;
- (BOOL) hasAgeType {
  return !!hasAgeType_;
}
- (void) setHasAgeType:(BOOL) value {
  hasAgeType_ = !!value;
}
@synthesize ageType;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
@synthesize gender;
- (BOOL) hasNationalityId {
  return !!hasNationalityId_;
}
- (void) setHasNationalityId:(BOOL) value {
  hasNationalityId_ = !!value;
}
@synthesize nationalityId;
- (BOOL) hasCardTypeId {
  return !!hasCardTypeId_;
}
- (void) setHasCardTypeId:(BOOL) value {
  hasCardTypeId_ = !!value;
}
@synthesize cardTypeId;
- (BOOL) hasCardNumber {
  return !!hasCardNumber_;
}
- (void) setHasCardNumber:(BOOL) value {
  hasCardNumber_ = !!value;
}
@synthesize cardNumber;
- (BOOL) hasCardValidDate {
  return !!hasCardValidDate_;
}
- (void) setHasCardValidDate:(BOOL) value {
  hasCardValidDate_ = !!value;
}
@synthesize cardValidDate;
- (BOOL) hasBirthday {
  return !!hasBirthday_;
}
- (void) setHasBirthday:(BOOL) value {
  hasBirthday_ = !!value;
}
@synthesize birthday;
- (BOOL) hasPhone {
  return !!hasPhone_;
}
- (void) setHasPhone:(BOOL) value {
  hasPhone_ = !!value;
}
@synthesize phone;
- (void) dealloc {
  self.name = nil;
  self.nameEnglish = nil;
  self.cardNumber = nil;
  self.phone = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.nameEnglish = @"";
    self.ageType = PersonAgeTypePersonAgeAdult;
    self.gender = PersonGenderPersonGenderMale;
    self.nationalityId = 0;
    self.cardTypeId = 0;
    self.cardNumber = @"";
    self.cardValidDate = 0;
    self.birthday = 0;
    self.phone = @"";
  }
  return self;
}
static Person* defaultPersonInstance = nil;
+ (void) initialize {
  if (self == [Person class]) {
    defaultPersonInstance = [[Person alloc] init];
  }
}
+ (Person*) defaultInstance {
  return defaultPersonInstance;
}
- (Person*) defaultInstance {
  return defaultPersonInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasNameEnglish) {
    [output writeString:2 value:self.nameEnglish];
  }
  if (self.hasAgeType) {
    [output writeEnum:3 value:self.ageType];
  }
  if (self.hasGender) {
    [output writeEnum:4 value:self.gender];
  }
  if (self.hasNationalityId) {
    [output writeInt32:5 value:self.nationalityId];
  }
  if (self.hasCardTypeId) {
    [output writeInt32:6 value:self.cardTypeId];
  }
  if (self.hasCardNumber) {
    [output writeString:7 value:self.cardNumber];
  }
  if (self.hasCardValidDate) {
    [output writeInt32:8 value:self.cardValidDate];
  }
  if (self.hasBirthday) {
    [output writeInt32:9 value:self.birthday];
  }
  if (self.hasPhone) {
    [output writeString:10 value:self.phone];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasNameEnglish) {
    size += computeStringSize(2, self.nameEnglish);
  }
  if (self.hasAgeType) {
    size += computeEnumSize(3, self.ageType);
  }
  if (self.hasGender) {
    size += computeEnumSize(4, self.gender);
  }
  if (self.hasNationalityId) {
    size += computeInt32Size(5, self.nationalityId);
  }
  if (self.hasCardTypeId) {
    size += computeInt32Size(6, self.cardTypeId);
  }
  if (self.hasCardNumber) {
    size += computeStringSize(7, self.cardNumber);
  }
  if (self.hasCardValidDate) {
    size += computeInt32Size(8, self.cardValidDate);
  }
  if (self.hasBirthday) {
    size += computeInt32Size(9, self.birthday);
  }
  if (self.hasPhone) {
    size += computeStringSize(10, self.phone);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Person*) parseFromData:(NSData*) data {
  return (Person*)[[[Person builder] mergeFromData:data] build];
}
+ (Person*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Person*)[[[Person builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Person*) parseFromInputStream:(NSInputStream*) input {
  return (Person*)[[[Person builder] mergeFromInputStream:input] build];
}
+ (Person*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Person*)[[[Person builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Person*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Person*)[[[Person builder] mergeFromCodedInputStream:input] build];
}
+ (Person*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Person*)[[[Person builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Person_Builder*) builder {
  return [[[Person_Builder alloc] init] autorelease];
}
+ (Person_Builder*) builderWithPrototype:(Person*) prototype {
  return [[Person builder] mergeFrom:prototype];
}
- (Person_Builder*) builder {
  return [Person builder];
}
@end

@interface Person_Builder()
@property (retain) Person* result;
@end

@implementation Person_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Person alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Person_Builder*) clear {
  self.result = [[[Person alloc] init] autorelease];
  return self;
}
- (Person_Builder*) clone {
  return [Person builderWithPrototype:result];
}
- (Person*) defaultInstance {
  return [Person defaultInstance];
}
- (Person*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Person*) buildPartial {
  Person* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Person_Builder*) mergeFrom:(Person*) other {
  if (other == [Person defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasNameEnglish) {
    [self setNameEnglish:other.nameEnglish];
  }
  if (other.hasAgeType) {
    [self setAgeType:other.ageType];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasNationalityId) {
    [self setNationalityId:other.nationalityId];
  }
  if (other.hasCardTypeId) {
    [self setCardTypeId:other.cardTypeId];
  }
  if (other.hasCardNumber) {
    [self setCardNumber:other.cardNumber];
  }
  if (other.hasCardValidDate) {
    [self setCardValidDate:other.cardValidDate];
  }
  if (other.hasBirthday) {
    [self setBirthday:other.birthday];
  }
  if (other.hasPhone) {
    [self setPhone:other.phone];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Person_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Person_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setNameEnglish:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (PersonAgeTypeIsValidValue(value)) {
          [self setAgeType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (PersonGenderIsValidValue(value)) {
          [self setGender:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        [self setNationalityId:[input readInt32]];
        break;
      }
      case 48: {
        [self setCardTypeId:[input readInt32]];
        break;
      }
      case 58: {
        [self setCardNumber:[input readString]];
        break;
      }
      case 64: {
        [self setCardValidDate:[input readInt32]];
        break;
      }
      case 72: {
        [self setBirthday:[input readInt32]];
        break;
      }
      case 82: {
        [self setPhone:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Person_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Person_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasNameEnglish {
  return result.hasNameEnglish;
}
- (NSString*) nameEnglish {
  return result.nameEnglish;
}
- (Person_Builder*) setNameEnglish:(NSString*) value {
  result.hasNameEnglish = YES;
  result.nameEnglish = value;
  return self;
}
- (Person_Builder*) clearNameEnglish {
  result.hasNameEnglish = NO;
  result.nameEnglish = @"";
  return self;
}
- (BOOL) hasAgeType {
  return result.hasAgeType;
}
- (PersonAgeType) ageType {
  return result.ageType;
}
- (Person_Builder*) setAgeType:(PersonAgeType) value {
  result.hasAgeType = YES;
  result.ageType = value;
  return self;
}
- (Person_Builder*) clearAgeType {
  result.hasAgeType = NO;
  result.ageType = PersonAgeTypePersonAgeAdult;
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (PersonGender) gender {
  return result.gender;
}
- (Person_Builder*) setGender:(PersonGender) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (Person_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = PersonGenderPersonGenderMale;
  return self;
}
- (BOOL) hasNationalityId {
  return result.hasNationalityId;
}
- (int32_t) nationalityId {
  return result.nationalityId;
}
- (Person_Builder*) setNationalityId:(int32_t) value {
  result.hasNationalityId = YES;
  result.nationalityId = value;
  return self;
}
- (Person_Builder*) clearNationalityId {
  result.hasNationalityId = NO;
  result.nationalityId = 0;
  return self;
}
- (BOOL) hasCardTypeId {
  return result.hasCardTypeId;
}
- (int32_t) cardTypeId {
  return result.cardTypeId;
}
- (Person_Builder*) setCardTypeId:(int32_t) value {
  result.hasCardTypeId = YES;
  result.cardTypeId = value;
  return self;
}
- (Person_Builder*) clearCardTypeId {
  result.hasCardTypeId = NO;
  result.cardTypeId = 0;
  return self;
}
- (BOOL) hasCardNumber {
  return result.hasCardNumber;
}
- (NSString*) cardNumber {
  return result.cardNumber;
}
- (Person_Builder*) setCardNumber:(NSString*) value {
  result.hasCardNumber = YES;
  result.cardNumber = value;
  return self;
}
- (Person_Builder*) clearCardNumber {
  result.hasCardNumber = NO;
  result.cardNumber = @"";
  return self;
}
- (BOOL) hasCardValidDate {
  return result.hasCardValidDate;
}
- (int32_t) cardValidDate {
  return result.cardValidDate;
}
- (Person_Builder*) setCardValidDate:(int32_t) value {
  result.hasCardValidDate = YES;
  result.cardValidDate = value;
  return self;
}
- (Person_Builder*) clearCardValidDate {
  result.hasCardValidDate = NO;
  result.cardValidDate = 0;
  return self;
}
- (BOOL) hasBirthday {
  return result.hasBirthday;
}
- (int32_t) birthday {
  return result.birthday;
}
- (Person_Builder*) setBirthday:(int32_t) value {
  result.hasBirthday = YES;
  result.birthday = value;
  return self;
}
- (Person_Builder*) clearBirthday {
  result.hasBirthday = NO;
  result.birthday = 0;
  return self;
}
- (BOOL) hasPhone {
  return result.hasPhone;
}
- (NSString*) phone {
  return result.phone;
}
- (Person_Builder*) setPhone:(NSString*) value {
  result.hasPhone = YES;
  result.phone = value;
  return self;
}
- (Person_Builder*) clearPhone {
  result.hasPhone = NO;
  result.phone = @"";
  return self;
}
@end

@interface HotelOrderRoomInfo ()
@property int32_t roomId;
@property int32_t count;
@end

@implementation HotelOrderRoomInfo

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) value {
  hasRoomId_ = !!value;
}
@synthesize roomId;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value {
  hasCount_ = !!value;
}
@synthesize count;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.roomId = 0;
    self.count = 0;
  }
  return self;
}
static HotelOrderRoomInfo* defaultHotelOrderRoomInfoInstance = nil;
+ (void) initialize {
  if (self == [HotelOrderRoomInfo class]) {
    defaultHotelOrderRoomInfoInstance = [[HotelOrderRoomInfo alloc] init];
  }
}
+ (HotelOrderRoomInfo*) defaultInstance {
  return defaultHotelOrderRoomInfoInstance;
}
- (HotelOrderRoomInfo*) defaultInstance {
  return defaultHotelOrderRoomInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeInt32:1 value:self.roomId];
  }
  if (self.hasCount) {
    [output writeInt32:2 value:self.count];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRoomId) {
    size += computeInt32Size(1, self.roomId);
  }
  if (self.hasCount) {
    size += computeInt32Size(2, self.count);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HotelOrderRoomInfo*) parseFromData:(NSData*) data {
  return (HotelOrderRoomInfo*)[[[HotelOrderRoomInfo builder] mergeFromData:data] build];
}
+ (HotelOrderRoomInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HotelOrderRoomInfo*)[[[HotelOrderRoomInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HotelOrderRoomInfo*) parseFromInputStream:(NSInputStream*) input {
  return (HotelOrderRoomInfo*)[[[HotelOrderRoomInfo builder] mergeFromInputStream:input] build];
}
+ (HotelOrderRoomInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HotelOrderRoomInfo*)[[[HotelOrderRoomInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HotelOrderRoomInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HotelOrderRoomInfo*)[[[HotelOrderRoomInfo builder] mergeFromCodedInputStream:input] build];
}
+ (HotelOrderRoomInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HotelOrderRoomInfo*)[[[HotelOrderRoomInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HotelOrderRoomInfo_Builder*) builder {
  return [[[HotelOrderRoomInfo_Builder alloc] init] autorelease];
}
+ (HotelOrderRoomInfo_Builder*) builderWithPrototype:(HotelOrderRoomInfo*) prototype {
  return [[HotelOrderRoomInfo builder] mergeFrom:prototype];
}
- (HotelOrderRoomInfo_Builder*) builder {
  return [HotelOrderRoomInfo builder];
}
@end

@interface HotelOrderRoomInfo_Builder()
@property (retain) HotelOrderRoomInfo* result;
@end

@implementation HotelOrderRoomInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HotelOrderRoomInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (HotelOrderRoomInfo_Builder*) clear {
  self.result = [[[HotelOrderRoomInfo alloc] init] autorelease];
  return self;
}
- (HotelOrderRoomInfo_Builder*) clone {
  return [HotelOrderRoomInfo builderWithPrototype:result];
}
- (HotelOrderRoomInfo*) defaultInstance {
  return [HotelOrderRoomInfo defaultInstance];
}
- (HotelOrderRoomInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HotelOrderRoomInfo*) buildPartial {
  HotelOrderRoomInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HotelOrderRoomInfo_Builder*) mergeFrom:(HotelOrderRoomInfo*) other {
  if (other == [HotelOrderRoomInfo defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HotelOrderRoomInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HotelOrderRoomInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readInt32]];
        break;
      }
      case 16: {
        [self setCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return result.hasRoomId;
}
- (int32_t) roomId {
  return result.roomId;
}
- (HotelOrderRoomInfo_Builder*) setRoomId:(int32_t) value {
  result.hasRoomId = YES;
  result.roomId = value;
  return self;
}
- (HotelOrderRoomInfo_Builder*) clearRoomId {
  result.hasRoomId = NO;
  result.roomId = 0;
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (int32_t) count {
  return result.count;
}
- (HotelOrderRoomInfo_Builder*) setCount:(int32_t) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (HotelOrderRoomInfo_Builder*) clearCount {
  result.hasCount = NO;
  result.count = 0;
  return self;
}
@end

@interface HotelOrder ()
@property int32_t checkInDate;
@property int32_t checkOutDate;
@property int32_t hotelId;
@property (retain) NSMutableArray* mutableRoomInfosList;
@property (retain) NSMutableArray* mutableCheckInPersonsList;
@property (retain) Place* hotel;
@end

@implementation HotelOrder

- (BOOL) hasCheckInDate {
  return !!hasCheckInDate_;
}
- (void) setHasCheckInDate:(BOOL) value {
  hasCheckInDate_ = !!value;
}
@synthesize checkInDate;
- (BOOL) hasCheckOutDate {
  return !!hasCheckOutDate_;
}
- (void) setHasCheckOutDate:(BOOL) value {
  hasCheckOutDate_ = !!value;
}
@synthesize checkOutDate;
- (BOOL) hasHotelId {
  return !!hasHotelId_;
}
- (void) setHasHotelId:(BOOL) value {
  hasHotelId_ = !!value;
}
@synthesize hotelId;
@synthesize mutableRoomInfosList;
@synthesize mutableCheckInPersonsList;
- (BOOL) hasHotel {
  return !!hasHotel_;
}
- (void) setHasHotel:(BOOL) value {
  hasHotel_ = !!value;
}
@synthesize hotel;
- (void) dealloc {
  self.mutableRoomInfosList = nil;
  self.mutableCheckInPersonsList = nil;
  self.hotel = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.checkInDate = 0;
    self.checkOutDate = 0;
    self.hotelId = 0;
    self.hotel = [Place defaultInstance];
  }
  return self;
}
static HotelOrder* defaultHotelOrderInstance = nil;
+ (void) initialize {
  if (self == [HotelOrder class]) {
    defaultHotelOrderInstance = [[HotelOrder alloc] init];
  }
}
+ (HotelOrder*) defaultInstance {
  return defaultHotelOrderInstance;
}
- (HotelOrder*) defaultInstance {
  return defaultHotelOrderInstance;
}
- (NSArray*) roomInfosList {
  return mutableRoomInfosList;
}
- (HotelOrderRoomInfo*) roomInfosAtIndex:(int32_t) index {
  id value = [mutableRoomInfosList objectAtIndex:index];
  return value;
}
- (NSArray*) checkInPersonsList {
  return mutableCheckInPersonsList;
}
- (Person*) checkInPersonsAtIndex:(int32_t) index {
  id value = [mutableCheckInPersonsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasCheckInDate) {
    return NO;
  }
  if (!self.hasCheckOutDate) {
    return NO;
  }
  if (!self.hasHotelId) {
    return NO;
  }
  for (HotelOrderRoomInfo* element in self.roomInfosList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasHotel) {
    if (!self.hotel.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCheckInDate) {
    [output writeInt32:1 value:self.checkInDate];
  }
  if (self.hasCheckOutDate) {
    [output writeInt32:2 value:self.checkOutDate];
  }
  if (self.hasHotelId) {
    [output writeInt32:3 value:self.hotelId];
  }
  for (HotelOrderRoomInfo* element in self.roomInfosList) {
    [output writeMessage:4 value:element];
  }
  for (Person* element in self.checkInPersonsList) {
    [output writeMessage:5 value:element];
  }
  if (self.hasHotel) {
    [output writeMessage:10 value:self.hotel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCheckInDate) {
    size += computeInt32Size(1, self.checkInDate);
  }
  if (self.hasCheckOutDate) {
    size += computeInt32Size(2, self.checkOutDate);
  }
  if (self.hasHotelId) {
    size += computeInt32Size(3, self.hotelId);
  }
  for (HotelOrderRoomInfo* element in self.roomInfosList) {
    size += computeMessageSize(4, element);
  }
  for (Person* element in self.checkInPersonsList) {
    size += computeMessageSize(5, element);
  }
  if (self.hasHotel) {
    size += computeMessageSize(10, self.hotel);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HotelOrder*) parseFromData:(NSData*) data {
  return (HotelOrder*)[[[HotelOrder builder] mergeFromData:data] build];
}
+ (HotelOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HotelOrder*)[[[HotelOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HotelOrder*) parseFromInputStream:(NSInputStream*) input {
  return (HotelOrder*)[[[HotelOrder builder] mergeFromInputStream:input] build];
}
+ (HotelOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HotelOrder*)[[[HotelOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HotelOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HotelOrder*)[[[HotelOrder builder] mergeFromCodedInputStream:input] build];
}
+ (HotelOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HotelOrder*)[[[HotelOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HotelOrder_Builder*) builder {
  return [[[HotelOrder_Builder alloc] init] autorelease];
}
+ (HotelOrder_Builder*) builderWithPrototype:(HotelOrder*) prototype {
  return [[HotelOrder builder] mergeFrom:prototype];
}
- (HotelOrder_Builder*) builder {
  return [HotelOrder builder];
}
@end

@interface HotelOrder_Builder()
@property (retain) HotelOrder* result;
@end

@implementation HotelOrder_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HotelOrder alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (HotelOrder_Builder*) clear {
  self.result = [[[HotelOrder alloc] init] autorelease];
  return self;
}
- (HotelOrder_Builder*) clone {
  return [HotelOrder builderWithPrototype:result];
}
- (HotelOrder*) defaultInstance {
  return [HotelOrder defaultInstance];
}
- (HotelOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HotelOrder*) buildPartial {
  HotelOrder* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HotelOrder_Builder*) mergeFrom:(HotelOrder*) other {
  if (other == [HotelOrder defaultInstance]) {
    return self;
  }
  if (other.hasCheckInDate) {
    [self setCheckInDate:other.checkInDate];
  }
  if (other.hasCheckOutDate) {
    [self setCheckOutDate:other.checkOutDate];
  }
  if (other.hasHotelId) {
    [self setHotelId:other.hotelId];
  }
  if (other.mutableRoomInfosList.count > 0) {
    if (result.mutableRoomInfosList == nil) {
      result.mutableRoomInfosList = [NSMutableArray array];
    }
    [result.mutableRoomInfosList addObjectsFromArray:other.mutableRoomInfosList];
  }
  if (other.mutableCheckInPersonsList.count > 0) {
    if (result.mutableCheckInPersonsList == nil) {
      result.mutableCheckInPersonsList = [NSMutableArray array];
    }
    [result.mutableCheckInPersonsList addObjectsFromArray:other.mutableCheckInPersonsList];
  }
  if (other.hasHotel) {
    [self mergeHotel:other.hotel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HotelOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HotelOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCheckInDate:[input readInt32]];
        break;
      }
      case 16: {
        [self setCheckOutDate:[input readInt32]];
        break;
      }
      case 24: {
        [self setHotelId:[input readInt32]];
        break;
      }
      case 34: {
        HotelOrderRoomInfo_Builder* subBuilder = [HotelOrderRoomInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRoomInfos:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        Person_Builder* subBuilder = [Person builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCheckInPersons:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        Place_Builder* subBuilder = [Place builder];
        if (self.hasHotel) {
          [subBuilder mergeFrom:self.hotel];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHotel:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCheckInDate {
  return result.hasCheckInDate;
}
- (int32_t) checkInDate {
  return result.checkInDate;
}
- (HotelOrder_Builder*) setCheckInDate:(int32_t) value {
  result.hasCheckInDate = YES;
  result.checkInDate = value;
  return self;
}
- (HotelOrder_Builder*) clearCheckInDate {
  result.hasCheckInDate = NO;
  result.checkInDate = 0;
  return self;
}
- (BOOL) hasCheckOutDate {
  return result.hasCheckOutDate;
}
- (int32_t) checkOutDate {
  return result.checkOutDate;
}
- (HotelOrder_Builder*) setCheckOutDate:(int32_t) value {
  result.hasCheckOutDate = YES;
  result.checkOutDate = value;
  return self;
}
- (HotelOrder_Builder*) clearCheckOutDate {
  result.hasCheckOutDate = NO;
  result.checkOutDate = 0;
  return self;
}
- (BOOL) hasHotelId {
  return result.hasHotelId;
}
- (int32_t) hotelId {
  return result.hotelId;
}
- (HotelOrder_Builder*) setHotelId:(int32_t) value {
  result.hasHotelId = YES;
  result.hotelId = value;
  return self;
}
- (HotelOrder_Builder*) clearHotelId {
  result.hasHotelId = NO;
  result.hotelId = 0;
  return self;
}
- (NSArray*) roomInfosList {
  if (result.mutableRoomInfosList == nil) { return [NSArray array]; }
  return result.mutableRoomInfosList;
}
- (HotelOrderRoomInfo*) roomInfosAtIndex:(int32_t) index {
  return [result roomInfosAtIndex:index];
}
- (HotelOrder_Builder*) replaceRoomInfosAtIndex:(int32_t) index with:(HotelOrderRoomInfo*) value {
  [result.mutableRoomInfosList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (HotelOrder_Builder*) addAllRoomInfos:(NSArray*) values {
  if (result.mutableRoomInfosList == nil) {
    result.mutableRoomInfosList = [NSMutableArray array];
  }
  [result.mutableRoomInfosList addObjectsFromArray:values];
  return self;
}
- (HotelOrder_Builder*) clearRoomInfosList {
  result.mutableRoomInfosList = nil;
  return self;
}
- (HotelOrder_Builder*) addRoomInfos:(HotelOrderRoomInfo*) value {
  if (result.mutableRoomInfosList == nil) {
    result.mutableRoomInfosList = [NSMutableArray array];
  }
  [result.mutableRoomInfosList addObject:value];
  return self;
}
- (NSArray*) checkInPersonsList {
  if (result.mutableCheckInPersonsList == nil) { return [NSArray array]; }
  return result.mutableCheckInPersonsList;
}
- (Person*) checkInPersonsAtIndex:(int32_t) index {
  return [result checkInPersonsAtIndex:index];
}
- (HotelOrder_Builder*) replaceCheckInPersonsAtIndex:(int32_t) index with:(Person*) value {
  [result.mutableCheckInPersonsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (HotelOrder_Builder*) addAllCheckInPersons:(NSArray*) values {
  if (result.mutableCheckInPersonsList == nil) {
    result.mutableCheckInPersonsList = [NSMutableArray array];
  }
  [result.mutableCheckInPersonsList addObjectsFromArray:values];
  return self;
}
- (HotelOrder_Builder*) clearCheckInPersonsList {
  result.mutableCheckInPersonsList = nil;
  return self;
}
- (HotelOrder_Builder*) addCheckInPersons:(Person*) value {
  if (result.mutableCheckInPersonsList == nil) {
    result.mutableCheckInPersonsList = [NSMutableArray array];
  }
  [result.mutableCheckInPersonsList addObject:value];
  return self;
}
- (BOOL) hasHotel {
  return result.hasHotel;
}
- (Place*) hotel {
  return result.hotel;
}
- (HotelOrder_Builder*) setHotel:(Place*) value {
  result.hasHotel = YES;
  result.hotel = value;
  return self;
}
- (HotelOrder_Builder*) setHotelBuilder:(Place_Builder*) builderForValue {
  return [self setHotel:[builderForValue build]];
}
- (HotelOrder_Builder*) mergeHotel:(Place*) value {
  if (result.hasHotel &&
      result.hotel != [Place defaultInstance]) {
    result.hotel =
      [[[Place builderWithPrototype:result.hotel] mergeFrom:value] buildPartial];
  } else {
    result.hotel = value;
  }
  result.hasHotel = YES;
  return self;
}
- (HotelOrder_Builder*) clearHotel {
  result.hasHotel = NO;
  result.hotel = [Place defaultInstance];
  return self;
}
@end

@interface FlightSeat ()
@property (retain) NSString* code;
@property (retain) NSString* name;
@property (retain) NSString* remainingCount;
@property (retain) NSString* ticketPrice;
@property (retain) NSString* price;
@property (retain) NSString* refundNote;
@property (retain) NSString* changeNote;
@end

@implementation FlightSeat

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasRemainingCount {
  return !!hasRemainingCount_;
}
- (void) setHasRemainingCount:(BOOL) value {
  hasRemainingCount_ = !!value;
}
@synthesize remainingCount;
- (BOOL) hasTicketPrice {
  return !!hasTicketPrice_;
}
- (void) setHasTicketPrice:(BOOL) value {
  hasTicketPrice_ = !!value;
}
@synthesize ticketPrice;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasRefundNote {
  return !!hasRefundNote_;
}
- (void) setHasRefundNote:(BOOL) value {
  hasRefundNote_ = !!value;
}
@synthesize refundNote;
- (BOOL) hasChangeNote {
  return !!hasChangeNote_;
}
- (void) setHasChangeNote:(BOOL) value {
  hasChangeNote_ = !!value;
}
@synthesize changeNote;
- (void) dealloc {
  self.code = nil;
  self.name = nil;
  self.remainingCount = nil;
  self.ticketPrice = nil;
  self.price = nil;
  self.refundNote = nil;
  self.changeNote = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.name = @"";
    self.remainingCount = @"";
    self.ticketPrice = @"";
    self.price = @"";
    self.refundNote = @"";
    self.changeNote = @"";
  }
  return self;
}
static FlightSeat* defaultFlightSeatInstance = nil;
+ (void) initialize {
  if (self == [FlightSeat class]) {
    defaultFlightSeatInstance = [[FlightSeat alloc] init];
  }
}
+ (FlightSeat*) defaultInstance {
  return defaultFlightSeatInstance;
}
- (FlightSeat*) defaultInstance {
  return defaultFlightSeatInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCode) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasRemainingCount) {
    [output writeString:3 value:self.remainingCount];
  }
  if (self.hasTicketPrice) {
    [output writeString:10 value:self.ticketPrice];
  }
  if (self.hasPrice) {
    [output writeString:11 value:self.price];
  }
  if (self.hasRefundNote) {
    [output writeString:20 value:self.refundNote];
  }
  if (self.hasChangeNote) {
    [output writeString:21 value:self.changeNote];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(1, self.code);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasRemainingCount) {
    size += computeStringSize(3, self.remainingCount);
  }
  if (self.hasTicketPrice) {
    size += computeStringSize(10, self.ticketPrice);
  }
  if (self.hasPrice) {
    size += computeStringSize(11, self.price);
  }
  if (self.hasRefundNote) {
    size += computeStringSize(20, self.refundNote);
  }
  if (self.hasChangeNote) {
    size += computeStringSize(21, self.changeNote);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FlightSeat*) parseFromData:(NSData*) data {
  return (FlightSeat*)[[[FlightSeat builder] mergeFromData:data] build];
}
+ (FlightSeat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FlightSeat*)[[[FlightSeat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FlightSeat*) parseFromInputStream:(NSInputStream*) input {
  return (FlightSeat*)[[[FlightSeat builder] mergeFromInputStream:input] build];
}
+ (FlightSeat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FlightSeat*)[[[FlightSeat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FlightSeat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FlightSeat*)[[[FlightSeat builder] mergeFromCodedInputStream:input] build];
}
+ (FlightSeat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FlightSeat*)[[[FlightSeat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FlightSeat_Builder*) builder {
  return [[[FlightSeat_Builder alloc] init] autorelease];
}
+ (FlightSeat_Builder*) builderWithPrototype:(FlightSeat*) prototype {
  return [[FlightSeat builder] mergeFrom:prototype];
}
- (FlightSeat_Builder*) builder {
  return [FlightSeat builder];
}
@end

@interface FlightSeat_Builder()
@property (retain) FlightSeat* result;
@end

@implementation FlightSeat_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FlightSeat alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FlightSeat_Builder*) clear {
  self.result = [[[FlightSeat alloc] init] autorelease];
  return self;
}
- (FlightSeat_Builder*) clone {
  return [FlightSeat builderWithPrototype:result];
}
- (FlightSeat*) defaultInstance {
  return [FlightSeat defaultInstance];
}
- (FlightSeat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FlightSeat*) buildPartial {
  FlightSeat* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FlightSeat_Builder*) mergeFrom:(FlightSeat*) other {
  if (other == [FlightSeat defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasRemainingCount) {
    [self setRemainingCount:other.remainingCount];
  }
  if (other.hasTicketPrice) {
    [self setTicketPrice:other.ticketPrice];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasRefundNote) {
    [self setRefundNote:other.refundNote];
  }
  if (other.hasChangeNote) {
    [self setChangeNote:other.changeNote];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FlightSeat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FlightSeat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setRemainingCount:[input readString]];
        break;
      }
      case 82: {
        [self setTicketPrice:[input readString]];
        break;
      }
      case 90: {
        [self setPrice:[input readString]];
        break;
      }
      case 162: {
        [self setRefundNote:[input readString]];
        break;
      }
      case 170: {
        [self setChangeNote:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (FlightSeat_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (FlightSeat_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (FlightSeat_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (FlightSeat_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasRemainingCount {
  return result.hasRemainingCount;
}
- (NSString*) remainingCount {
  return result.remainingCount;
}
- (FlightSeat_Builder*) setRemainingCount:(NSString*) value {
  result.hasRemainingCount = YES;
  result.remainingCount = value;
  return self;
}
- (FlightSeat_Builder*) clearRemainingCount {
  result.hasRemainingCount = NO;
  result.remainingCount = @"";
  return self;
}
- (BOOL) hasTicketPrice {
  return result.hasTicketPrice;
}
- (NSString*) ticketPrice {
  return result.ticketPrice;
}
- (FlightSeat_Builder*) setTicketPrice:(NSString*) value {
  result.hasTicketPrice = YES;
  result.ticketPrice = value;
  return self;
}
- (FlightSeat_Builder*) clearTicketPrice {
  result.hasTicketPrice = NO;
  result.ticketPrice = @"";
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (NSString*) price {
  return result.price;
}
- (FlightSeat_Builder*) setPrice:(NSString*) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (FlightSeat_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = @"";
  return self;
}
- (BOOL) hasRefundNote {
  return result.hasRefundNote;
}
- (NSString*) refundNote {
  return result.refundNote;
}
- (FlightSeat_Builder*) setRefundNote:(NSString*) value {
  result.hasRefundNote = YES;
  result.refundNote = value;
  return self;
}
- (FlightSeat_Builder*) clearRefundNote {
  result.hasRefundNote = NO;
  result.refundNote = @"";
  return self;
}
- (BOOL) hasChangeNote {
  return result.hasChangeNote;
}
- (NSString*) changeNote {
  return result.changeNote;
}
- (FlightSeat_Builder*) setChangeNote:(NSString*) value {
  result.hasChangeNote = YES;
  result.changeNote = value;
  return self;
}
- (FlightSeat_Builder*) clearChangeNote {
  result.hasChangeNote = NO;
  result.changeNote = @"";
  return self;
}
@end

@interface Flight ()
@property (retain) NSString* flightNumber;
@property int32_t airlineId;
@property (retain) NSString* planeType;
@property (retain) NSString* price;
@property (retain) NSString* departAirport;
@property (retain) NSString* arriveAirport;
@property int32_t departDate;
@property int32_t arriveDate;
@property BOOL transit;
@property (retain) NSString* transitInfo;
@property (retain) NSString* adultAirportTax;
@property (retain) NSString* childAirportTax;
@property (retain) NSString* adultFuelTax;
@property (retain) NSString* childFuelTax;
@property (retain) NSMutableArray* mutableFlightSeatsList;
@end

@implementation Flight

- (BOOL) hasFlightNumber {
  return !!hasFlightNumber_;
}
- (void) setHasFlightNumber:(BOOL) value {
  hasFlightNumber_ = !!value;
}
@synthesize flightNumber;
- (BOOL) hasAirlineId {
  return !!hasAirlineId_;
}
- (void) setHasAirlineId:(BOOL) value {
  hasAirlineId_ = !!value;
}
@synthesize airlineId;
- (BOOL) hasPlaneType {
  return !!hasPlaneType_;
}
- (void) setHasPlaneType:(BOOL) value {
  hasPlaneType_ = !!value;
}
@synthesize planeType;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasDepartAirport {
  return !!hasDepartAirport_;
}
- (void) setHasDepartAirport:(BOOL) value {
  hasDepartAirport_ = !!value;
}
@synthesize departAirport;
- (BOOL) hasArriveAirport {
  return !!hasArriveAirport_;
}
- (void) setHasArriveAirport:(BOOL) value {
  hasArriveAirport_ = !!value;
}
@synthesize arriveAirport;
- (BOOL) hasDepartDate {
  return !!hasDepartDate_;
}
- (void) setHasDepartDate:(BOOL) value {
  hasDepartDate_ = !!value;
}
@synthesize departDate;
- (BOOL) hasArriveDate {
  return !!hasArriveDate_;
}
- (void) setHasArriveDate:(BOOL) value {
  hasArriveDate_ = !!value;
}
@synthesize arriveDate;
- (BOOL) hasTransit {
  return !!hasTransit_;
}
- (void) setHasTransit:(BOOL) value {
  hasTransit_ = !!value;
}
- (BOOL) transit {
  return !!transit_;
}
- (void) setTransit:(BOOL) value {
  transit_ = !!value;
}
- (BOOL) hasTransitInfo {
  return !!hasTransitInfo_;
}
- (void) setHasTransitInfo:(BOOL) value {
  hasTransitInfo_ = !!value;
}
@synthesize transitInfo;
- (BOOL) hasAdultAirportTax {
  return !!hasAdultAirportTax_;
}
- (void) setHasAdultAirportTax:(BOOL) value {
  hasAdultAirportTax_ = !!value;
}
@synthesize adultAirportTax;
- (BOOL) hasChildAirportTax {
  return !!hasChildAirportTax_;
}
- (void) setHasChildAirportTax:(BOOL) value {
  hasChildAirportTax_ = !!value;
}
@synthesize childAirportTax;
- (BOOL) hasAdultFuelTax {
  return !!hasAdultFuelTax_;
}
- (void) setHasAdultFuelTax:(BOOL) value {
  hasAdultFuelTax_ = !!value;
}
@synthesize adultFuelTax;
- (BOOL) hasChildFuelTax {
  return !!hasChildFuelTax_;
}
- (void) setHasChildFuelTax:(BOOL) value {
  hasChildFuelTax_ = !!value;
}
@synthesize childFuelTax;
@synthesize mutableFlightSeatsList;
- (void) dealloc {
  self.flightNumber = nil;
  self.planeType = nil;
  self.price = nil;
  self.departAirport = nil;
  self.arriveAirport = nil;
  self.transitInfo = nil;
  self.adultAirportTax = nil;
  self.childAirportTax = nil;
  self.adultFuelTax = nil;
  self.childFuelTax = nil;
  self.mutableFlightSeatsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.flightNumber = @"";
    self.airlineId = 0;
    self.planeType = @"";
    self.price = @"";
    self.departAirport = @"";
    self.arriveAirport = @"";
    self.departDate = 0;
    self.arriveDate = 0;
    self.transit = NO;
    self.transitInfo = @"";
    self.adultAirportTax = @"";
    self.childAirportTax = @"";
    self.adultFuelTax = @"";
    self.childFuelTax = @"";
  }
  return self;
}
static Flight* defaultFlightInstance = nil;
+ (void) initialize {
  if (self == [Flight class]) {
    defaultFlightInstance = [[Flight alloc] init];
  }
}
+ (Flight*) defaultInstance {
  return defaultFlightInstance;
}
- (Flight*) defaultInstance {
  return defaultFlightInstance;
}
- (NSArray*) flightSeatsList {
  return mutableFlightSeatsList;
}
- (FlightSeat*) flightSeatsAtIndex:(int32_t) index {
  id value = [mutableFlightSeatsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasFlightNumber) {
    return NO;
  }
  if (!self.hasAirlineId) {
    return NO;
  }
  for (FlightSeat* element in self.flightSeatsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFlightNumber) {
    [output writeString:1 value:self.flightNumber];
  }
  if (self.hasAirlineId) {
    [output writeInt32:2 value:self.airlineId];
  }
  if (self.hasPlaneType) {
    [output writeString:3 value:self.planeType];
  }
  if (self.hasPrice) {
    [output writeString:4 value:self.price];
  }
  if (self.hasDepartAirport) {
    [output writeString:5 value:self.departAirport];
  }
  if (self.hasArriveAirport) {
    [output writeString:6 value:self.arriveAirport];
  }
  if (self.hasDepartDate) {
    [output writeInt32:7 value:self.departDate];
  }
  if (self.hasArriveDate) {
    [output writeInt32:8 value:self.arriveDate];
  }
  if (self.hasTransit) {
    [output writeBool:9 value:self.transit];
  }
  if (self.hasTransitInfo) {
    [output writeString:10 value:self.transitInfo];
  }
  if (self.hasAdultAirportTax) {
    [output writeString:20 value:self.adultAirportTax];
  }
  if (self.hasChildAirportTax) {
    [output writeString:21 value:self.childAirportTax];
  }
  if (self.hasAdultFuelTax) {
    [output writeString:22 value:self.adultFuelTax];
  }
  if (self.hasChildFuelTax) {
    [output writeString:23 value:self.childFuelTax];
  }
  for (FlightSeat* element in self.flightSeatsList) {
    [output writeMessage:30 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasFlightNumber) {
    size += computeStringSize(1, self.flightNumber);
  }
  if (self.hasAirlineId) {
    size += computeInt32Size(2, self.airlineId);
  }
  if (self.hasPlaneType) {
    size += computeStringSize(3, self.planeType);
  }
  if (self.hasPrice) {
    size += computeStringSize(4, self.price);
  }
  if (self.hasDepartAirport) {
    size += computeStringSize(5, self.departAirport);
  }
  if (self.hasArriveAirport) {
    size += computeStringSize(6, self.arriveAirport);
  }
  if (self.hasDepartDate) {
    size += computeInt32Size(7, self.departDate);
  }
  if (self.hasArriveDate) {
    size += computeInt32Size(8, self.arriveDate);
  }
  if (self.hasTransit) {
    size += computeBoolSize(9, self.transit);
  }
  if (self.hasTransitInfo) {
    size += computeStringSize(10, self.transitInfo);
  }
  if (self.hasAdultAirportTax) {
    size += computeStringSize(20, self.adultAirportTax);
  }
  if (self.hasChildAirportTax) {
    size += computeStringSize(21, self.childAirportTax);
  }
  if (self.hasAdultFuelTax) {
    size += computeStringSize(22, self.adultFuelTax);
  }
  if (self.hasChildFuelTax) {
    size += computeStringSize(23, self.childFuelTax);
  }
  for (FlightSeat* element in self.flightSeatsList) {
    size += computeMessageSize(30, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Flight*) parseFromData:(NSData*) data {
  return (Flight*)[[[Flight builder] mergeFromData:data] build];
}
+ (Flight*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Flight*)[[[Flight builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Flight*) parseFromInputStream:(NSInputStream*) input {
  return (Flight*)[[[Flight builder] mergeFromInputStream:input] build];
}
+ (Flight*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Flight*)[[[Flight builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Flight*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Flight*)[[[Flight builder] mergeFromCodedInputStream:input] build];
}
+ (Flight*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Flight*)[[[Flight builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Flight_Builder*) builder {
  return [[[Flight_Builder alloc] init] autorelease];
}
+ (Flight_Builder*) builderWithPrototype:(Flight*) prototype {
  return [[Flight builder] mergeFrom:prototype];
}
- (Flight_Builder*) builder {
  return [Flight builder];
}
@end

@interface Flight_Builder()
@property (retain) Flight* result;
@end

@implementation Flight_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Flight alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Flight_Builder*) clear {
  self.result = [[[Flight alloc] init] autorelease];
  return self;
}
- (Flight_Builder*) clone {
  return [Flight builderWithPrototype:result];
}
- (Flight*) defaultInstance {
  return [Flight defaultInstance];
}
- (Flight*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Flight*) buildPartial {
  Flight* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Flight_Builder*) mergeFrom:(Flight*) other {
  if (other == [Flight defaultInstance]) {
    return self;
  }
  if (other.hasFlightNumber) {
    [self setFlightNumber:other.flightNumber];
  }
  if (other.hasAirlineId) {
    [self setAirlineId:other.airlineId];
  }
  if (other.hasPlaneType) {
    [self setPlaneType:other.planeType];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasDepartAirport) {
    [self setDepartAirport:other.departAirport];
  }
  if (other.hasArriveAirport) {
    [self setArriveAirport:other.arriveAirport];
  }
  if (other.hasDepartDate) {
    [self setDepartDate:other.departDate];
  }
  if (other.hasArriveDate) {
    [self setArriveDate:other.arriveDate];
  }
  if (other.hasTransit) {
    [self setTransit:other.transit];
  }
  if (other.hasTransitInfo) {
    [self setTransitInfo:other.transitInfo];
  }
  if (other.hasAdultAirportTax) {
    [self setAdultAirportTax:other.adultAirportTax];
  }
  if (other.hasChildAirportTax) {
    [self setChildAirportTax:other.childAirportTax];
  }
  if (other.hasAdultFuelTax) {
    [self setAdultFuelTax:other.adultFuelTax];
  }
  if (other.hasChildFuelTax) {
    [self setChildFuelTax:other.childFuelTax];
  }
  if (other.mutableFlightSeatsList.count > 0) {
    if (result.mutableFlightSeatsList == nil) {
      result.mutableFlightSeatsList = [NSMutableArray array];
    }
    [result.mutableFlightSeatsList addObjectsFromArray:other.mutableFlightSeatsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Flight_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Flight_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFlightNumber:[input readString]];
        break;
      }
      case 16: {
        [self setAirlineId:[input readInt32]];
        break;
      }
      case 26: {
        [self setPlaneType:[input readString]];
        break;
      }
      case 34: {
        [self setPrice:[input readString]];
        break;
      }
      case 42: {
        [self setDepartAirport:[input readString]];
        break;
      }
      case 50: {
        [self setArriveAirport:[input readString]];
        break;
      }
      case 56: {
        [self setDepartDate:[input readInt32]];
        break;
      }
      case 64: {
        [self setArriveDate:[input readInt32]];
        break;
      }
      case 72: {
        [self setTransit:[input readBool]];
        break;
      }
      case 82: {
        [self setTransitInfo:[input readString]];
        break;
      }
      case 162: {
        [self setAdultAirportTax:[input readString]];
        break;
      }
      case 170: {
        [self setChildAirportTax:[input readString]];
        break;
      }
      case 178: {
        [self setAdultFuelTax:[input readString]];
        break;
      }
      case 186: {
        [self setChildFuelTax:[input readString]];
        break;
      }
      case 242: {
        FlightSeat_Builder* subBuilder = [FlightSeat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFlightSeats:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasFlightNumber {
  return result.hasFlightNumber;
}
- (NSString*) flightNumber {
  return result.flightNumber;
}
- (Flight_Builder*) setFlightNumber:(NSString*) value {
  result.hasFlightNumber = YES;
  result.flightNumber = value;
  return self;
}
- (Flight_Builder*) clearFlightNumber {
  result.hasFlightNumber = NO;
  result.flightNumber = @"";
  return self;
}
- (BOOL) hasAirlineId {
  return result.hasAirlineId;
}
- (int32_t) airlineId {
  return result.airlineId;
}
- (Flight_Builder*) setAirlineId:(int32_t) value {
  result.hasAirlineId = YES;
  result.airlineId = value;
  return self;
}
- (Flight_Builder*) clearAirlineId {
  result.hasAirlineId = NO;
  result.airlineId = 0;
  return self;
}
- (BOOL) hasPlaneType {
  return result.hasPlaneType;
}
- (NSString*) planeType {
  return result.planeType;
}
- (Flight_Builder*) setPlaneType:(NSString*) value {
  result.hasPlaneType = YES;
  result.planeType = value;
  return self;
}
- (Flight_Builder*) clearPlaneType {
  result.hasPlaneType = NO;
  result.planeType = @"";
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (NSString*) price {
  return result.price;
}
- (Flight_Builder*) setPrice:(NSString*) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (Flight_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = @"";
  return self;
}
- (BOOL) hasDepartAirport {
  return result.hasDepartAirport;
}
- (NSString*) departAirport {
  return result.departAirport;
}
- (Flight_Builder*) setDepartAirport:(NSString*) value {
  result.hasDepartAirport = YES;
  result.departAirport = value;
  return self;
}
- (Flight_Builder*) clearDepartAirport {
  result.hasDepartAirport = NO;
  result.departAirport = @"";
  return self;
}
- (BOOL) hasArriveAirport {
  return result.hasArriveAirport;
}
- (NSString*) arriveAirport {
  return result.arriveAirport;
}
- (Flight_Builder*) setArriveAirport:(NSString*) value {
  result.hasArriveAirport = YES;
  result.arriveAirport = value;
  return self;
}
- (Flight_Builder*) clearArriveAirport {
  result.hasArriveAirport = NO;
  result.arriveAirport = @"";
  return self;
}
- (BOOL) hasDepartDate {
  return result.hasDepartDate;
}
- (int32_t) departDate {
  return result.departDate;
}
- (Flight_Builder*) setDepartDate:(int32_t) value {
  result.hasDepartDate = YES;
  result.departDate = value;
  return self;
}
- (Flight_Builder*) clearDepartDate {
  result.hasDepartDate = NO;
  result.departDate = 0;
  return self;
}
- (BOOL) hasArriveDate {
  return result.hasArriveDate;
}
- (int32_t) arriveDate {
  return result.arriveDate;
}
- (Flight_Builder*) setArriveDate:(int32_t) value {
  result.hasArriveDate = YES;
  result.arriveDate = value;
  return self;
}
- (Flight_Builder*) clearArriveDate {
  result.hasArriveDate = NO;
  result.arriveDate = 0;
  return self;
}
- (BOOL) hasTransit {
  return result.hasTransit;
}
- (BOOL) transit {
  return result.transit;
}
- (Flight_Builder*) setTransit:(BOOL) value {
  result.hasTransit = YES;
  result.transit = value;
  return self;
}
- (Flight_Builder*) clearTransit {
  result.hasTransit = NO;
  result.transit = NO;
  return self;
}
- (BOOL) hasTransitInfo {
  return result.hasTransitInfo;
}
- (NSString*) transitInfo {
  return result.transitInfo;
}
- (Flight_Builder*) setTransitInfo:(NSString*) value {
  result.hasTransitInfo = YES;
  result.transitInfo = value;
  return self;
}
- (Flight_Builder*) clearTransitInfo {
  result.hasTransitInfo = NO;
  result.transitInfo = @"";
  return self;
}
- (BOOL) hasAdultAirportTax {
  return result.hasAdultAirportTax;
}
- (NSString*) adultAirportTax {
  return result.adultAirportTax;
}
- (Flight_Builder*) setAdultAirportTax:(NSString*) value {
  result.hasAdultAirportTax = YES;
  result.adultAirportTax = value;
  return self;
}
- (Flight_Builder*) clearAdultAirportTax {
  result.hasAdultAirportTax = NO;
  result.adultAirportTax = @"";
  return self;
}
- (BOOL) hasChildAirportTax {
  return result.hasChildAirportTax;
}
- (NSString*) childAirportTax {
  return result.childAirportTax;
}
- (Flight_Builder*) setChildAirportTax:(NSString*) value {
  result.hasChildAirportTax = YES;
  result.childAirportTax = value;
  return self;
}
- (Flight_Builder*) clearChildAirportTax {
  result.hasChildAirportTax = NO;
  result.childAirportTax = @"";
  return self;
}
- (BOOL) hasAdultFuelTax {
  return result.hasAdultFuelTax;
}
- (NSString*) adultFuelTax {
  return result.adultFuelTax;
}
- (Flight_Builder*) setAdultFuelTax:(NSString*) value {
  result.hasAdultFuelTax = YES;
  result.adultFuelTax = value;
  return self;
}
- (Flight_Builder*) clearAdultFuelTax {
  result.hasAdultFuelTax = NO;
  result.adultFuelTax = @"";
  return self;
}
- (BOOL) hasChildFuelTax {
  return result.hasChildFuelTax;
}
- (NSString*) childFuelTax {
  return result.childFuelTax;
}
- (Flight_Builder*) setChildFuelTax:(NSString*) value {
  result.hasChildFuelTax = YES;
  result.childFuelTax = value;
  return self;
}
- (Flight_Builder*) clearChildFuelTax {
  result.hasChildFuelTax = NO;
  result.childFuelTax = @"";
  return self;
}
- (NSArray*) flightSeatsList {
  if (result.mutableFlightSeatsList == nil) { return [NSArray array]; }
  return result.mutableFlightSeatsList;
}
- (FlightSeat*) flightSeatsAtIndex:(int32_t) index {
  return [result flightSeatsAtIndex:index];
}
- (Flight_Builder*) replaceFlightSeatsAtIndex:(int32_t) index with:(FlightSeat*) value {
  [result.mutableFlightSeatsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (Flight_Builder*) addAllFlightSeats:(NSArray*) values {
  if (result.mutableFlightSeatsList == nil) {
    result.mutableFlightSeatsList = [NSMutableArray array];
  }
  [result.mutableFlightSeatsList addObjectsFromArray:values];
  return self;
}
- (Flight_Builder*) clearFlightSeatsList {
  result.mutableFlightSeatsList = nil;
  return self;
}
- (Flight_Builder*) addFlightSeats:(FlightSeat*) value {
  if (result.mutableFlightSeatsList == nil) {
    result.mutableFlightSeatsList = [NSMutableArray array];
  }
  [result.mutableFlightSeatsList addObject:value];
  return self;
}
@end

@interface FlightList ()
@property (retain) NSMutableArray* mutableFlightsList;
@end

@implementation FlightList

@synthesize mutableFlightsList;
- (void) dealloc {
  self.mutableFlightsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static FlightList* defaultFlightListInstance = nil;
+ (void) initialize {
  if (self == [FlightList class]) {
    defaultFlightListInstance = [[FlightList alloc] init];
  }
}
+ (FlightList*) defaultInstance {
  return defaultFlightListInstance;
}
- (FlightList*) defaultInstance {
  return defaultFlightListInstance;
}
- (NSArray*) flightsList {
  return mutableFlightsList;
}
- (Flight*) flightsAtIndex:(int32_t) index {
  id value = [mutableFlightsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Flight* element in self.flightsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Flight* element in self.flightsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Flight* element in self.flightsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FlightList*) parseFromData:(NSData*) data {
  return (FlightList*)[[[FlightList builder] mergeFromData:data] build];
}
+ (FlightList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FlightList*)[[[FlightList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FlightList*) parseFromInputStream:(NSInputStream*) input {
  return (FlightList*)[[[FlightList builder] mergeFromInputStream:input] build];
}
+ (FlightList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FlightList*)[[[FlightList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FlightList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FlightList*)[[[FlightList builder] mergeFromCodedInputStream:input] build];
}
+ (FlightList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FlightList*)[[[FlightList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FlightList_Builder*) builder {
  return [[[FlightList_Builder alloc] init] autorelease];
}
+ (FlightList_Builder*) builderWithPrototype:(FlightList*) prototype {
  return [[FlightList builder] mergeFrom:prototype];
}
- (FlightList_Builder*) builder {
  return [FlightList builder];
}
@end

@interface FlightList_Builder()
@property (retain) FlightList* result;
@end

@implementation FlightList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FlightList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FlightList_Builder*) clear {
  self.result = [[[FlightList alloc] init] autorelease];
  return self;
}
- (FlightList_Builder*) clone {
  return [FlightList builderWithPrototype:result];
}
- (FlightList*) defaultInstance {
  return [FlightList defaultInstance];
}
- (FlightList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FlightList*) buildPartial {
  FlightList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FlightList_Builder*) mergeFrom:(FlightList*) other {
  if (other == [FlightList defaultInstance]) {
    return self;
  }
  if (other.mutableFlightsList.count > 0) {
    if (result.mutableFlightsList == nil) {
      result.mutableFlightsList = [NSMutableArray array];
    }
    [result.mutableFlightsList addObjectsFromArray:other.mutableFlightsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FlightList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FlightList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Flight_Builder* subBuilder = [Flight builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFlights:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) flightsList {
  if (result.mutableFlightsList == nil) { return [NSArray array]; }
  return result.mutableFlightsList;
}
- (Flight*) flightsAtIndex:(int32_t) index {
  return [result flightsAtIndex:index];
}
- (FlightList_Builder*) replaceFlightsAtIndex:(int32_t) index with:(Flight*) value {
  [result.mutableFlightsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FlightList_Builder*) addAllFlights:(NSArray*) values {
  if (result.mutableFlightsList == nil) {
    result.mutableFlightsList = [NSMutableArray array];
  }
  [result.mutableFlightsList addObjectsFromArray:values];
  return self;
}
- (FlightList_Builder*) clearFlightsList {
  result.mutableFlightsList = nil;
  return self;
}
- (FlightList_Builder*) addFlights:(Flight*) value {
  if (result.mutableFlightsList == nil) {
    result.mutableFlightsList = [NSMutableArray array];
  }
  [result.mutableFlightsList addObject:value];
  return self;
}
@end

@interface AirOrder ()
@property (retain) NSString* flightNumber;
@property (retain) NSString* flightSeatCode;
@property int32_t flightType;
@property int32_t flightDate;
@property BOOL insurance;
@property BOOL sendTicket;
@property (retain) NSString* insuranceFee;
@property (retain) NSString* sendTicketFee;
@property (retain) NSMutableArray* mutablePassengerList;
@property (retain) Flight* flight;
@property (retain) FlightSeat* flightSeat;
@end

@implementation AirOrder

- (BOOL) hasFlightNumber {
  return !!hasFlightNumber_;
}
- (void) setHasFlightNumber:(BOOL) value {
  hasFlightNumber_ = !!value;
}
@synthesize flightNumber;
- (BOOL) hasFlightSeatCode {
  return !!hasFlightSeatCode_;
}
- (void) setHasFlightSeatCode:(BOOL) value {
  hasFlightSeatCode_ = !!value;
}
@synthesize flightSeatCode;
- (BOOL) hasFlightType {
  return !!hasFlightType_;
}
- (void) setHasFlightType:(BOOL) value {
  hasFlightType_ = !!value;
}
@synthesize flightType;
- (BOOL) hasFlightDate {
  return !!hasFlightDate_;
}
- (void) setHasFlightDate:(BOOL) value {
  hasFlightDate_ = !!value;
}
@synthesize flightDate;
- (BOOL) hasInsurance {
  return !!hasInsurance_;
}
- (void) setHasInsurance:(BOOL) value {
  hasInsurance_ = !!value;
}
- (BOOL) insurance {
  return !!insurance_;
}
- (void) setInsurance:(BOOL) value {
  insurance_ = !!value;
}
- (BOOL) hasSendTicket {
  return !!hasSendTicket_;
}
- (void) setHasSendTicket:(BOOL) value {
  hasSendTicket_ = !!value;
}
- (BOOL) sendTicket {
  return !!sendTicket_;
}
- (void) setSendTicket:(BOOL) value {
  sendTicket_ = !!value;
}
- (BOOL) hasInsuranceFee {
  return !!hasInsuranceFee_;
}
- (void) setHasInsuranceFee:(BOOL) value {
  hasInsuranceFee_ = !!value;
}
@synthesize insuranceFee;
- (BOOL) hasSendTicketFee {
  return !!hasSendTicketFee_;
}
- (void) setHasSendTicketFee:(BOOL) value {
  hasSendTicketFee_ = !!value;
}
@synthesize sendTicketFee;
@synthesize mutablePassengerList;
- (BOOL) hasFlight {
  return !!hasFlight_;
}
- (void) setHasFlight:(BOOL) value {
  hasFlight_ = !!value;
}
@synthesize flight;
- (BOOL) hasFlightSeat {
  return !!hasFlightSeat_;
}
- (void) setHasFlightSeat:(BOOL) value {
  hasFlightSeat_ = !!value;
}
@synthesize flightSeat;
- (void) dealloc {
  self.flightNumber = nil;
  self.flightSeatCode = nil;
  self.insuranceFee = nil;
  self.sendTicketFee = nil;
  self.mutablePassengerList = nil;
  self.flight = nil;
  self.flightSeat = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.flightNumber = @"";
    self.flightSeatCode = @"";
    self.flightType = 0;
    self.flightDate = 0;
    self.insurance = NO;
    self.sendTicket = NO;
    self.insuranceFee = @"";
    self.sendTicketFee = @"";
    self.flight = [Flight defaultInstance];
    self.flightSeat = [FlightSeat defaultInstance];
  }
  return self;
}
static AirOrder* defaultAirOrderInstance = nil;
+ (void) initialize {
  if (self == [AirOrder class]) {
    defaultAirOrderInstance = [[AirOrder alloc] init];
  }
}
+ (AirOrder*) defaultInstance {
  return defaultAirOrderInstance;
}
- (AirOrder*) defaultInstance {
  return defaultAirOrderInstance;
}
- (NSArray*) passengerList {
  return mutablePassengerList;
}
- (Person*) passengerAtIndex:(int32_t) index {
  id value = [mutablePassengerList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasFlightNumber) {
    return NO;
  }
  if (!self.hasFlightSeatCode) {
    return NO;
  }
  if (self.hasFlight) {
    if (!self.flight.isInitialized) {
      return NO;
    }
  }
  if (self.hasFlightSeat) {
    if (!self.flightSeat.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFlightNumber) {
    [output writeString:1 value:self.flightNumber];
  }
  if (self.hasFlightSeatCode) {
    [output writeString:2 value:self.flightSeatCode];
  }
  if (self.hasFlightType) {
    [output writeInt32:3 value:self.flightType];
  }
  if (self.hasFlightDate) {
    [output writeInt32:4 value:self.flightDate];
  }
  if (self.hasInsurance) {
    [output writeBool:5 value:self.insurance];
  }
  if (self.hasSendTicket) {
    [output writeBool:6 value:self.sendTicket];
  }
  if (self.hasInsuranceFee) {
    [output writeString:10 value:self.insuranceFee];
  }
  if (self.hasSendTicketFee) {
    [output writeString:11 value:self.sendTicketFee];
  }
  for (Person* element in self.passengerList) {
    [output writeMessage:20 value:element];
  }
  if (self.hasFlight) {
    [output writeMessage:30 value:self.flight];
  }
  if (self.hasFlightSeat) {
    [output writeMessage:31 value:self.flightSeat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasFlightNumber) {
    size += computeStringSize(1, self.flightNumber);
  }
  if (self.hasFlightSeatCode) {
    size += computeStringSize(2, self.flightSeatCode);
  }
  if (self.hasFlightType) {
    size += computeInt32Size(3, self.flightType);
  }
  if (self.hasFlightDate) {
    size += computeInt32Size(4, self.flightDate);
  }
  if (self.hasInsurance) {
    size += computeBoolSize(5, self.insurance);
  }
  if (self.hasSendTicket) {
    size += computeBoolSize(6, self.sendTicket);
  }
  if (self.hasInsuranceFee) {
    size += computeStringSize(10, self.insuranceFee);
  }
  if (self.hasSendTicketFee) {
    size += computeStringSize(11, self.sendTicketFee);
  }
  for (Person* element in self.passengerList) {
    size += computeMessageSize(20, element);
  }
  if (self.hasFlight) {
    size += computeMessageSize(30, self.flight);
  }
  if (self.hasFlightSeat) {
    size += computeMessageSize(31, self.flightSeat);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AirOrder*) parseFromData:(NSData*) data {
  return (AirOrder*)[[[AirOrder builder] mergeFromData:data] build];
}
+ (AirOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirOrder*)[[[AirOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AirOrder*) parseFromInputStream:(NSInputStream*) input {
  return (AirOrder*)[[[AirOrder builder] mergeFromInputStream:input] build];
}
+ (AirOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirOrder*)[[[AirOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AirOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AirOrder*)[[[AirOrder builder] mergeFromCodedInputStream:input] build];
}
+ (AirOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirOrder*)[[[AirOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AirOrder_Builder*) builder {
  return [[[AirOrder_Builder alloc] init] autorelease];
}
+ (AirOrder_Builder*) builderWithPrototype:(AirOrder*) prototype {
  return [[AirOrder builder] mergeFrom:prototype];
}
- (AirOrder_Builder*) builder {
  return [AirOrder builder];
}
@end

@interface AirOrder_Builder()
@property (retain) AirOrder* result;
@end

@implementation AirOrder_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AirOrder alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AirOrder_Builder*) clear {
  self.result = [[[AirOrder alloc] init] autorelease];
  return self;
}
- (AirOrder_Builder*) clone {
  return [AirOrder builderWithPrototype:result];
}
- (AirOrder*) defaultInstance {
  return [AirOrder defaultInstance];
}
- (AirOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AirOrder*) buildPartial {
  AirOrder* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AirOrder_Builder*) mergeFrom:(AirOrder*) other {
  if (other == [AirOrder defaultInstance]) {
    return self;
  }
  if (other.hasFlightNumber) {
    [self setFlightNumber:other.flightNumber];
  }
  if (other.hasFlightSeatCode) {
    [self setFlightSeatCode:other.flightSeatCode];
  }
  if (other.hasFlightType) {
    [self setFlightType:other.flightType];
  }
  if (other.hasFlightDate) {
    [self setFlightDate:other.flightDate];
  }
  if (other.hasInsurance) {
    [self setInsurance:other.insurance];
  }
  if (other.hasSendTicket) {
    [self setSendTicket:other.sendTicket];
  }
  if (other.hasInsuranceFee) {
    [self setInsuranceFee:other.insuranceFee];
  }
  if (other.hasSendTicketFee) {
    [self setSendTicketFee:other.sendTicketFee];
  }
  if (other.mutablePassengerList.count > 0) {
    if (result.mutablePassengerList == nil) {
      result.mutablePassengerList = [NSMutableArray array];
    }
    [result.mutablePassengerList addObjectsFromArray:other.mutablePassengerList];
  }
  if (other.hasFlight) {
    [self mergeFlight:other.flight];
  }
  if (other.hasFlightSeat) {
    [self mergeFlightSeat:other.flightSeat];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AirOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AirOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFlightNumber:[input readString]];
        break;
      }
      case 18: {
        [self setFlightSeatCode:[input readString]];
        break;
      }
      case 24: {
        [self setFlightType:[input readInt32]];
        break;
      }
      case 32: {
        [self setFlightDate:[input readInt32]];
        break;
      }
      case 40: {
        [self setInsurance:[input readBool]];
        break;
      }
      case 48: {
        [self setSendTicket:[input readBool]];
        break;
      }
      case 82: {
        [self setInsuranceFee:[input readString]];
        break;
      }
      case 90: {
        [self setSendTicketFee:[input readString]];
        break;
      }
      case 162: {
        Person_Builder* subBuilder = [Person builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPassenger:[subBuilder buildPartial]];
        break;
      }
      case 242: {
        Flight_Builder* subBuilder = [Flight builder];
        if (self.hasFlight) {
          [subBuilder mergeFrom:self.flight];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFlight:[subBuilder buildPartial]];
        break;
      }
      case 250: {
        FlightSeat_Builder* subBuilder = [FlightSeat builder];
        if (self.hasFlightSeat) {
          [subBuilder mergeFrom:self.flightSeat];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFlightSeat:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasFlightNumber {
  return result.hasFlightNumber;
}
- (NSString*) flightNumber {
  return result.flightNumber;
}
- (AirOrder_Builder*) setFlightNumber:(NSString*) value {
  result.hasFlightNumber = YES;
  result.flightNumber = value;
  return self;
}
- (AirOrder_Builder*) clearFlightNumber {
  result.hasFlightNumber = NO;
  result.flightNumber = @"";
  return self;
}
- (BOOL) hasFlightSeatCode {
  return result.hasFlightSeatCode;
}
- (NSString*) flightSeatCode {
  return result.flightSeatCode;
}
- (AirOrder_Builder*) setFlightSeatCode:(NSString*) value {
  result.hasFlightSeatCode = YES;
  result.flightSeatCode = value;
  return self;
}
- (AirOrder_Builder*) clearFlightSeatCode {
  result.hasFlightSeatCode = NO;
  result.flightSeatCode = @"";
  return self;
}
- (BOOL) hasFlightType {
  return result.hasFlightType;
}
- (int32_t) flightType {
  return result.flightType;
}
- (AirOrder_Builder*) setFlightType:(int32_t) value {
  result.hasFlightType = YES;
  result.flightType = value;
  return self;
}
- (AirOrder_Builder*) clearFlightType {
  result.hasFlightType = NO;
  result.flightType = 0;
  return self;
}
- (BOOL) hasFlightDate {
  return result.hasFlightDate;
}
- (int32_t) flightDate {
  return result.flightDate;
}
- (AirOrder_Builder*) setFlightDate:(int32_t) value {
  result.hasFlightDate = YES;
  result.flightDate = value;
  return self;
}
- (AirOrder_Builder*) clearFlightDate {
  result.hasFlightDate = NO;
  result.flightDate = 0;
  return self;
}
- (BOOL) hasInsurance {
  return result.hasInsurance;
}
- (BOOL) insurance {
  return result.insurance;
}
- (AirOrder_Builder*) setInsurance:(BOOL) value {
  result.hasInsurance = YES;
  result.insurance = value;
  return self;
}
- (AirOrder_Builder*) clearInsurance {
  result.hasInsurance = NO;
  result.insurance = NO;
  return self;
}
- (BOOL) hasSendTicket {
  return result.hasSendTicket;
}
- (BOOL) sendTicket {
  return result.sendTicket;
}
- (AirOrder_Builder*) setSendTicket:(BOOL) value {
  result.hasSendTicket = YES;
  result.sendTicket = value;
  return self;
}
- (AirOrder_Builder*) clearSendTicket {
  result.hasSendTicket = NO;
  result.sendTicket = NO;
  return self;
}
- (BOOL) hasInsuranceFee {
  return result.hasInsuranceFee;
}
- (NSString*) insuranceFee {
  return result.insuranceFee;
}
- (AirOrder_Builder*) setInsuranceFee:(NSString*) value {
  result.hasInsuranceFee = YES;
  result.insuranceFee = value;
  return self;
}
- (AirOrder_Builder*) clearInsuranceFee {
  result.hasInsuranceFee = NO;
  result.insuranceFee = @"";
  return self;
}
- (BOOL) hasSendTicketFee {
  return result.hasSendTicketFee;
}
- (NSString*) sendTicketFee {
  return result.sendTicketFee;
}
- (AirOrder_Builder*) setSendTicketFee:(NSString*) value {
  result.hasSendTicketFee = YES;
  result.sendTicketFee = value;
  return self;
}
- (AirOrder_Builder*) clearSendTicketFee {
  result.hasSendTicketFee = NO;
  result.sendTicketFee = @"";
  return self;
}
- (NSArray*) passengerList {
  if (result.mutablePassengerList == nil) { return [NSArray array]; }
  return result.mutablePassengerList;
}
- (Person*) passengerAtIndex:(int32_t) index {
  return [result passengerAtIndex:index];
}
- (AirOrder_Builder*) replacePassengerAtIndex:(int32_t) index with:(Person*) value {
  [result.mutablePassengerList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (AirOrder_Builder*) addAllPassenger:(NSArray*) values {
  if (result.mutablePassengerList == nil) {
    result.mutablePassengerList = [NSMutableArray array];
  }
  [result.mutablePassengerList addObjectsFromArray:values];
  return self;
}
- (AirOrder_Builder*) clearPassengerList {
  result.mutablePassengerList = nil;
  return self;
}
- (AirOrder_Builder*) addPassenger:(Person*) value {
  if (result.mutablePassengerList == nil) {
    result.mutablePassengerList = [NSMutableArray array];
  }
  [result.mutablePassengerList addObject:value];
  return self;
}
- (BOOL) hasFlight {
  return result.hasFlight;
}
- (Flight*) flight {
  return result.flight;
}
- (AirOrder_Builder*) setFlight:(Flight*) value {
  result.hasFlight = YES;
  result.flight = value;
  return self;
}
- (AirOrder_Builder*) setFlightBuilder:(Flight_Builder*) builderForValue {
  return [self setFlight:[builderForValue build]];
}
- (AirOrder_Builder*) mergeFlight:(Flight*) value {
  if (result.hasFlight &&
      result.flight != [Flight defaultInstance]) {
    result.flight =
      [[[Flight builderWithPrototype:result.flight] mergeFrom:value] buildPartial];
  } else {
    result.flight = value;
  }
  result.hasFlight = YES;
  return self;
}
- (AirOrder_Builder*) clearFlight {
  result.hasFlight = NO;
  result.flight = [Flight defaultInstance];
  return self;
}
- (BOOL) hasFlightSeat {
  return result.hasFlightSeat;
}
- (FlightSeat*) flightSeat {
  return result.flightSeat;
}
- (AirOrder_Builder*) setFlightSeat:(FlightSeat*) value {
  result.hasFlightSeat = YES;
  result.flightSeat = value;
  return self;
}
- (AirOrder_Builder*) setFlightSeatBuilder:(FlightSeat_Builder*) builderForValue {
  return [self setFlightSeat:[builderForValue build]];
}
- (AirOrder_Builder*) mergeFlightSeat:(FlightSeat*) value {
  if (result.hasFlightSeat &&
      result.flightSeat != [FlightSeat defaultInstance]) {
    result.flightSeat =
      [[[FlightSeat builderWithPrototype:result.flightSeat] mergeFrom:value] buildPartial];
  } else {
    result.flightSeat = value;
  }
  result.hasFlightSeat = YES;
  return self;
}
- (AirOrder_Builder*) clearFlightSeat {
  result.hasFlightSeat = NO;
  result.flightSeat = [FlightSeat defaultInstance];
  return self;
}
@end

@interface CreditCard ()
@property int32_t bankId;
@property (retain) NSString* number;
@property (retain) NSString* name;
@property (retain) NSString* ccv;
@property int32_t validDateYear;
@property int32_t validDateMonth;
@property int32_t idCardTypeId;
@property (retain) NSString* idCardNumber;
@end

@implementation CreditCard

- (BOOL) hasBankId {
  return !!hasBankId_;
}
- (void) setHasBankId:(BOOL) value {
  hasBankId_ = !!value;
}
@synthesize bankId;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) value {
  hasNumber_ = !!value;
}
@synthesize number;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasCcv {
  return !!hasCcv_;
}
- (void) setHasCcv:(BOOL) value {
  hasCcv_ = !!value;
}
@synthesize ccv;
- (BOOL) hasValidDateYear {
  return !!hasValidDateYear_;
}
- (void) setHasValidDateYear:(BOOL) value {
  hasValidDateYear_ = !!value;
}
@synthesize validDateYear;
- (BOOL) hasValidDateMonth {
  return !!hasValidDateMonth_;
}
- (void) setHasValidDateMonth:(BOOL) value {
  hasValidDateMonth_ = !!value;
}
@synthesize validDateMonth;
- (BOOL) hasIdCardTypeId {
  return !!hasIdCardTypeId_;
}
- (void) setHasIdCardTypeId:(BOOL) value {
  hasIdCardTypeId_ = !!value;
}
@synthesize idCardTypeId;
- (BOOL) hasIdCardNumber {
  return !!hasIdCardNumber_;
}
- (void) setHasIdCardNumber:(BOOL) value {
  hasIdCardNumber_ = !!value;
}
@synthesize idCardNumber;
- (void) dealloc {
  self.number = nil;
  self.name = nil;
  self.ccv = nil;
  self.idCardNumber = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.bankId = 0;
    self.number = @"";
    self.name = @"";
    self.ccv = @"";
    self.validDateYear = 0;
    self.validDateMonth = 0;
    self.idCardTypeId = 0;
    self.idCardNumber = @"";
  }
  return self;
}
static CreditCard* defaultCreditCardInstance = nil;
+ (void) initialize {
  if (self == [CreditCard class]) {
    defaultCreditCardInstance = [[CreditCard alloc] init];
  }
}
+ (CreditCard*) defaultInstance {
  return defaultCreditCardInstance;
}
- (CreditCard*) defaultInstance {
  return defaultCreditCardInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBankId) {
    return NO;
  }
  if (!self.hasNumber) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBankId) {
    [output writeInt32:1 value:self.bankId];
  }
  if (self.hasNumber) {
    [output writeString:2 value:self.number];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasCcv) {
    [output writeString:4 value:self.ccv];
  }
  if (self.hasValidDateYear) {
    [output writeInt32:5 value:self.validDateYear];
  }
  if (self.hasValidDateMonth) {
    [output writeInt32:6 value:self.validDateMonth];
  }
  if (self.hasIdCardTypeId) {
    [output writeInt32:7 value:self.idCardTypeId];
  }
  if (self.hasIdCardNumber) {
    [output writeString:8 value:self.idCardNumber];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBankId) {
    size += computeInt32Size(1, self.bankId);
  }
  if (self.hasNumber) {
    size += computeStringSize(2, self.number);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasCcv) {
    size += computeStringSize(4, self.ccv);
  }
  if (self.hasValidDateYear) {
    size += computeInt32Size(5, self.validDateYear);
  }
  if (self.hasValidDateMonth) {
    size += computeInt32Size(6, self.validDateMonth);
  }
  if (self.hasIdCardTypeId) {
    size += computeInt32Size(7, self.idCardTypeId);
  }
  if (self.hasIdCardNumber) {
    size += computeStringSize(8, self.idCardNumber);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CreditCard*) parseFromData:(NSData*) data {
  return (CreditCard*)[[[CreditCard builder] mergeFromData:data] build];
}
+ (CreditCard*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreditCard*)[[[CreditCard builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CreditCard*) parseFromInputStream:(NSInputStream*) input {
  return (CreditCard*)[[[CreditCard builder] mergeFromInputStream:input] build];
}
+ (CreditCard*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreditCard*)[[[CreditCard builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreditCard*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CreditCard*)[[[CreditCard builder] mergeFromCodedInputStream:input] build];
}
+ (CreditCard*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreditCard*)[[[CreditCard builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreditCard_Builder*) builder {
  return [[[CreditCard_Builder alloc] init] autorelease];
}
+ (CreditCard_Builder*) builderWithPrototype:(CreditCard*) prototype {
  return [[CreditCard builder] mergeFrom:prototype];
}
- (CreditCard_Builder*) builder {
  return [CreditCard builder];
}
@end

@interface CreditCard_Builder()
@property (retain) CreditCard* result;
@end

@implementation CreditCard_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CreditCard alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CreditCard_Builder*) clear {
  self.result = [[[CreditCard alloc] init] autorelease];
  return self;
}
- (CreditCard_Builder*) clone {
  return [CreditCard builderWithPrototype:result];
}
- (CreditCard*) defaultInstance {
  return [CreditCard defaultInstance];
}
- (CreditCard*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CreditCard*) buildPartial {
  CreditCard* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CreditCard_Builder*) mergeFrom:(CreditCard*) other {
  if (other == [CreditCard defaultInstance]) {
    return self;
  }
  if (other.hasBankId) {
    [self setBankId:other.bankId];
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCcv) {
    [self setCcv:other.ccv];
  }
  if (other.hasValidDateYear) {
    [self setValidDateYear:other.validDateYear];
  }
  if (other.hasValidDateMonth) {
    [self setValidDateMonth:other.validDateMonth];
  }
  if (other.hasIdCardTypeId) {
    [self setIdCardTypeId:other.idCardTypeId];
  }
  if (other.hasIdCardNumber) {
    [self setIdCardNumber:other.idCardNumber];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CreditCard_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CreditCard_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBankId:[input readInt32]];
        break;
      }
      case 18: {
        [self setNumber:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setCcv:[input readString]];
        break;
      }
      case 40: {
        [self setValidDateYear:[input readInt32]];
        break;
      }
      case 48: {
        [self setValidDateMonth:[input readInt32]];
        break;
      }
      case 56: {
        [self setIdCardTypeId:[input readInt32]];
        break;
      }
      case 66: {
        [self setIdCardNumber:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBankId {
  return result.hasBankId;
}
- (int32_t) bankId {
  return result.bankId;
}
- (CreditCard_Builder*) setBankId:(int32_t) value {
  result.hasBankId = YES;
  result.bankId = value;
  return self;
}
- (CreditCard_Builder*) clearBankId {
  result.hasBankId = NO;
  result.bankId = 0;
  return self;
}
- (BOOL) hasNumber {
  return result.hasNumber;
}
- (NSString*) number {
  return result.number;
}
- (CreditCard_Builder*) setNumber:(NSString*) value {
  result.hasNumber = YES;
  result.number = value;
  return self;
}
- (CreditCard_Builder*) clearNumber {
  result.hasNumber = NO;
  result.number = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (CreditCard_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (CreditCard_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCcv {
  return result.hasCcv;
}
- (NSString*) ccv {
  return result.ccv;
}
- (CreditCard_Builder*) setCcv:(NSString*) value {
  result.hasCcv = YES;
  result.ccv = value;
  return self;
}
- (CreditCard_Builder*) clearCcv {
  result.hasCcv = NO;
  result.ccv = @"";
  return self;
}
- (BOOL) hasValidDateYear {
  return result.hasValidDateYear;
}
- (int32_t) validDateYear {
  return result.validDateYear;
}
- (CreditCard_Builder*) setValidDateYear:(int32_t) value {
  result.hasValidDateYear = YES;
  result.validDateYear = value;
  return self;
}
- (CreditCard_Builder*) clearValidDateYear {
  result.hasValidDateYear = NO;
  result.validDateYear = 0;
  return self;
}
- (BOOL) hasValidDateMonth {
  return result.hasValidDateMonth;
}
- (int32_t) validDateMonth {
  return result.validDateMonth;
}
- (CreditCard_Builder*) setValidDateMonth:(int32_t) value {
  result.hasValidDateMonth = YES;
  result.validDateMonth = value;
  return self;
}
- (CreditCard_Builder*) clearValidDateMonth {
  result.hasValidDateMonth = NO;
  result.validDateMonth = 0;
  return self;
}
- (BOOL) hasIdCardTypeId {
  return result.hasIdCardTypeId;
}
- (int32_t) idCardTypeId {
  return result.idCardTypeId;
}
- (CreditCard_Builder*) setIdCardTypeId:(int32_t) value {
  result.hasIdCardTypeId = YES;
  result.idCardTypeId = value;
  return self;
}
- (CreditCard_Builder*) clearIdCardTypeId {
  result.hasIdCardTypeId = NO;
  result.idCardTypeId = 0;
  return self;
}
- (BOOL) hasIdCardNumber {
  return result.hasIdCardNumber;
}
- (NSString*) idCardNumber {
  return result.idCardNumber;
}
- (CreditCard_Builder*) setIdCardNumber:(NSString*) value {
  result.hasIdCardNumber = YES;
  result.idCardNumber = value;
  return self;
}
- (CreditCard_Builder*) clearIdCardNumber {
  result.hasIdCardNumber = NO;
  result.idCardNumber = @"";
  return self;
}
@end

@interface PaymentInfo ()
@property int32_t paymentType;
@property (retain) CreditCard* creditCard;
@end

@implementation PaymentInfo

- (BOOL) hasPaymentType {
  return !!hasPaymentType_;
}
- (void) setHasPaymentType:(BOOL) value {
  hasPaymentType_ = !!value;
}
@synthesize paymentType;
- (BOOL) hasCreditCard {
  return !!hasCreditCard_;
}
- (void) setHasCreditCard:(BOOL) value {
  hasCreditCard_ = !!value;
}
@synthesize creditCard;
- (void) dealloc {
  self.creditCard = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.paymentType = 0;
    self.creditCard = [CreditCard defaultInstance];
  }
  return self;
}
static PaymentInfo* defaultPaymentInfoInstance = nil;
+ (void) initialize {
  if (self == [PaymentInfo class]) {
    defaultPaymentInfoInstance = [[PaymentInfo alloc] init];
  }
}
+ (PaymentInfo*) defaultInstance {
  return defaultPaymentInfoInstance;
}
- (PaymentInfo*) defaultInstance {
  return defaultPaymentInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPaymentType) {
    return NO;
  }
  if (self.hasCreditCard) {
    if (!self.creditCard.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPaymentType) {
    [output writeInt32:1 value:self.paymentType];
  }
  if (self.hasCreditCard) {
    [output writeMessage:2 value:self.creditCard];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPaymentType) {
    size += computeInt32Size(1, self.paymentType);
  }
  if (self.hasCreditCard) {
    size += computeMessageSize(2, self.creditCard);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PaymentInfo*) parseFromData:(NSData*) data {
  return (PaymentInfo*)[[[PaymentInfo builder] mergeFromData:data] build];
}
+ (PaymentInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PaymentInfo*)[[[PaymentInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PaymentInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PaymentInfo*)[[[PaymentInfo builder] mergeFromInputStream:input] build];
}
+ (PaymentInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PaymentInfo*)[[[PaymentInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PaymentInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PaymentInfo*)[[[PaymentInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PaymentInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PaymentInfo*)[[[PaymentInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PaymentInfo_Builder*) builder {
  return [[[PaymentInfo_Builder alloc] init] autorelease];
}
+ (PaymentInfo_Builder*) builderWithPrototype:(PaymentInfo*) prototype {
  return [[PaymentInfo builder] mergeFrom:prototype];
}
- (PaymentInfo_Builder*) builder {
  return [PaymentInfo builder];
}
@end

@interface PaymentInfo_Builder()
@property (retain) PaymentInfo* result;
@end

@implementation PaymentInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PaymentInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PaymentInfo_Builder*) clear {
  self.result = [[[PaymentInfo alloc] init] autorelease];
  return self;
}
- (PaymentInfo_Builder*) clone {
  return [PaymentInfo builderWithPrototype:result];
}
- (PaymentInfo*) defaultInstance {
  return [PaymentInfo defaultInstance];
}
- (PaymentInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PaymentInfo*) buildPartial {
  PaymentInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PaymentInfo_Builder*) mergeFrom:(PaymentInfo*) other {
  if (other == [PaymentInfo defaultInstance]) {
    return self;
  }
  if (other.hasPaymentType) {
    [self setPaymentType:other.paymentType];
  }
  if (other.hasCreditCard) {
    [self mergeCreditCard:other.creditCard];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PaymentInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PaymentInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPaymentType:[input readInt32]];
        break;
      }
      case 18: {
        CreditCard_Builder* subBuilder = [CreditCard builder];
        if (self.hasCreditCard) {
          [subBuilder mergeFrom:self.creditCard];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreditCard:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPaymentType {
  return result.hasPaymentType;
}
- (int32_t) paymentType {
  return result.paymentType;
}
- (PaymentInfo_Builder*) setPaymentType:(int32_t) value {
  result.hasPaymentType = YES;
  result.paymentType = value;
  return self;
}
- (PaymentInfo_Builder*) clearPaymentType {
  result.hasPaymentType = NO;
  result.paymentType = 0;
  return self;
}
- (BOOL) hasCreditCard {
  return result.hasCreditCard;
}
- (CreditCard*) creditCard {
  return result.creditCard;
}
- (PaymentInfo_Builder*) setCreditCard:(CreditCard*) value {
  result.hasCreditCard = YES;
  result.creditCard = value;
  return self;
}
- (PaymentInfo_Builder*) setCreditCardBuilder:(CreditCard_Builder*) builderForValue {
  return [self setCreditCard:[builderForValue build]];
}
- (PaymentInfo_Builder*) mergeCreditCard:(CreditCard*) value {
  if (result.hasCreditCard &&
      result.creditCard != [CreditCard defaultInstance]) {
    result.creditCard =
      [[[CreditCard builderWithPrototype:result.creditCard] mergeFrom:value] buildPartial];
  } else {
    result.creditCard = value;
  }
  result.hasCreditCard = YES;
  return self;
}
- (PaymentInfo_Builder*) clearCreditCard {
  result.hasCreditCard = NO;
  result.creditCard = [CreditCard defaultInstance];
  return self;
}
@end

@interface AirHotelOrder ()
@property (retain) NSString* userId;
@property (retain) NSString* loginId;
@property (retain) NSString* token;
@property int32_t departCityId;
@property int32_t arriveCityId;
@property (retain) NSMutableArray* mutableAirOrdersList;
@property (retain) NSMutableArray* mutableHotelOrdersList;
@property (retain) PaymentInfo* paymentInfo;
@property (retain) Person* contactPerson;
@property int32_t orderId;
@property int32_t orderDate;
@property int32_t orderStatus;
@property (retain) NSString* hotelPrice;
@property (retain) NSString* airPrice;
@property AirPaymentStatus airPaymentStatus;
@end

@implementation AirHotelOrder

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasLoginId {
  return !!hasLoginId_;
}
- (void) setHasLoginId:(BOOL) value {
  hasLoginId_ = !!value;
}
@synthesize loginId;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) value {
  hasToken_ = !!value;
}
@synthesize token;
- (BOOL) hasDepartCityId {
  return !!hasDepartCityId_;
}
- (void) setHasDepartCityId:(BOOL) value {
  hasDepartCityId_ = !!value;
}
@synthesize departCityId;
- (BOOL) hasArriveCityId {
  return !!hasArriveCityId_;
}
- (void) setHasArriveCityId:(BOOL) value {
  hasArriveCityId_ = !!value;
}
@synthesize arriveCityId;
@synthesize mutableAirOrdersList;
@synthesize mutableHotelOrdersList;
- (BOOL) hasPaymentInfo {
  return !!hasPaymentInfo_;
}
- (void) setHasPaymentInfo:(BOOL) value {
  hasPaymentInfo_ = !!value;
}
@synthesize paymentInfo;
- (BOOL) hasContactPerson {
  return !!hasContactPerson_;
}
- (void) setHasContactPerson:(BOOL) value {
  hasContactPerson_ = !!value;
}
@synthesize contactPerson;
- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) value {
  hasOrderId_ = !!value;
}
@synthesize orderId;
- (BOOL) hasOrderDate {
  return !!hasOrderDate_;
}
- (void) setHasOrderDate:(BOOL) value {
  hasOrderDate_ = !!value;
}
@synthesize orderDate;
- (BOOL) hasOrderStatus {
  return !!hasOrderStatus_;
}
- (void) setHasOrderStatus:(BOOL) value {
  hasOrderStatus_ = !!value;
}
@synthesize orderStatus;
- (BOOL) hasHotelPrice {
  return !!hasHotelPrice_;
}
- (void) setHasHotelPrice:(BOOL) value {
  hasHotelPrice_ = !!value;
}
@synthesize hotelPrice;
- (BOOL) hasAirPrice {
  return !!hasAirPrice_;
}
- (void) setHasAirPrice:(BOOL) value {
  hasAirPrice_ = !!value;
}
@synthesize airPrice;
- (BOOL) hasAirPaymentStatus {
  return !!hasAirPaymentStatus_;
}
- (void) setHasAirPaymentStatus:(BOOL) value {
  hasAirPaymentStatus_ = !!value;
}
@synthesize airPaymentStatus;
- (void) dealloc {
  self.userId = nil;
  self.loginId = nil;
  self.token = nil;
  self.mutableAirOrdersList = nil;
  self.mutableHotelOrdersList = nil;
  self.paymentInfo = nil;
  self.contactPerson = nil;
  self.hotelPrice = nil;
  self.airPrice = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.loginId = @"";
    self.token = @"";
    self.departCityId = 0;
    self.arriveCityId = 0;
    self.paymentInfo = [PaymentInfo defaultInstance];
    self.contactPerson = [Person defaultInstance];
    self.orderId = 0;
    self.orderDate = 0;
    self.orderStatus = 0;
    self.hotelPrice = @"";
    self.airPrice = @"";
    self.airPaymentStatus = AirPaymentStatusAirPaymentNotPaid;
  }
  return self;
}
static AirHotelOrder* defaultAirHotelOrderInstance = nil;
+ (void) initialize {
  if (self == [AirHotelOrder class]) {
    defaultAirHotelOrderInstance = [[AirHotelOrder alloc] init];
  }
}
+ (AirHotelOrder*) defaultInstance {
  return defaultAirHotelOrderInstance;
}
- (AirHotelOrder*) defaultInstance {
  return defaultAirHotelOrderInstance;
}
- (NSArray*) airOrdersList {
  return mutableAirOrdersList;
}
- (AirOrder*) airOrdersAtIndex:(int32_t) index {
  id value = [mutableAirOrdersList objectAtIndex:index];
  return value;
}
- (NSArray*) hotelOrdersList {
  return mutableHotelOrdersList;
}
- (HotelOrder*) hotelOrdersAtIndex:(int32_t) index {
  id value = [mutableHotelOrdersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (AirOrder* element in self.airOrdersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (HotelOrder* element in self.hotelOrdersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasPaymentInfo) {
    if (!self.paymentInfo.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasLoginId) {
    [output writeString:2 value:self.loginId];
  }
  if (self.hasToken) {
    [output writeString:3 value:self.token];
  }
  if (self.hasDepartCityId) {
    [output writeInt32:4 value:self.departCityId];
  }
  if (self.hasArriveCityId) {
    [output writeInt32:5 value:self.arriveCityId];
  }
  for (AirOrder* element in self.airOrdersList) {
    [output writeMessage:6 value:element];
  }
  for (HotelOrder* element in self.hotelOrdersList) {
    [output writeMessage:7 value:element];
  }
  if (self.hasPaymentInfo) {
    [output writeMessage:8 value:self.paymentInfo];
  }
  if (self.hasContactPerson) {
    [output writeMessage:9 value:self.contactPerson];
  }
  if (self.hasOrderId) {
    [output writeInt32:20 value:self.orderId];
  }
  if (self.hasOrderDate) {
    [output writeInt32:21 value:self.orderDate];
  }
  if (self.hasOrderStatus) {
    [output writeInt32:22 value:self.orderStatus];
  }
  if (self.hasHotelPrice) {
    [output writeString:30 value:self.hotelPrice];
  }
  if (self.hasAirPrice) {
    [output writeString:31 value:self.airPrice];
  }
  if (self.hasAirPaymentStatus) {
    [output writeEnum:33 value:self.airPaymentStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasLoginId) {
    size += computeStringSize(2, self.loginId);
  }
  if (self.hasToken) {
    size += computeStringSize(3, self.token);
  }
  if (self.hasDepartCityId) {
    size += computeInt32Size(4, self.departCityId);
  }
  if (self.hasArriveCityId) {
    size += computeInt32Size(5, self.arriveCityId);
  }
  for (AirOrder* element in self.airOrdersList) {
    size += computeMessageSize(6, element);
  }
  for (HotelOrder* element in self.hotelOrdersList) {
    size += computeMessageSize(7, element);
  }
  if (self.hasPaymentInfo) {
    size += computeMessageSize(8, self.paymentInfo);
  }
  if (self.hasContactPerson) {
    size += computeMessageSize(9, self.contactPerson);
  }
  if (self.hasOrderId) {
    size += computeInt32Size(20, self.orderId);
  }
  if (self.hasOrderDate) {
    size += computeInt32Size(21, self.orderDate);
  }
  if (self.hasOrderStatus) {
    size += computeInt32Size(22, self.orderStatus);
  }
  if (self.hasHotelPrice) {
    size += computeStringSize(30, self.hotelPrice);
  }
  if (self.hasAirPrice) {
    size += computeStringSize(31, self.airPrice);
  }
  if (self.hasAirPaymentStatus) {
    size += computeEnumSize(33, self.airPaymentStatus);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AirHotelOrder*) parseFromData:(NSData*) data {
  return (AirHotelOrder*)[[[AirHotelOrder builder] mergeFromData:data] build];
}
+ (AirHotelOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirHotelOrder*)[[[AirHotelOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AirHotelOrder*) parseFromInputStream:(NSInputStream*) input {
  return (AirHotelOrder*)[[[AirHotelOrder builder] mergeFromInputStream:input] build];
}
+ (AirHotelOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirHotelOrder*)[[[AirHotelOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AirHotelOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AirHotelOrder*)[[[AirHotelOrder builder] mergeFromCodedInputStream:input] build];
}
+ (AirHotelOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirHotelOrder*)[[[AirHotelOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AirHotelOrder_Builder*) builder {
  return [[[AirHotelOrder_Builder alloc] init] autorelease];
}
+ (AirHotelOrder_Builder*) builderWithPrototype:(AirHotelOrder*) prototype {
  return [[AirHotelOrder builder] mergeFrom:prototype];
}
- (AirHotelOrder_Builder*) builder {
  return [AirHotelOrder builder];
}
@end

@interface AirHotelOrder_Builder()
@property (retain) AirHotelOrder* result;
@end

@implementation AirHotelOrder_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AirHotelOrder alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AirHotelOrder_Builder*) clear {
  self.result = [[[AirHotelOrder alloc] init] autorelease];
  return self;
}
- (AirHotelOrder_Builder*) clone {
  return [AirHotelOrder builderWithPrototype:result];
}
- (AirHotelOrder*) defaultInstance {
  return [AirHotelOrder defaultInstance];
}
- (AirHotelOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AirHotelOrder*) buildPartial {
  AirHotelOrder* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AirHotelOrder_Builder*) mergeFrom:(AirHotelOrder*) other {
  if (other == [AirHotelOrder defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLoginId) {
    [self setLoginId:other.loginId];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  if (other.hasDepartCityId) {
    [self setDepartCityId:other.departCityId];
  }
  if (other.hasArriveCityId) {
    [self setArriveCityId:other.arriveCityId];
  }
  if (other.mutableAirOrdersList.count > 0) {
    if (result.mutableAirOrdersList == nil) {
      result.mutableAirOrdersList = [NSMutableArray array];
    }
    [result.mutableAirOrdersList addObjectsFromArray:other.mutableAirOrdersList];
  }
  if (other.mutableHotelOrdersList.count > 0) {
    if (result.mutableHotelOrdersList == nil) {
      result.mutableHotelOrdersList = [NSMutableArray array];
    }
    [result.mutableHotelOrdersList addObjectsFromArray:other.mutableHotelOrdersList];
  }
  if (other.hasPaymentInfo) {
    [self mergePaymentInfo:other.paymentInfo];
  }
  if (other.hasContactPerson) {
    [self mergeContactPerson:other.contactPerson];
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  if (other.hasOrderDate) {
    [self setOrderDate:other.orderDate];
  }
  if (other.hasOrderStatus) {
    [self setOrderStatus:other.orderStatus];
  }
  if (other.hasHotelPrice) {
    [self setHotelPrice:other.hotelPrice];
  }
  if (other.hasAirPrice) {
    [self setAirPrice:other.airPrice];
  }
  if (other.hasAirPaymentStatus) {
    [self setAirPaymentStatus:other.airPaymentStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AirHotelOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AirHotelOrder_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setLoginId:[input readString]];
        break;
      }
      case 26: {
        [self setToken:[input readString]];
        break;
      }
      case 32: {
        [self setDepartCityId:[input readInt32]];
        break;
      }
      case 40: {
        [self setArriveCityId:[input readInt32]];
        break;
      }
      case 50: {
        AirOrder_Builder* subBuilder = [AirOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAirOrders:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        HotelOrder_Builder* subBuilder = [HotelOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addHotelOrders:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        PaymentInfo_Builder* subBuilder = [PaymentInfo builder];
        if (self.hasPaymentInfo) {
          [subBuilder mergeFrom:self.paymentInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPaymentInfo:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        Person_Builder* subBuilder = [Person builder];
        if (self.hasContactPerson) {
          [subBuilder mergeFrom:self.contactPerson];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContactPerson:[subBuilder buildPartial]];
        break;
      }
      case 160: {
        [self setOrderId:[input readInt32]];
        break;
      }
      case 168: {
        [self setOrderDate:[input readInt32]];
        break;
      }
      case 176: {
        [self setOrderStatus:[input readInt32]];
        break;
      }
      case 242: {
        [self setHotelPrice:[input readString]];
        break;
      }
      case 250: {
        [self setAirPrice:[input readString]];
        break;
      }
      case 264: {
        int32_t value = [input readEnum];
        if (AirPaymentStatusIsValidValue(value)) {
          [self setAirPaymentStatus:value];
        } else {
          [unknownFields mergeVarintField:33 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (AirHotelOrder_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (AirHotelOrder_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasLoginId {
  return result.hasLoginId;
}
- (NSString*) loginId {
  return result.loginId;
}
- (AirHotelOrder_Builder*) setLoginId:(NSString*) value {
  result.hasLoginId = YES;
  result.loginId = value;
  return self;
}
- (AirHotelOrder_Builder*) clearLoginId {
  result.hasLoginId = NO;
  result.loginId = @"";
  return self;
}
- (BOOL) hasToken {
  return result.hasToken;
}
- (NSString*) token {
  return result.token;
}
- (AirHotelOrder_Builder*) setToken:(NSString*) value {
  result.hasToken = YES;
  result.token = value;
  return self;
}
- (AirHotelOrder_Builder*) clearToken {
  result.hasToken = NO;
  result.token = @"";
  return self;
}
- (BOOL) hasDepartCityId {
  return result.hasDepartCityId;
}
- (int32_t) departCityId {
  return result.departCityId;
}
- (AirHotelOrder_Builder*) setDepartCityId:(int32_t) value {
  result.hasDepartCityId = YES;
  result.departCityId = value;
  return self;
}
- (AirHotelOrder_Builder*) clearDepartCityId {
  result.hasDepartCityId = NO;
  result.departCityId = 0;
  return self;
}
- (BOOL) hasArriveCityId {
  return result.hasArriveCityId;
}
- (int32_t) arriveCityId {
  return result.arriveCityId;
}
- (AirHotelOrder_Builder*) setArriveCityId:(int32_t) value {
  result.hasArriveCityId = YES;
  result.arriveCityId = value;
  return self;
}
- (AirHotelOrder_Builder*) clearArriveCityId {
  result.hasArriveCityId = NO;
  result.arriveCityId = 0;
  return self;
}
- (NSArray*) airOrdersList {
  if (result.mutableAirOrdersList == nil) { return [NSArray array]; }
  return result.mutableAirOrdersList;
}
- (AirOrder*) airOrdersAtIndex:(int32_t) index {
  return [result airOrdersAtIndex:index];
}
- (AirHotelOrder_Builder*) replaceAirOrdersAtIndex:(int32_t) index with:(AirOrder*) value {
  [result.mutableAirOrdersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (AirHotelOrder_Builder*) addAllAirOrders:(NSArray*) values {
  if (result.mutableAirOrdersList == nil) {
    result.mutableAirOrdersList = [NSMutableArray array];
  }
  [result.mutableAirOrdersList addObjectsFromArray:values];
  return self;
}
- (AirHotelOrder_Builder*) clearAirOrdersList {
  result.mutableAirOrdersList = nil;
  return self;
}
- (AirHotelOrder_Builder*) addAirOrders:(AirOrder*) value {
  if (result.mutableAirOrdersList == nil) {
    result.mutableAirOrdersList = [NSMutableArray array];
  }
  [result.mutableAirOrdersList addObject:value];
  return self;
}
- (NSArray*) hotelOrdersList {
  if (result.mutableHotelOrdersList == nil) { return [NSArray array]; }
  return result.mutableHotelOrdersList;
}
- (HotelOrder*) hotelOrdersAtIndex:(int32_t) index {
  return [result hotelOrdersAtIndex:index];
}
- (AirHotelOrder_Builder*) replaceHotelOrdersAtIndex:(int32_t) index with:(HotelOrder*) value {
  [result.mutableHotelOrdersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (AirHotelOrder_Builder*) addAllHotelOrders:(NSArray*) values {
  if (result.mutableHotelOrdersList == nil) {
    result.mutableHotelOrdersList = [NSMutableArray array];
  }
  [result.mutableHotelOrdersList addObjectsFromArray:values];
  return self;
}
- (AirHotelOrder_Builder*) clearHotelOrdersList {
  result.mutableHotelOrdersList = nil;
  return self;
}
- (AirHotelOrder_Builder*) addHotelOrders:(HotelOrder*) value {
  if (result.mutableHotelOrdersList == nil) {
    result.mutableHotelOrdersList = [NSMutableArray array];
  }
  [result.mutableHotelOrdersList addObject:value];
  return self;
}
- (BOOL) hasPaymentInfo {
  return result.hasPaymentInfo;
}
- (PaymentInfo*) paymentInfo {
  return result.paymentInfo;
}
- (AirHotelOrder_Builder*) setPaymentInfo:(PaymentInfo*) value {
  result.hasPaymentInfo = YES;
  result.paymentInfo = value;
  return self;
}
- (AirHotelOrder_Builder*) setPaymentInfoBuilder:(PaymentInfo_Builder*) builderForValue {
  return [self setPaymentInfo:[builderForValue build]];
}
- (AirHotelOrder_Builder*) mergePaymentInfo:(PaymentInfo*) value {
  if (result.hasPaymentInfo &&
      result.paymentInfo != [PaymentInfo defaultInstance]) {
    result.paymentInfo =
      [[[PaymentInfo builderWithPrototype:result.paymentInfo] mergeFrom:value] buildPartial];
  } else {
    result.paymentInfo = value;
  }
  result.hasPaymentInfo = YES;
  return self;
}
- (AirHotelOrder_Builder*) clearPaymentInfo {
  result.hasPaymentInfo = NO;
  result.paymentInfo = [PaymentInfo defaultInstance];
  return self;
}
- (BOOL) hasContactPerson {
  return result.hasContactPerson;
}
- (Person*) contactPerson {
  return result.contactPerson;
}
- (AirHotelOrder_Builder*) setContactPerson:(Person*) value {
  result.hasContactPerson = YES;
  result.contactPerson = value;
  return self;
}
- (AirHotelOrder_Builder*) setContactPersonBuilder:(Person_Builder*) builderForValue {
  return [self setContactPerson:[builderForValue build]];
}
- (AirHotelOrder_Builder*) mergeContactPerson:(Person*) value {
  if (result.hasContactPerson &&
      result.contactPerson != [Person defaultInstance]) {
    result.contactPerson =
      [[[Person builderWithPrototype:result.contactPerson] mergeFrom:value] buildPartial];
  } else {
    result.contactPerson = value;
  }
  result.hasContactPerson = YES;
  return self;
}
- (AirHotelOrder_Builder*) clearContactPerson {
  result.hasContactPerson = NO;
  result.contactPerson = [Person defaultInstance];
  return self;
}
- (BOOL) hasOrderId {
  return result.hasOrderId;
}
- (int32_t) orderId {
  return result.orderId;
}
- (AirHotelOrder_Builder*) setOrderId:(int32_t) value {
  result.hasOrderId = YES;
  result.orderId = value;
  return self;
}
- (AirHotelOrder_Builder*) clearOrderId {
  result.hasOrderId = NO;
  result.orderId = 0;
  return self;
}
- (BOOL) hasOrderDate {
  return result.hasOrderDate;
}
- (int32_t) orderDate {
  return result.orderDate;
}
- (AirHotelOrder_Builder*) setOrderDate:(int32_t) value {
  result.hasOrderDate = YES;
  result.orderDate = value;
  return self;
}
- (AirHotelOrder_Builder*) clearOrderDate {
  result.hasOrderDate = NO;
  result.orderDate = 0;
  return self;
}
- (BOOL) hasOrderStatus {
  return result.hasOrderStatus;
}
- (int32_t) orderStatus {
  return result.orderStatus;
}
- (AirHotelOrder_Builder*) setOrderStatus:(int32_t) value {
  result.hasOrderStatus = YES;
  result.orderStatus = value;
  return self;
}
- (AirHotelOrder_Builder*) clearOrderStatus {
  result.hasOrderStatus = NO;
  result.orderStatus = 0;
  return self;
}
- (BOOL) hasHotelPrice {
  return result.hasHotelPrice;
}
- (NSString*) hotelPrice {
  return result.hotelPrice;
}
- (AirHotelOrder_Builder*) setHotelPrice:(NSString*) value {
  result.hasHotelPrice = YES;
  result.hotelPrice = value;
  return self;
}
- (AirHotelOrder_Builder*) clearHotelPrice {
  result.hasHotelPrice = NO;
  result.hotelPrice = @"";
  return self;
}
- (BOOL) hasAirPrice {
  return result.hasAirPrice;
}
- (NSString*) airPrice {
  return result.airPrice;
}
- (AirHotelOrder_Builder*) setAirPrice:(NSString*) value {
  result.hasAirPrice = YES;
  result.airPrice = value;
  return self;
}
- (AirHotelOrder_Builder*) clearAirPrice {
  result.hasAirPrice = NO;
  result.airPrice = @"";
  return self;
}
- (BOOL) hasAirPaymentStatus {
  return result.hasAirPaymentStatus;
}
- (AirPaymentStatus) airPaymentStatus {
  return result.airPaymentStatus;
}
- (AirHotelOrder_Builder*) setAirPaymentStatus:(AirPaymentStatus) value {
  result.hasAirPaymentStatus = YES;
  result.airPaymentStatus = value;
  return self;
}
- (AirHotelOrder_Builder*) clearAirPaymentStatus {
  result.hasAirPaymentStatus = NO;
  result.airPaymentStatus = AirPaymentStatusAirPaymentNotPaid;
  return self;
}
@end

@interface AirHotelOrderList ()
@property (retain) NSMutableArray* mutableAirHotelOrdersList;
@end

@implementation AirHotelOrderList

@synthesize mutableAirHotelOrdersList;
- (void) dealloc {
  self.mutableAirHotelOrdersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static AirHotelOrderList* defaultAirHotelOrderListInstance = nil;
+ (void) initialize {
  if (self == [AirHotelOrderList class]) {
    defaultAirHotelOrderListInstance = [[AirHotelOrderList alloc] init];
  }
}
+ (AirHotelOrderList*) defaultInstance {
  return defaultAirHotelOrderListInstance;
}
- (AirHotelOrderList*) defaultInstance {
  return defaultAirHotelOrderListInstance;
}
- (NSArray*) airHotelOrdersList {
  return mutableAirHotelOrdersList;
}
- (AirHotelOrder*) airHotelOrdersAtIndex:(int32_t) index {
  id value = [mutableAirHotelOrdersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (AirHotelOrder* element in self.airHotelOrdersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (AirHotelOrder* element in self.airHotelOrdersList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (AirHotelOrder* element in self.airHotelOrdersList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AirHotelOrderList*) parseFromData:(NSData*) data {
  return (AirHotelOrderList*)[[[AirHotelOrderList builder] mergeFromData:data] build];
}
+ (AirHotelOrderList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirHotelOrderList*)[[[AirHotelOrderList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AirHotelOrderList*) parseFromInputStream:(NSInputStream*) input {
  return (AirHotelOrderList*)[[[AirHotelOrderList builder] mergeFromInputStream:input] build];
}
+ (AirHotelOrderList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirHotelOrderList*)[[[AirHotelOrderList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AirHotelOrderList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AirHotelOrderList*)[[[AirHotelOrderList builder] mergeFromCodedInputStream:input] build];
}
+ (AirHotelOrderList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AirHotelOrderList*)[[[AirHotelOrderList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AirHotelOrderList_Builder*) builder {
  return [[[AirHotelOrderList_Builder alloc] init] autorelease];
}
+ (AirHotelOrderList_Builder*) builderWithPrototype:(AirHotelOrderList*) prototype {
  return [[AirHotelOrderList builder] mergeFrom:prototype];
}
- (AirHotelOrderList_Builder*) builder {
  return [AirHotelOrderList builder];
}
@end

@interface AirHotelOrderList_Builder()
@property (retain) AirHotelOrderList* result;
@end

@implementation AirHotelOrderList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AirHotelOrderList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AirHotelOrderList_Builder*) clear {
  self.result = [[[AirHotelOrderList alloc] init] autorelease];
  return self;
}
- (AirHotelOrderList_Builder*) clone {
  return [AirHotelOrderList builderWithPrototype:result];
}
- (AirHotelOrderList*) defaultInstance {
  return [AirHotelOrderList defaultInstance];
}
- (AirHotelOrderList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AirHotelOrderList*) buildPartial {
  AirHotelOrderList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AirHotelOrderList_Builder*) mergeFrom:(AirHotelOrderList*) other {
  if (other == [AirHotelOrderList defaultInstance]) {
    return self;
  }
  if (other.mutableAirHotelOrdersList.count > 0) {
    if (result.mutableAirHotelOrdersList == nil) {
      result.mutableAirHotelOrdersList = [NSMutableArray array];
    }
    [result.mutableAirHotelOrdersList addObjectsFromArray:other.mutableAirHotelOrdersList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AirHotelOrderList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AirHotelOrderList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        AirHotelOrder_Builder* subBuilder = [AirHotelOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAirHotelOrders:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) airHotelOrdersList {
  if (result.mutableAirHotelOrdersList == nil) { return [NSArray array]; }
  return result.mutableAirHotelOrdersList;
}
- (AirHotelOrder*) airHotelOrdersAtIndex:(int32_t) index {
  return [result airHotelOrdersAtIndex:index];
}
- (AirHotelOrderList_Builder*) replaceAirHotelOrdersAtIndex:(int32_t) index with:(AirHotelOrder*) value {
  [result.mutableAirHotelOrdersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (AirHotelOrderList_Builder*) addAllAirHotelOrders:(NSArray*) values {
  if (result.mutableAirHotelOrdersList == nil) {
    result.mutableAirHotelOrdersList = [NSMutableArray array];
  }
  [result.mutableAirHotelOrdersList addObjectsFromArray:values];
  return self;
}
- (AirHotelOrderList_Builder*) clearAirHotelOrdersList {
  result.mutableAirHotelOrdersList = nil;
  return self;
}
- (AirHotelOrderList_Builder*) addAirHotelOrders:(AirHotelOrder*) value {
  if (result.mutableAirHotelOrdersList == nil) {
    result.mutableAirHotelOrdersList = [NSMutableArray array];
  }
  [result.mutableAirHotelOrdersList addObject:value];
  return self;
}
@end

