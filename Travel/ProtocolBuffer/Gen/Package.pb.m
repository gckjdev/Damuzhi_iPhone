// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Package.pb.h"

@implementation PackageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PackageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [PlaceRoot registerAllExtensions:registry];
    [CityOverviewRoot registerAllExtensions:registry];
    [TravelTipsRoot registerAllExtensions:registry];
    [AppRoot registerAllExtensions:registry];
    [TouristRouteRoot registerAllExtensions:registry];
    [AirHotelRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL LanguageTypeIsValidValue(LanguageType value) {
  switch (value) {
    case LanguageTypeZhHans:
    case LanguageTypeZhHant:
    case LanguageTypeEn:
      return YES;
    default:
      return NO;
  }
}
BOOL LoginTypeIsValidValue(LoginType value) {
  switch (value) {
    case LoginTypeTelephone:
    case LoginTypeEmail:
      return YES;
    default:
      return NO;
  }
}
@interface Package ()
@property (retain) NSString* version;
@property int32_t cityId;
@property (retain) NSString* cityName;
@property LanguageType language;
@end

@implementation Package

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) value {
  hasCityName_ = !!value;
}
@synthesize cityName;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
- (void) dealloc {
  self.version = nil;
  self.cityName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.version = @"";
    self.cityId = 0;
    self.cityName = @"";
    self.language = LanguageTypeZhHans;
  }
  return self;
}
static Package* defaultPackageInstance = nil;
+ (void) initialize {
  if (self == [Package class]) {
    defaultPackageInstance = [[Package alloc] init];
  }
}
+ (Package*) defaultInstance {
  return defaultPackageInstance;
}
- (Package*) defaultInstance {
  return defaultPackageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasVersion) {
    return NO;
  }
  if (!self.hasCityId) {
    return NO;
  }
  if (!self.hasCityName) {
    return NO;
  }
  if (!self.hasLanguage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeString:1 value:self.version];
  }
  if (self.hasCityId) {
    [output writeInt32:2 value:self.cityId];
  }
  if (self.hasCityName) {
    [output writeString:3 value:self.cityName];
  }
  if (self.hasLanguage) {
    [output writeEnum:4 value:self.language];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasVersion) {
    size += computeStringSize(1, self.version);
  }
  if (self.hasCityId) {
    size += computeInt32Size(2, self.cityId);
  }
  if (self.hasCityName) {
    size += computeStringSize(3, self.cityName);
  }
  if (self.hasLanguage) {
    size += computeEnumSize(4, self.language);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Package*) parseFromData:(NSData*) data {
  return (Package*)[[[Package builder] mergeFromData:data] build];
}
+ (Package*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Package*)[[[Package builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Package*) parseFromInputStream:(NSInputStream*) input {
  return (Package*)[[[Package builder] mergeFromInputStream:input] build];
}
+ (Package*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Package*)[[[Package builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Package*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Package*)[[[Package builder] mergeFromCodedInputStream:input] build];
}
+ (Package*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Package*)[[[Package builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Package_Builder*) builder {
  return [[[Package_Builder alloc] init] autorelease];
}
+ (Package_Builder*) builderWithPrototype:(Package*) prototype {
  return [[Package builder] mergeFrom:prototype];
}
- (Package_Builder*) builder {
  return [Package builder];
}
@end

@interface Package_Builder()
@property (retain) Package* result;
@end

@implementation Package_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Package alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Package_Builder*) clear {
  self.result = [[[Package alloc] init] autorelease];
  return self;
}
- (Package_Builder*) clone {
  return [Package builderWithPrototype:result];
}
- (Package*) defaultInstance {
  return [Package defaultInstance];
}
- (Package*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Package*) buildPartial {
  Package* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Package_Builder*) mergeFrom:(Package*) other {
  if (other == [Package defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Package_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Package_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setVersion:[input readString]];
        break;
      }
      case 16: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 26: {
        [self setCityName:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (LanguageTypeIsValidValue(value)) {
          [self setLanguage:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (NSString*) version {
  return result.version;
}
- (Package_Builder*) setVersion:(NSString*) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (Package_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = @"";
  return self;
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (Package_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (Package_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasCityName {
  return result.hasCityName;
}
- (NSString*) cityName {
  return result.cityName;
}
- (Package_Builder*) setCityName:(NSString*) value {
  result.hasCityName = YES;
  result.cityName = value;
  return self;
}
- (Package_Builder*) clearCityName {
  result.hasCityName = NO;
  result.cityName = @"";
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (LanguageType) language {
  return result.language;
}
- (Package_Builder*) setLanguage:(LanguageType) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (Package_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = LanguageTypeZhHans;
  return self;
}
@end

@interface UserInfo ()
@property (retain) NSString* loginId;
@property int32_t loginType;
@property (retain) NSString* nickName;
@property (retain) NSString* fullName;
@property (retain) NSString* telephone;
@property (retain) NSString* email;
@property (retain) NSString* address;
@property int32_t gender;
@end

@implementation UserInfo

- (BOOL) hasLoginId {
  return !!hasLoginId_;
}
- (void) setHasLoginId:(BOOL) value {
  hasLoginId_ = !!value;
}
@synthesize loginId;
- (BOOL) hasLoginType {
  return !!hasLoginType_;
}
- (void) setHasLoginType:(BOOL) value {
  hasLoginType_ = !!value;
}
@synthesize loginType;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasFullName {
  return !!hasFullName_;
}
- (void) setHasFullName:(BOOL) value {
  hasFullName_ = !!value;
}
@synthesize fullName;
- (BOOL) hasTelephone {
  return !!hasTelephone_;
}
- (void) setHasTelephone:(BOOL) value {
  hasTelephone_ = !!value;
}
@synthesize telephone;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) value {
  hasEmail_ = !!value;
}
@synthesize email;
- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) value {
  hasAddress_ = !!value;
}
@synthesize address;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
@synthesize gender;
- (void) dealloc {
  self.loginId = nil;
  self.nickName = nil;
  self.fullName = nil;
  self.telephone = nil;
  self.email = nil;
  self.address = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.loginId = @"";
    self.loginType = 0;
    self.nickName = @"";
    self.fullName = @"";
    self.telephone = @"";
    self.email = @"";
    self.address = @"";
    self.gender = 0;
  }
  return self;
}
static UserInfo* defaultUserInfoInstance = nil;
+ (void) initialize {
  if (self == [UserInfo class]) {
    defaultUserInfoInstance = [[UserInfo alloc] init];
  }
}
+ (UserInfo*) defaultInstance {
  return defaultUserInfoInstance;
}
- (UserInfo*) defaultInstance {
  return defaultUserInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLoginId) {
    return NO;
  }
  if (!self.hasLoginType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLoginId) {
    [output writeString:1 value:self.loginId];
  }
  if (self.hasLoginType) {
    [output writeInt32:2 value:self.loginType];
  }
  if (self.hasNickName) {
    [output writeString:5 value:self.nickName];
  }
  if (self.hasFullName) {
    [output writeString:10 value:self.fullName];
  }
  if (self.hasTelephone) {
    [output writeString:15 value:self.telephone];
  }
  if (self.hasEmail) {
    [output writeString:16 value:self.email];
  }
  if (self.hasAddress) {
    [output writeString:20 value:self.address];
  }
  if (self.hasGender) {
    [output writeInt32:30 value:self.gender];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLoginId) {
    size += computeStringSize(1, self.loginId);
  }
  if (self.hasLoginType) {
    size += computeInt32Size(2, self.loginType);
  }
  if (self.hasNickName) {
    size += computeStringSize(5, self.nickName);
  }
  if (self.hasFullName) {
    size += computeStringSize(10, self.fullName);
  }
  if (self.hasTelephone) {
    size += computeStringSize(15, self.telephone);
  }
  if (self.hasEmail) {
    size += computeStringSize(16, self.email);
  }
  if (self.hasAddress) {
    size += computeStringSize(20, self.address);
  }
  if (self.hasGender) {
    size += computeInt32Size(30, self.gender);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserInfo*) parseFromData:(NSData*) data {
  return (UserInfo*)[[[UserInfo builder] mergeFromData:data] build];
}
+ (UserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserInfo*) parseFromInputStream:(NSInputStream*) input {
  return (UserInfo*)[[[UserInfo builder] mergeFromInputStream:input] build];
}
+ (UserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserInfo*)[[[UserInfo builder] mergeFromCodedInputStream:input] build];
}
+ (UserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserInfo_Builder*) builder {
  return [[[UserInfo_Builder alloc] init] autorelease];
}
+ (UserInfo_Builder*) builderWithPrototype:(UserInfo*) prototype {
  return [[UserInfo builder] mergeFrom:prototype];
}
- (UserInfo_Builder*) builder {
  return [UserInfo builder];
}
@end

@interface UserInfo_Builder()
@property (retain) UserInfo* result;
@end

@implementation UserInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserInfo_Builder*) clear {
  self.result = [[[UserInfo alloc] init] autorelease];
  return self;
}
- (UserInfo_Builder*) clone {
  return [UserInfo builderWithPrototype:result];
}
- (UserInfo*) defaultInstance {
  return [UserInfo defaultInstance];
}
- (UserInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserInfo*) buildPartial {
  UserInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserInfo_Builder*) mergeFrom:(UserInfo*) other {
  if (other == [UserInfo defaultInstance]) {
    return self;
  }
  if (other.hasLoginId) {
    [self setLoginId:other.loginId];
  }
  if (other.hasLoginType) {
    [self setLoginType:other.loginType];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasFullName) {
    [self setFullName:other.fullName];
  }
  if (other.hasTelephone) {
    [self setTelephone:other.telephone];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setLoginId:[input readString]];
        break;
      }
      case 16: {
        [self setLoginType:[input readInt32]];
        break;
      }
      case 42: {
        [self setNickName:[input readString]];
        break;
      }
      case 82: {
        [self setFullName:[input readString]];
        break;
      }
      case 122: {
        [self setTelephone:[input readString]];
        break;
      }
      case 130: {
        [self setEmail:[input readString]];
        break;
      }
      case 162: {
        [self setAddress:[input readString]];
        break;
      }
      case 240: {
        [self setGender:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLoginId {
  return result.hasLoginId;
}
- (NSString*) loginId {
  return result.loginId;
}
- (UserInfo_Builder*) setLoginId:(NSString*) value {
  result.hasLoginId = YES;
  result.loginId = value;
  return self;
}
- (UserInfo_Builder*) clearLoginId {
  result.hasLoginId = NO;
  result.loginId = @"";
  return self;
}
- (BOOL) hasLoginType {
  return result.hasLoginType;
}
- (int32_t) loginType {
  return result.loginType;
}
- (UserInfo_Builder*) setLoginType:(int32_t) value {
  result.hasLoginType = YES;
  result.loginType = value;
  return self;
}
- (UserInfo_Builder*) clearLoginType {
  result.hasLoginType = NO;
  result.loginType = 0;
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (UserInfo_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (UserInfo_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasFullName {
  return result.hasFullName;
}
- (NSString*) fullName {
  return result.fullName;
}
- (UserInfo_Builder*) setFullName:(NSString*) value {
  result.hasFullName = YES;
  result.fullName = value;
  return self;
}
- (UserInfo_Builder*) clearFullName {
  result.hasFullName = NO;
  result.fullName = @"";
  return self;
}
- (BOOL) hasTelephone {
  return result.hasTelephone;
}
- (NSString*) telephone {
  return result.telephone;
}
- (UserInfo_Builder*) setTelephone:(NSString*) value {
  result.hasTelephone = YES;
  result.telephone = value;
  return self;
}
- (UserInfo_Builder*) clearTelephone {
  result.hasTelephone = NO;
  result.telephone = @"";
  return self;
}
- (BOOL) hasEmail {
  return result.hasEmail;
}
- (NSString*) email {
  return result.email;
}
- (UserInfo_Builder*) setEmail:(NSString*) value {
  result.hasEmail = YES;
  result.email = value;
  return self;
}
- (UserInfo_Builder*) clearEmail {
  result.hasEmail = NO;
  result.email = @"";
  return self;
}
- (BOOL) hasAddress {
  return result.hasAddress;
}
- (NSString*) address {
  return result.address;
}
- (UserInfo_Builder*) setAddress:(NSString*) value {
  result.hasAddress = YES;
  result.address = value;
  return self;
}
- (UserInfo_Builder*) clearAddress {
  result.hasAddress = NO;
  result.address = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (int32_t) gender {
  return result.gender;
}
- (UserInfo_Builder*) setGender:(int32_t) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (UserInfo_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = 0;
  return self;
}
@end

@interface RouteFeekbackList ()
@property (retain) NSMutableArray* mutableRouteFeekbacksList;
@end

@implementation RouteFeekbackList

@synthesize mutableRouteFeekbacksList;
- (void) dealloc {
  self.mutableRouteFeekbacksList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RouteFeekbackList* defaultRouteFeekbackListInstance = nil;
+ (void) initialize {
  if (self == [RouteFeekbackList class]) {
    defaultRouteFeekbackListInstance = [[RouteFeekbackList alloc] init];
  }
}
+ (RouteFeekbackList*) defaultInstance {
  return defaultRouteFeekbackListInstance;
}
- (RouteFeekbackList*) defaultInstance {
  return defaultRouteFeekbackListInstance;
}
- (NSArray*) routeFeekbacksList {
  return mutableRouteFeekbacksList;
}
- (RouteFeekback*) routeFeekbacksAtIndex:(int32_t) index {
  id value = [mutableRouteFeekbacksList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (RouteFeekback* element in self.routeFeekbacksList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (RouteFeekback* element in self.routeFeekbacksList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (RouteFeekback* element in self.routeFeekbacksList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RouteFeekbackList*) parseFromData:(NSData*) data {
  return (RouteFeekbackList*)[[[RouteFeekbackList builder] mergeFromData:data] build];
}
+ (RouteFeekbackList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteFeekbackList*)[[[RouteFeekbackList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RouteFeekbackList*) parseFromInputStream:(NSInputStream*) input {
  return (RouteFeekbackList*)[[[RouteFeekbackList builder] mergeFromInputStream:input] build];
}
+ (RouteFeekbackList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteFeekbackList*)[[[RouteFeekbackList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RouteFeekbackList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RouteFeekbackList*)[[[RouteFeekbackList builder] mergeFromCodedInputStream:input] build];
}
+ (RouteFeekbackList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteFeekbackList*)[[[RouteFeekbackList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RouteFeekbackList_Builder*) builder {
  return [[[RouteFeekbackList_Builder alloc] init] autorelease];
}
+ (RouteFeekbackList_Builder*) builderWithPrototype:(RouteFeekbackList*) prototype {
  return [[RouteFeekbackList builder] mergeFrom:prototype];
}
- (RouteFeekbackList_Builder*) builder {
  return [RouteFeekbackList builder];
}
@end

@interface RouteFeekbackList_Builder()
@property (retain) RouteFeekbackList* result;
@end

@implementation RouteFeekbackList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RouteFeekbackList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RouteFeekbackList_Builder*) clear {
  self.result = [[[RouteFeekbackList alloc] init] autorelease];
  return self;
}
- (RouteFeekbackList_Builder*) clone {
  return [RouteFeekbackList builderWithPrototype:result];
}
- (RouteFeekbackList*) defaultInstance {
  return [RouteFeekbackList defaultInstance];
}
- (RouteFeekbackList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RouteFeekbackList*) buildPartial {
  RouteFeekbackList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RouteFeekbackList_Builder*) mergeFrom:(RouteFeekbackList*) other {
  if (other == [RouteFeekbackList defaultInstance]) {
    return self;
  }
  if (other.mutableRouteFeekbacksList.count > 0) {
    if (result.mutableRouteFeekbacksList == nil) {
      result.mutableRouteFeekbacksList = [NSMutableArray array];
    }
    [result.mutableRouteFeekbacksList addObjectsFromArray:other.mutableRouteFeekbacksList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RouteFeekbackList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RouteFeekbackList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        RouteFeekback_Builder* subBuilder = [RouteFeekback builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRouteFeekbacks:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) routeFeekbacksList {
  if (result.mutableRouteFeekbacksList == nil) { return [NSArray array]; }
  return result.mutableRouteFeekbacksList;
}
- (RouteFeekback*) routeFeekbacksAtIndex:(int32_t) index {
  return [result routeFeekbacksAtIndex:index];
}
- (RouteFeekbackList_Builder*) replaceRouteFeekbacksAtIndex:(int32_t) index with:(RouteFeekback*) value {
  [result.mutableRouteFeekbacksList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (RouteFeekbackList_Builder*) addAllRouteFeekbacks:(NSArray*) values {
  if (result.mutableRouteFeekbacksList == nil) {
    result.mutableRouteFeekbacksList = [NSMutableArray array];
  }
  [result.mutableRouteFeekbacksList addObjectsFromArray:values];
  return self;
}
- (RouteFeekbackList_Builder*) clearRouteFeekbacksList {
  result.mutableRouteFeekbacksList = nil;
  return self;
}
- (RouteFeekbackList_Builder*) addRouteFeekbacks:(RouteFeekback*) value {
  if (result.mutableRouteFeekbacksList == nil) {
    result.mutableRouteFeekbacksList = [NSMutableArray array];
  }
  [result.mutableRouteFeekbacksList addObject:value];
  return self;
}
@end

@interface RouteFeekback ()
@property int32_t routeId;
@property (retain) NSString* loginId;
@property (retain) NSString* nickName;
@property int32_t date;
@property int32_t rank;
@property (retain) NSString* content;
@end

@implementation RouteFeekback

- (BOOL) hasRouteId {
  return !!hasRouteId_;
}
- (void) setHasRouteId:(BOOL) value {
  hasRouteId_ = !!value;
}
@synthesize routeId;
- (BOOL) hasLoginId {
  return !!hasLoginId_;
}
- (void) setHasLoginId:(BOOL) value {
  hasLoginId_ = !!value;
}
@synthesize loginId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value {
  hasRank_ = !!value;
}
@synthesize rank;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (void) dealloc {
  self.loginId = nil;
  self.nickName = nil;
  self.content = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.routeId = 0;
    self.loginId = @"";
    self.nickName = @"";
    self.date = 0;
    self.rank = 0;
    self.content = @"";
  }
  return self;
}
static RouteFeekback* defaultRouteFeekbackInstance = nil;
+ (void) initialize {
  if (self == [RouteFeekback class]) {
    defaultRouteFeekbackInstance = [[RouteFeekback alloc] init];
  }
}
+ (RouteFeekback*) defaultInstance {
  return defaultRouteFeekbackInstance;
}
- (RouteFeekback*) defaultInstance {
  return defaultRouteFeekbackInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRouteId) {
    return NO;
  }
  if (!self.hasLoginId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  if (!self.hasDate) {
    return NO;
  }
  if (!self.hasRank) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRouteId) {
    [output writeInt32:1 value:self.routeId];
  }
  if (self.hasLoginId) {
    [output writeString:2 value:self.loginId];
  }
  if (self.hasNickName) {
    [output writeString:3 value:self.nickName];
  }
  if (self.hasDate) {
    [output writeInt32:4 value:self.date];
  }
  if (self.hasRank) {
    [output writeInt32:5 value:self.rank];
  }
  if (self.hasContent) {
    [output writeString:6 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRouteId) {
    size += computeInt32Size(1, self.routeId);
  }
  if (self.hasLoginId) {
    size += computeStringSize(2, self.loginId);
  }
  if (self.hasNickName) {
    size += computeStringSize(3, self.nickName);
  }
  if (self.hasDate) {
    size += computeInt32Size(4, self.date);
  }
  if (self.hasRank) {
    size += computeInt32Size(5, self.rank);
  }
  if (self.hasContent) {
    size += computeStringSize(6, self.content);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RouteFeekback*) parseFromData:(NSData*) data {
  return (RouteFeekback*)[[[RouteFeekback builder] mergeFromData:data] build];
}
+ (RouteFeekback*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteFeekback*)[[[RouteFeekback builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RouteFeekback*) parseFromInputStream:(NSInputStream*) input {
  return (RouteFeekback*)[[[RouteFeekback builder] mergeFromInputStream:input] build];
}
+ (RouteFeekback*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteFeekback*)[[[RouteFeekback builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RouteFeekback*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RouteFeekback*)[[[RouteFeekback builder] mergeFromCodedInputStream:input] build];
}
+ (RouteFeekback*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteFeekback*)[[[RouteFeekback builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RouteFeekback_Builder*) builder {
  return [[[RouteFeekback_Builder alloc] init] autorelease];
}
+ (RouteFeekback_Builder*) builderWithPrototype:(RouteFeekback*) prototype {
  return [[RouteFeekback builder] mergeFrom:prototype];
}
- (RouteFeekback_Builder*) builder {
  return [RouteFeekback builder];
}
@end

@interface RouteFeekback_Builder()
@property (retain) RouteFeekback* result;
@end

@implementation RouteFeekback_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RouteFeekback alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RouteFeekback_Builder*) clear {
  self.result = [[[RouteFeekback alloc] init] autorelease];
  return self;
}
- (RouteFeekback_Builder*) clone {
  return [RouteFeekback builderWithPrototype:result];
}
- (RouteFeekback*) defaultInstance {
  return [RouteFeekback defaultInstance];
}
- (RouteFeekback*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RouteFeekback*) buildPartial {
  RouteFeekback* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RouteFeekback_Builder*) mergeFrom:(RouteFeekback*) other {
  if (other == [RouteFeekback defaultInstance]) {
    return self;
  }
  if (other.hasRouteId) {
    [self setRouteId:other.routeId];
  }
  if (other.hasLoginId) {
    [self setLoginId:other.loginId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RouteFeekback_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RouteFeekback_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRouteId:[input readInt32]];
        break;
      }
      case 18: {
        [self setLoginId:[input readString]];
        break;
      }
      case 26: {
        [self setNickName:[input readString]];
        break;
      }
      case 32: {
        [self setDate:[input readInt32]];
        break;
      }
      case 40: {
        [self setRank:[input readInt32]];
        break;
      }
      case 50: {
        [self setContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRouteId {
  return result.hasRouteId;
}
- (int32_t) routeId {
  return result.routeId;
}
- (RouteFeekback_Builder*) setRouteId:(int32_t) value {
  result.hasRouteId = YES;
  result.routeId = value;
  return self;
}
- (RouteFeekback_Builder*) clearRouteId {
  result.hasRouteId = NO;
  result.routeId = 0;
  return self;
}
- (BOOL) hasLoginId {
  return result.hasLoginId;
}
- (NSString*) loginId {
  return result.loginId;
}
- (RouteFeekback_Builder*) setLoginId:(NSString*) value {
  result.hasLoginId = YES;
  result.loginId = value;
  return self;
}
- (RouteFeekback_Builder*) clearLoginId {
  result.hasLoginId = NO;
  result.loginId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (RouteFeekback_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (RouteFeekback_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (int32_t) date {
  return result.date;
}
- (RouteFeekback_Builder*) setDate:(int32_t) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (RouteFeekback_Builder*) clearDate {
  result.hasDate = NO;
  result.date = 0;
  return self;
}
- (BOOL) hasRank {
  return result.hasRank;
}
- (int32_t) rank {
  return result.rank;
}
- (RouteFeekback_Builder*) setRank:(int32_t) value {
  result.hasRank = YES;
  result.rank = value;
  return self;
}
- (RouteFeekback_Builder*) clearRank {
  result.hasRank = NO;
  result.rank = 0;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (RouteFeekback_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (RouteFeekback_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
@end

@interface RouteStatistics ()
@property (retain) NSMutableArray* mutableDepartCityStatisticsList;
@property (retain) NSMutableArray* mutableAgencyStatisticsList;
@end

@implementation RouteStatistics

@synthesize mutableDepartCityStatisticsList;
@synthesize mutableAgencyStatisticsList;
- (void) dealloc {
  self.mutableDepartCityStatisticsList = nil;
  self.mutableAgencyStatisticsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RouteStatistics* defaultRouteStatisticsInstance = nil;
+ (void) initialize {
  if (self == [RouteStatistics class]) {
    defaultRouteStatisticsInstance = [[RouteStatistics alloc] init];
  }
}
+ (RouteStatistics*) defaultInstance {
  return defaultRouteStatisticsInstance;
}
- (RouteStatistics*) defaultInstance {
  return defaultRouteStatisticsInstance;
}
- (NSArray*) departCityStatisticsList {
  return mutableDepartCityStatisticsList;
}
- (Statistics*) departCityStatisticsAtIndex:(int32_t) index {
  id value = [mutableDepartCityStatisticsList objectAtIndex:index];
  return value;
}
- (NSArray*) agencyStatisticsList {
  return mutableAgencyStatisticsList;
}
- (Statistics*) agencyStatisticsAtIndex:(int32_t) index {
  id value = [mutableAgencyStatisticsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Statistics* element in self.departCityStatisticsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Statistics* element in self.agencyStatisticsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Statistics* element in self.departCityStatisticsList) {
    [output writeMessage:1 value:element];
  }
  for (Statistics* element in self.agencyStatisticsList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Statistics* element in self.departCityStatisticsList) {
    size += computeMessageSize(1, element);
  }
  for (Statistics* element in self.agencyStatisticsList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RouteStatistics*) parseFromData:(NSData*) data {
  return (RouteStatistics*)[[[RouteStatistics builder] mergeFromData:data] build];
}
+ (RouteStatistics*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteStatistics*)[[[RouteStatistics builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RouteStatistics*) parseFromInputStream:(NSInputStream*) input {
  return (RouteStatistics*)[[[RouteStatistics builder] mergeFromInputStream:input] build];
}
+ (RouteStatistics*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteStatistics*)[[[RouteStatistics builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RouteStatistics*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RouteStatistics*)[[[RouteStatistics builder] mergeFromCodedInputStream:input] build];
}
+ (RouteStatistics*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RouteStatistics*)[[[RouteStatistics builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RouteStatistics_Builder*) builder {
  return [[[RouteStatistics_Builder alloc] init] autorelease];
}
+ (RouteStatistics_Builder*) builderWithPrototype:(RouteStatistics*) prototype {
  return [[RouteStatistics builder] mergeFrom:prototype];
}
- (RouteStatistics_Builder*) builder {
  return [RouteStatistics builder];
}
@end

@interface RouteStatistics_Builder()
@property (retain) RouteStatistics* result;
@end

@implementation RouteStatistics_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RouteStatistics alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RouteStatistics_Builder*) clear {
  self.result = [[[RouteStatistics alloc] init] autorelease];
  return self;
}
- (RouteStatistics_Builder*) clone {
  return [RouteStatistics builderWithPrototype:result];
}
- (RouteStatistics*) defaultInstance {
  return [RouteStatistics defaultInstance];
}
- (RouteStatistics*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RouteStatistics*) buildPartial {
  RouteStatistics* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RouteStatistics_Builder*) mergeFrom:(RouteStatistics*) other {
  if (other == [RouteStatistics defaultInstance]) {
    return self;
  }
  if (other.mutableDepartCityStatisticsList.count > 0) {
    if (result.mutableDepartCityStatisticsList == nil) {
      result.mutableDepartCityStatisticsList = [NSMutableArray array];
    }
    [result.mutableDepartCityStatisticsList addObjectsFromArray:other.mutableDepartCityStatisticsList];
  }
  if (other.mutableAgencyStatisticsList.count > 0) {
    if (result.mutableAgencyStatisticsList == nil) {
      result.mutableAgencyStatisticsList = [NSMutableArray array];
    }
    [result.mutableAgencyStatisticsList addObjectsFromArray:other.mutableAgencyStatisticsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RouteStatistics_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RouteStatistics_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Statistics_Builder* subBuilder = [Statistics builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartCityStatistics:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        Statistics_Builder* subBuilder = [Statistics builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAgencyStatistics:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) departCityStatisticsList {
  if (result.mutableDepartCityStatisticsList == nil) { return [NSArray array]; }
  return result.mutableDepartCityStatisticsList;
}
- (Statistics*) departCityStatisticsAtIndex:(int32_t) index {
  return [result departCityStatisticsAtIndex:index];
}
- (RouteStatistics_Builder*) replaceDepartCityStatisticsAtIndex:(int32_t) index with:(Statistics*) value {
  [result.mutableDepartCityStatisticsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (RouteStatistics_Builder*) addAllDepartCityStatistics:(NSArray*) values {
  if (result.mutableDepartCityStatisticsList == nil) {
    result.mutableDepartCityStatisticsList = [NSMutableArray array];
  }
  [result.mutableDepartCityStatisticsList addObjectsFromArray:values];
  return self;
}
- (RouteStatistics_Builder*) clearDepartCityStatisticsList {
  result.mutableDepartCityStatisticsList = nil;
  return self;
}
- (RouteStatistics_Builder*) addDepartCityStatistics:(Statistics*) value {
  if (result.mutableDepartCityStatisticsList == nil) {
    result.mutableDepartCityStatisticsList = [NSMutableArray array];
  }
  [result.mutableDepartCityStatisticsList addObject:value];
  return self;
}
- (NSArray*) agencyStatisticsList {
  if (result.mutableAgencyStatisticsList == nil) { return [NSArray array]; }
  return result.mutableAgencyStatisticsList;
}
- (Statistics*) agencyStatisticsAtIndex:(int32_t) index {
  return [result agencyStatisticsAtIndex:index];
}
- (RouteStatistics_Builder*) replaceAgencyStatisticsAtIndex:(int32_t) index with:(Statistics*) value {
  [result.mutableAgencyStatisticsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (RouteStatistics_Builder*) addAllAgencyStatistics:(NSArray*) values {
  if (result.mutableAgencyStatisticsList == nil) {
    result.mutableAgencyStatisticsList = [NSMutableArray array];
  }
  [result.mutableAgencyStatisticsList addObjectsFromArray:values];
  return self;
}
- (RouteStatistics_Builder*) clearAgencyStatisticsList {
  result.mutableAgencyStatisticsList = nil;
  return self;
}
- (RouteStatistics_Builder*) addAgencyStatistics:(Statistics*) value {
  if (result.mutableAgencyStatisticsList == nil) {
    result.mutableAgencyStatisticsList = [NSMutableArray array];
  }
  [result.mutableAgencyStatisticsList addObject:value];
  return self;
}
@end

@interface TravelResponse ()
@property int32_t resultCode;
@property (retain) NSString* resultInfo;
@property (retain) Place* place;
@property (retain) CommonOverview* overview;
@property (retain) CommonTravelTip* travelTip;
@property (retain) HelpInfo* helpInfo;
@property (retain) PlaceList* placeList;
@property (retain) CityList* cityList;
@property (retain) App* appInfo;
@property (retain) CommonTravelTipList* travelTipList;
@property (retain) PlaceStatistics* placeStatistics;
@property int32_t totalCount;
@property (retain) UserInfo* userInfo;
@property (retain) TouristRoute* route;
@property (retain) TouristRouteList* routeList;
@property (retain) LocalRoute* localRoute;
@property (retain) LocalRouteList* localRoutes;
@property (retain) RouteStatistics* routeStatistics;
@property (retain) RouteFeekbackList* routeFeekbackList;
@property (retain) OrderList* orderList;
@property (retain) CityImageList* cityImageList;
@property (retain) FlightList* flightList;
@property (retain) AirHotelOrderList* airHotelOrderList;
@end

@implementation TravelResponse

- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) value {
  hasResultCode_ = !!value;
}
@synthesize resultCode;
- (BOOL) hasResultInfo {
  return !!hasResultInfo_;
}
- (void) setHasResultInfo:(BOOL) value {
  hasResultInfo_ = !!value;
}
@synthesize resultInfo;
- (BOOL) hasPlace {
  return !!hasPlace_;
}
- (void) setHasPlace:(BOOL) value {
  hasPlace_ = !!value;
}
@synthesize place;
- (BOOL) hasOverview {
  return !!hasOverview_;
}
- (void) setHasOverview:(BOOL) value {
  hasOverview_ = !!value;
}
@synthesize overview;
- (BOOL) hasTravelTip {
  return !!hasTravelTip_;
}
- (void) setHasTravelTip:(BOOL) value {
  hasTravelTip_ = !!value;
}
@synthesize travelTip;
- (BOOL) hasHelpInfo {
  return !!hasHelpInfo_;
}
- (void) setHasHelpInfo:(BOOL) value {
  hasHelpInfo_ = !!value;
}
@synthesize helpInfo;
- (BOOL) hasPlaceList {
  return !!hasPlaceList_;
}
- (void) setHasPlaceList:(BOOL) value {
  hasPlaceList_ = !!value;
}
@synthesize placeList;
- (BOOL) hasCityList {
  return !!hasCityList_;
}
- (void) setHasCityList:(BOOL) value {
  hasCityList_ = !!value;
}
@synthesize cityList;
- (BOOL) hasAppInfo {
  return !!hasAppInfo_;
}
- (void) setHasAppInfo:(BOOL) value {
  hasAppInfo_ = !!value;
}
@synthesize appInfo;
- (BOOL) hasTravelTipList {
  return !!hasTravelTipList_;
}
- (void) setHasTravelTipList:(BOOL) value {
  hasTravelTipList_ = !!value;
}
@synthesize travelTipList;
- (BOOL) hasPlaceStatistics {
  return !!hasPlaceStatistics_;
}
- (void) setHasPlaceStatistics:(BOOL) value {
  hasPlaceStatistics_ = !!value;
}
@synthesize placeStatistics;
- (BOOL) hasTotalCount {
  return !!hasTotalCount_;
}
- (void) setHasTotalCount:(BOOL) value {
  hasTotalCount_ = !!value;
}
@synthesize totalCount;
- (BOOL) hasUserInfo {
  return !!hasUserInfo_;
}
- (void) setHasUserInfo:(BOOL) value {
  hasUserInfo_ = !!value;
}
@synthesize userInfo;
- (BOOL) hasRoute {
  return !!hasRoute_;
}
- (void) setHasRoute:(BOOL) value {
  hasRoute_ = !!value;
}
@synthesize route;
- (BOOL) hasRouteList {
  return !!hasRouteList_;
}
- (void) setHasRouteList:(BOOL) value {
  hasRouteList_ = !!value;
}
@synthesize routeList;
- (BOOL) hasLocalRoute {
  return !!hasLocalRoute_;
}
- (void) setHasLocalRoute:(BOOL) value {
  hasLocalRoute_ = !!value;
}
@synthesize localRoute;
- (BOOL) hasLocalRoutes {
  return !!hasLocalRoutes_;
}
- (void) setHasLocalRoutes:(BOOL) value {
  hasLocalRoutes_ = !!value;
}
@synthesize localRoutes;
- (BOOL) hasRouteStatistics {
  return !!hasRouteStatistics_;
}
- (void) setHasRouteStatistics:(BOOL) value {
  hasRouteStatistics_ = !!value;
}
@synthesize routeStatistics;
- (BOOL) hasRouteFeekbackList {
  return !!hasRouteFeekbackList_;
}
- (void) setHasRouteFeekbackList:(BOOL) value {
  hasRouteFeekbackList_ = !!value;
}
@synthesize routeFeekbackList;
- (BOOL) hasOrderList {
  return !!hasOrderList_;
}
- (void) setHasOrderList:(BOOL) value {
  hasOrderList_ = !!value;
}
@synthesize orderList;
- (BOOL) hasCityImageList {
  return !!hasCityImageList_;
}
- (void) setHasCityImageList:(BOOL) value {
  hasCityImageList_ = !!value;
}
@synthesize cityImageList;
- (BOOL) hasFlightList {
  return !!hasFlightList_;
}
- (void) setHasFlightList:(BOOL) value {
  hasFlightList_ = !!value;
}
@synthesize flightList;
- (BOOL) hasAirHotelOrderList {
  return !!hasAirHotelOrderList_;
}
- (void) setHasAirHotelOrderList:(BOOL) value {
  hasAirHotelOrderList_ = !!value;
}
@synthesize airHotelOrderList;
- (void) dealloc {
  self.resultInfo = nil;
  self.place = nil;
  self.overview = nil;
  self.travelTip = nil;
  self.helpInfo = nil;
  self.placeList = nil;
  self.cityList = nil;
  self.appInfo = nil;
  self.travelTipList = nil;
  self.placeStatistics = nil;
  self.userInfo = nil;
  self.route = nil;
  self.routeList = nil;
  self.localRoute = nil;
  self.localRoutes = nil;
  self.routeStatistics = nil;
  self.routeFeekbackList = nil;
  self.orderList = nil;
  self.cityImageList = nil;
  self.flightList = nil;
  self.airHotelOrderList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.resultCode = 0;
    self.resultInfo = @"";
    self.place = [Place defaultInstance];
    self.overview = [CommonOverview defaultInstance];
    self.travelTip = [CommonTravelTip defaultInstance];
    self.helpInfo = [HelpInfo defaultInstance];
    self.placeList = [PlaceList defaultInstance];
    self.cityList = [CityList defaultInstance];
    self.appInfo = [App defaultInstance];
    self.travelTipList = [CommonTravelTipList defaultInstance];
    self.placeStatistics = [PlaceStatistics defaultInstance];
    self.totalCount = 0;
    self.userInfo = [UserInfo defaultInstance];
    self.route = [TouristRoute defaultInstance];
    self.routeList = [TouristRouteList defaultInstance];
    self.localRoute = [LocalRoute defaultInstance];
    self.localRoutes = [LocalRouteList defaultInstance];
    self.routeStatistics = [RouteStatistics defaultInstance];
    self.routeFeekbackList = [RouteFeekbackList defaultInstance];
    self.orderList = [OrderList defaultInstance];
    self.cityImageList = [CityImageList defaultInstance];
    self.flightList = [FlightList defaultInstance];
    self.airHotelOrderList = [AirHotelOrderList defaultInstance];
  }
  return self;
}
static TravelResponse* defaultTravelResponseInstance = nil;
+ (void) initialize {
  if (self == [TravelResponse class]) {
    defaultTravelResponseInstance = [[TravelResponse alloc] init];
  }
}
+ (TravelResponse*) defaultInstance {
  return defaultTravelResponseInstance;
}
- (TravelResponse*) defaultInstance {
  return defaultTravelResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResultCode) {
    return NO;
  }
  if (self.hasPlace) {
    if (!self.place.isInitialized) {
      return NO;
    }
  }
  if (self.hasOverview) {
    if (!self.overview.isInitialized) {
      return NO;
    }
  }
  if (self.hasTravelTip) {
    if (!self.travelTip.isInitialized) {
      return NO;
    }
  }
  if (self.hasPlaceList) {
    if (!self.placeList.isInitialized) {
      return NO;
    }
  }
  if (self.hasCityList) {
    if (!self.cityList.isInitialized) {
      return NO;
    }
  }
  if (self.hasAppInfo) {
    if (!self.appInfo.isInitialized) {
      return NO;
    }
  }
  if (self.hasTravelTipList) {
    if (!self.travelTipList.isInitialized) {
      return NO;
    }
  }
  if (self.hasPlaceStatistics) {
    if (!self.placeStatistics.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserInfo) {
    if (!self.userInfo.isInitialized) {
      return NO;
    }
  }
  if (self.hasRoute) {
    if (!self.route.isInitialized) {
      return NO;
    }
  }
  if (self.hasRouteList) {
    if (!self.routeList.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocalRoute) {
    if (!self.localRoute.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocalRoutes) {
    if (!self.localRoutes.isInitialized) {
      return NO;
    }
  }
  if (self.hasRouteStatistics) {
    if (!self.routeStatistics.isInitialized) {
      return NO;
    }
  }
  if (self.hasRouteFeekbackList) {
    if (!self.routeFeekbackList.isInitialized) {
      return NO;
    }
  }
  if (self.hasOrderList) {
    if (!self.orderList.isInitialized) {
      return NO;
    }
  }
  if (self.hasCityImageList) {
    if (!self.cityImageList.isInitialized) {
      return NO;
    }
  }
  if (self.hasFlightList) {
    if (!self.flightList.isInitialized) {
      return NO;
    }
  }
  if (self.hasAirHotelOrderList) {
    if (!self.airHotelOrderList.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeInt32:1 value:self.resultCode];
  }
  if (self.hasResultInfo) {
    [output writeString:2 value:self.resultInfo];
  }
  if (self.hasPlace) {
    [output writeMessage:3 value:self.place];
  }
  if (self.hasOverview) {
    [output writeMessage:4 value:self.overview];
  }
  if (self.hasTravelTip) {
    [output writeMessage:5 value:self.travelTip];
  }
  if (self.hasHelpInfo) {
    [output writeMessage:6 value:self.helpInfo];
  }
  if (self.hasPlaceList) {
    [output writeMessage:7 value:self.placeList];
  }
  if (self.hasCityList) {
    [output writeMessage:8 value:self.cityList];
  }
  if (self.hasAppInfo) {
    [output writeMessage:9 value:self.appInfo];
  }
  if (self.hasTravelTipList) {
    [output writeMessage:10 value:self.travelTipList];
  }
  if (self.hasPlaceStatistics) {
    [output writeMessage:12 value:self.placeStatistics];
  }
  if (self.hasTotalCount) {
    [output writeInt32:13 value:self.totalCount];
  }
  if (self.hasUserInfo) {
    [output writeMessage:15 value:self.userInfo];
  }
  if (self.hasRoute) {
    [output writeMessage:20 value:self.route];
  }
  if (self.hasRouteList) {
    [output writeMessage:21 value:self.routeList];
  }
  if (self.hasLocalRoute) {
    [output writeMessage:22 value:self.localRoute];
  }
  if (self.hasLocalRoutes) {
    [output writeMessage:23 value:self.localRoutes];
  }
  if (self.hasRouteStatistics) {
    [output writeMessage:25 value:self.routeStatistics];
  }
  if (self.hasRouteFeekbackList) {
    [output writeMessage:30 value:self.routeFeekbackList];
  }
  if (self.hasOrderList) {
    [output writeMessage:35 value:self.orderList];
  }
  if (self.hasCityImageList) {
    [output writeMessage:40 value:self.cityImageList];
  }
  if (self.hasFlightList) {
    [output writeMessage:50 value:self.flightList];
  }
  if (self.hasAirHotelOrderList) {
    [output writeMessage:55 value:self.airHotelOrderList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasResultCode) {
    size += computeInt32Size(1, self.resultCode);
  }
  if (self.hasResultInfo) {
    size += computeStringSize(2, self.resultInfo);
  }
  if (self.hasPlace) {
    size += computeMessageSize(3, self.place);
  }
  if (self.hasOverview) {
    size += computeMessageSize(4, self.overview);
  }
  if (self.hasTravelTip) {
    size += computeMessageSize(5, self.travelTip);
  }
  if (self.hasHelpInfo) {
    size += computeMessageSize(6, self.helpInfo);
  }
  if (self.hasPlaceList) {
    size += computeMessageSize(7, self.placeList);
  }
  if (self.hasCityList) {
    size += computeMessageSize(8, self.cityList);
  }
  if (self.hasAppInfo) {
    size += computeMessageSize(9, self.appInfo);
  }
  if (self.hasTravelTipList) {
    size += computeMessageSize(10, self.travelTipList);
  }
  if (self.hasPlaceStatistics) {
    size += computeMessageSize(12, self.placeStatistics);
  }
  if (self.hasTotalCount) {
    size += computeInt32Size(13, self.totalCount);
  }
  if (self.hasUserInfo) {
    size += computeMessageSize(15, self.userInfo);
  }
  if (self.hasRoute) {
    size += computeMessageSize(20, self.route);
  }
  if (self.hasRouteList) {
    size += computeMessageSize(21, self.routeList);
  }
  if (self.hasLocalRoute) {
    size += computeMessageSize(22, self.localRoute);
  }
  if (self.hasLocalRoutes) {
    size += computeMessageSize(23, self.localRoutes);
  }
  if (self.hasRouteStatistics) {
    size += computeMessageSize(25, self.routeStatistics);
  }
  if (self.hasRouteFeekbackList) {
    size += computeMessageSize(30, self.routeFeekbackList);
  }
  if (self.hasOrderList) {
    size += computeMessageSize(35, self.orderList);
  }
  if (self.hasCityImageList) {
    size += computeMessageSize(40, self.cityImageList);
  }
  if (self.hasFlightList) {
    size += computeMessageSize(50, self.flightList);
  }
  if (self.hasAirHotelOrderList) {
    size += computeMessageSize(55, self.airHotelOrderList);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TravelResponse*) parseFromData:(NSData*) data {
  return (TravelResponse*)[[[TravelResponse builder] mergeFromData:data] build];
}
+ (TravelResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelResponse*)[[[TravelResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TravelResponse*) parseFromInputStream:(NSInputStream*) input {
  return (TravelResponse*)[[[TravelResponse builder] mergeFromInputStream:input] build];
}
+ (TravelResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelResponse*)[[[TravelResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TravelResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TravelResponse*)[[[TravelResponse builder] mergeFromCodedInputStream:input] build];
}
+ (TravelResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelResponse*)[[[TravelResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TravelResponse_Builder*) builder {
  return [[[TravelResponse_Builder alloc] init] autorelease];
}
+ (TravelResponse_Builder*) builderWithPrototype:(TravelResponse*) prototype {
  return [[TravelResponse builder] mergeFrom:prototype];
}
- (TravelResponse_Builder*) builder {
  return [TravelResponse builder];
}
@end

@interface TravelResponse_Builder()
@property (retain) TravelResponse* result;
@end

@implementation TravelResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TravelResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TravelResponse_Builder*) clear {
  self.result = [[[TravelResponse alloc] init] autorelease];
  return self;
}
- (TravelResponse_Builder*) clone {
  return [TravelResponse builderWithPrototype:result];
}
- (TravelResponse*) defaultInstance {
  return [TravelResponse defaultInstance];
}
- (TravelResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TravelResponse*) buildPartial {
  TravelResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TravelResponse_Builder*) mergeFrom:(TravelResponse*) other {
  if (other == [TravelResponse defaultInstance]) {
    return self;
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasResultInfo) {
    [self setResultInfo:other.resultInfo];
  }
  if (other.hasPlace) {
    [self mergePlace:other.place];
  }
  if (other.hasOverview) {
    [self mergeOverview:other.overview];
  }
  if (other.hasTravelTip) {
    [self mergeTravelTip:other.travelTip];
  }
  if (other.hasHelpInfo) {
    [self mergeHelpInfo:other.helpInfo];
  }
  if (other.hasPlaceList) {
    [self mergePlaceList:other.placeList];
  }
  if (other.hasCityList) {
    [self mergeCityList:other.cityList];
  }
  if (other.hasAppInfo) {
    [self mergeAppInfo:other.appInfo];
  }
  if (other.hasTravelTipList) {
    [self mergeTravelTipList:other.travelTipList];
  }
  if (other.hasPlaceStatistics) {
    [self mergePlaceStatistics:other.placeStatistics];
  }
  if (other.hasTotalCount) {
    [self setTotalCount:other.totalCount];
  }
  if (other.hasUserInfo) {
    [self mergeUserInfo:other.userInfo];
  }
  if (other.hasRoute) {
    [self mergeRoute:other.route];
  }
  if (other.hasRouteList) {
    [self mergeRouteList:other.routeList];
  }
  if (other.hasLocalRoute) {
    [self mergeLocalRoute:other.localRoute];
  }
  if (other.hasLocalRoutes) {
    [self mergeLocalRoutes:other.localRoutes];
  }
  if (other.hasRouteStatistics) {
    [self mergeRouteStatistics:other.routeStatistics];
  }
  if (other.hasRouteFeekbackList) {
    [self mergeRouteFeekbackList:other.routeFeekbackList];
  }
  if (other.hasOrderList) {
    [self mergeOrderList:other.orderList];
  }
  if (other.hasCityImageList) {
    [self mergeCityImageList:other.cityImageList];
  }
  if (other.hasFlightList) {
    [self mergeFlightList:other.flightList];
  }
  if (other.hasAirHotelOrderList) {
    [self mergeAirHotelOrderList:other.airHotelOrderList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TravelResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TravelResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResultCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setResultInfo:[input readString]];
        break;
      }
      case 26: {
        Place_Builder* subBuilder = [Place builder];
        if (self.hasPlace) {
          [subBuilder mergeFrom:self.place];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPlace:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        CommonOverview_Builder* subBuilder = [CommonOverview builder];
        if (self.hasOverview) {
          [subBuilder mergeFrom:self.overview];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOverview:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        CommonTravelTip_Builder* subBuilder = [CommonTravelTip builder];
        if (self.hasTravelTip) {
          [subBuilder mergeFrom:self.travelTip];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTravelTip:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        HelpInfo_Builder* subBuilder = [HelpInfo builder];
        if (self.hasHelpInfo) {
          [subBuilder mergeFrom:self.helpInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHelpInfo:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        PlaceList_Builder* subBuilder = [PlaceList builder];
        if (self.hasPlaceList) {
          [subBuilder mergeFrom:self.placeList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPlaceList:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        CityList_Builder* subBuilder = [CityList builder];
        if (self.hasCityList) {
          [subBuilder mergeFrom:self.cityList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCityList:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        App_Builder* subBuilder = [App builder];
        if (self.hasAppInfo) {
          [subBuilder mergeFrom:self.appInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAppInfo:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        CommonTravelTipList_Builder* subBuilder = [CommonTravelTipList builder];
        if (self.hasTravelTipList) {
          [subBuilder mergeFrom:self.travelTipList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTravelTipList:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        PlaceStatistics_Builder* subBuilder = [PlaceStatistics builder];
        if (self.hasPlaceStatistics) {
          [subBuilder mergeFrom:self.placeStatistics];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPlaceStatistics:[subBuilder buildPartial]];
        break;
      }
      case 104: {
        [self setTotalCount:[input readInt32]];
        break;
      }
      case 122: {
        UserInfo_Builder* subBuilder = [UserInfo builder];
        if (self.hasUserInfo) {
          [subBuilder mergeFrom:self.userInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserInfo:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        TouristRoute_Builder* subBuilder = [TouristRoute builder];
        if (self.hasRoute) {
          [subBuilder mergeFrom:self.route];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoute:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        TouristRouteList_Builder* subBuilder = [TouristRouteList builder];
        if (self.hasRouteList) {
          [subBuilder mergeFrom:self.routeList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRouteList:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        LocalRoute_Builder* subBuilder = [LocalRoute builder];
        if (self.hasLocalRoute) {
          [subBuilder mergeFrom:self.localRoute];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocalRoute:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        LocalRouteList_Builder* subBuilder = [LocalRouteList builder];
        if (self.hasLocalRoutes) {
          [subBuilder mergeFrom:self.localRoutes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocalRoutes:[subBuilder buildPartial]];
        break;
      }
      case 202: {
        RouteStatistics_Builder* subBuilder = [RouteStatistics builder];
        if (self.hasRouteStatistics) {
          [subBuilder mergeFrom:self.routeStatistics];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRouteStatistics:[subBuilder buildPartial]];
        break;
      }
      case 242: {
        RouteFeekbackList_Builder* subBuilder = [RouteFeekbackList builder];
        if (self.hasRouteFeekbackList) {
          [subBuilder mergeFrom:self.routeFeekbackList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRouteFeekbackList:[subBuilder buildPartial]];
        break;
      }
      case 282: {
        OrderList_Builder* subBuilder = [OrderList builder];
        if (self.hasOrderList) {
          [subBuilder mergeFrom:self.orderList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOrderList:[subBuilder buildPartial]];
        break;
      }
      case 322: {
        CityImageList_Builder* subBuilder = [CityImageList builder];
        if (self.hasCityImageList) {
          [subBuilder mergeFrom:self.cityImageList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCityImageList:[subBuilder buildPartial]];
        break;
      }
      case 402: {
        FlightList_Builder* subBuilder = [FlightList builder];
        if (self.hasFlightList) {
          [subBuilder mergeFrom:self.flightList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFlightList:[subBuilder buildPartial]];
        break;
      }
      case 442: {
        AirHotelOrderList_Builder* subBuilder = [AirHotelOrderList builder];
        if (self.hasAirHotelOrderList) {
          [subBuilder mergeFrom:self.airHotelOrderList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAirHotelOrderList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasResultCode {
  return result.hasResultCode;
}
- (int32_t) resultCode {
  return result.resultCode;
}
- (TravelResponse_Builder*) setResultCode:(int32_t) value {
  result.hasResultCode = YES;
  result.resultCode = value;
  return self;
}
- (TravelResponse_Builder*) clearResultCode {
  result.hasResultCode = NO;
  result.resultCode = 0;
  return self;
}
- (BOOL) hasResultInfo {
  return result.hasResultInfo;
}
- (NSString*) resultInfo {
  return result.resultInfo;
}
- (TravelResponse_Builder*) setResultInfo:(NSString*) value {
  result.hasResultInfo = YES;
  result.resultInfo = value;
  return self;
}
- (TravelResponse_Builder*) clearResultInfo {
  result.hasResultInfo = NO;
  result.resultInfo = @"";
  return self;
}
- (BOOL) hasPlace {
  return result.hasPlace;
}
- (Place*) place {
  return result.place;
}
- (TravelResponse_Builder*) setPlace:(Place*) value {
  result.hasPlace = YES;
  result.place = value;
  return self;
}
- (TravelResponse_Builder*) setPlaceBuilder:(Place_Builder*) builderForValue {
  return [self setPlace:[builderForValue build]];
}
- (TravelResponse_Builder*) mergePlace:(Place*) value {
  if (result.hasPlace &&
      result.place != [Place defaultInstance]) {
    result.place =
      [[[Place builderWithPrototype:result.place] mergeFrom:value] buildPartial];
  } else {
    result.place = value;
  }
  result.hasPlace = YES;
  return self;
}
- (TravelResponse_Builder*) clearPlace {
  result.hasPlace = NO;
  result.place = [Place defaultInstance];
  return self;
}
- (BOOL) hasOverview {
  return result.hasOverview;
}
- (CommonOverview*) overview {
  return result.overview;
}
- (TravelResponse_Builder*) setOverview:(CommonOverview*) value {
  result.hasOverview = YES;
  result.overview = value;
  return self;
}
- (TravelResponse_Builder*) setOverviewBuilder:(CommonOverview_Builder*) builderForValue {
  return [self setOverview:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeOverview:(CommonOverview*) value {
  if (result.hasOverview &&
      result.overview != [CommonOverview defaultInstance]) {
    result.overview =
      [[[CommonOverview builderWithPrototype:result.overview] mergeFrom:value] buildPartial];
  } else {
    result.overview = value;
  }
  result.hasOverview = YES;
  return self;
}
- (TravelResponse_Builder*) clearOverview {
  result.hasOverview = NO;
  result.overview = [CommonOverview defaultInstance];
  return self;
}
- (BOOL) hasTravelTip {
  return result.hasTravelTip;
}
- (CommonTravelTip*) travelTip {
  return result.travelTip;
}
- (TravelResponse_Builder*) setTravelTip:(CommonTravelTip*) value {
  result.hasTravelTip = YES;
  result.travelTip = value;
  return self;
}
- (TravelResponse_Builder*) setTravelTipBuilder:(CommonTravelTip_Builder*) builderForValue {
  return [self setTravelTip:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeTravelTip:(CommonTravelTip*) value {
  if (result.hasTravelTip &&
      result.travelTip != [CommonTravelTip defaultInstance]) {
    result.travelTip =
      [[[CommonTravelTip builderWithPrototype:result.travelTip] mergeFrom:value] buildPartial];
  } else {
    result.travelTip = value;
  }
  result.hasTravelTip = YES;
  return self;
}
- (TravelResponse_Builder*) clearTravelTip {
  result.hasTravelTip = NO;
  result.travelTip = [CommonTravelTip defaultInstance];
  return self;
}
- (BOOL) hasHelpInfo {
  return result.hasHelpInfo;
}
- (HelpInfo*) helpInfo {
  return result.helpInfo;
}
- (TravelResponse_Builder*) setHelpInfo:(HelpInfo*) value {
  result.hasHelpInfo = YES;
  result.helpInfo = value;
  return self;
}
- (TravelResponse_Builder*) setHelpInfoBuilder:(HelpInfo_Builder*) builderForValue {
  return [self setHelpInfo:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeHelpInfo:(HelpInfo*) value {
  if (result.hasHelpInfo &&
      result.helpInfo != [HelpInfo defaultInstance]) {
    result.helpInfo =
      [[[HelpInfo builderWithPrototype:result.helpInfo] mergeFrom:value] buildPartial];
  } else {
    result.helpInfo = value;
  }
  result.hasHelpInfo = YES;
  return self;
}
- (TravelResponse_Builder*) clearHelpInfo {
  result.hasHelpInfo = NO;
  result.helpInfo = [HelpInfo defaultInstance];
  return self;
}
- (BOOL) hasPlaceList {
  return result.hasPlaceList;
}
- (PlaceList*) placeList {
  return result.placeList;
}
- (TravelResponse_Builder*) setPlaceList:(PlaceList*) value {
  result.hasPlaceList = YES;
  result.placeList = value;
  return self;
}
- (TravelResponse_Builder*) setPlaceListBuilder:(PlaceList_Builder*) builderForValue {
  return [self setPlaceList:[builderForValue build]];
}
- (TravelResponse_Builder*) mergePlaceList:(PlaceList*) value {
  if (result.hasPlaceList &&
      result.placeList != [PlaceList defaultInstance]) {
    result.placeList =
      [[[PlaceList builderWithPrototype:result.placeList] mergeFrom:value] buildPartial];
  } else {
    result.placeList = value;
  }
  result.hasPlaceList = YES;
  return self;
}
- (TravelResponse_Builder*) clearPlaceList {
  result.hasPlaceList = NO;
  result.placeList = [PlaceList defaultInstance];
  return self;
}
- (BOOL) hasCityList {
  return result.hasCityList;
}
- (CityList*) cityList {
  return result.cityList;
}
- (TravelResponse_Builder*) setCityList:(CityList*) value {
  result.hasCityList = YES;
  result.cityList = value;
  return self;
}
- (TravelResponse_Builder*) setCityListBuilder:(CityList_Builder*) builderForValue {
  return [self setCityList:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeCityList:(CityList*) value {
  if (result.hasCityList &&
      result.cityList != [CityList defaultInstance]) {
    result.cityList =
      [[[CityList builderWithPrototype:result.cityList] mergeFrom:value] buildPartial];
  } else {
    result.cityList = value;
  }
  result.hasCityList = YES;
  return self;
}
- (TravelResponse_Builder*) clearCityList {
  result.hasCityList = NO;
  result.cityList = [CityList defaultInstance];
  return self;
}
- (BOOL) hasAppInfo {
  return result.hasAppInfo;
}
- (App*) appInfo {
  return result.appInfo;
}
- (TravelResponse_Builder*) setAppInfo:(App*) value {
  result.hasAppInfo = YES;
  result.appInfo = value;
  return self;
}
- (TravelResponse_Builder*) setAppInfoBuilder:(App_Builder*) builderForValue {
  return [self setAppInfo:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeAppInfo:(App*) value {
  if (result.hasAppInfo &&
      result.appInfo != [App defaultInstance]) {
    result.appInfo =
      [[[App builderWithPrototype:result.appInfo] mergeFrom:value] buildPartial];
  } else {
    result.appInfo = value;
  }
  result.hasAppInfo = YES;
  return self;
}
- (TravelResponse_Builder*) clearAppInfo {
  result.hasAppInfo = NO;
  result.appInfo = [App defaultInstance];
  return self;
}
- (BOOL) hasTravelTipList {
  return result.hasTravelTipList;
}
- (CommonTravelTipList*) travelTipList {
  return result.travelTipList;
}
- (TravelResponse_Builder*) setTravelTipList:(CommonTravelTipList*) value {
  result.hasTravelTipList = YES;
  result.travelTipList = value;
  return self;
}
- (TravelResponse_Builder*) setTravelTipListBuilder:(CommonTravelTipList_Builder*) builderForValue {
  return [self setTravelTipList:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeTravelTipList:(CommonTravelTipList*) value {
  if (result.hasTravelTipList &&
      result.travelTipList != [CommonTravelTipList defaultInstance]) {
    result.travelTipList =
      [[[CommonTravelTipList builderWithPrototype:result.travelTipList] mergeFrom:value] buildPartial];
  } else {
    result.travelTipList = value;
  }
  result.hasTravelTipList = YES;
  return self;
}
- (TravelResponse_Builder*) clearTravelTipList {
  result.hasTravelTipList = NO;
  result.travelTipList = [CommonTravelTipList defaultInstance];
  return self;
}
- (BOOL) hasPlaceStatistics {
  return result.hasPlaceStatistics;
}
- (PlaceStatistics*) placeStatistics {
  return result.placeStatistics;
}
- (TravelResponse_Builder*) setPlaceStatistics:(PlaceStatistics*) value {
  result.hasPlaceStatistics = YES;
  result.placeStatistics = value;
  return self;
}
- (TravelResponse_Builder*) setPlaceStatisticsBuilder:(PlaceStatistics_Builder*) builderForValue {
  return [self setPlaceStatistics:[builderForValue build]];
}
- (TravelResponse_Builder*) mergePlaceStatistics:(PlaceStatistics*) value {
  if (result.hasPlaceStatistics &&
      result.placeStatistics != [PlaceStatistics defaultInstance]) {
    result.placeStatistics =
      [[[PlaceStatistics builderWithPrototype:result.placeStatistics] mergeFrom:value] buildPartial];
  } else {
    result.placeStatistics = value;
  }
  result.hasPlaceStatistics = YES;
  return self;
}
- (TravelResponse_Builder*) clearPlaceStatistics {
  result.hasPlaceStatistics = NO;
  result.placeStatistics = [PlaceStatistics defaultInstance];
  return self;
}
- (BOOL) hasTotalCount {
  return result.hasTotalCount;
}
- (int32_t) totalCount {
  return result.totalCount;
}
- (TravelResponse_Builder*) setTotalCount:(int32_t) value {
  result.hasTotalCount = YES;
  result.totalCount = value;
  return self;
}
- (TravelResponse_Builder*) clearTotalCount {
  result.hasTotalCount = NO;
  result.totalCount = 0;
  return self;
}
- (BOOL) hasUserInfo {
  return result.hasUserInfo;
}
- (UserInfo*) userInfo {
  return result.userInfo;
}
- (TravelResponse_Builder*) setUserInfo:(UserInfo*) value {
  result.hasUserInfo = YES;
  result.userInfo = value;
  return self;
}
- (TravelResponse_Builder*) setUserInfoBuilder:(UserInfo_Builder*) builderForValue {
  return [self setUserInfo:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeUserInfo:(UserInfo*) value {
  if (result.hasUserInfo &&
      result.userInfo != [UserInfo defaultInstance]) {
    result.userInfo =
      [[[UserInfo builderWithPrototype:result.userInfo] mergeFrom:value] buildPartial];
  } else {
    result.userInfo = value;
  }
  result.hasUserInfo = YES;
  return self;
}
- (TravelResponse_Builder*) clearUserInfo {
  result.hasUserInfo = NO;
  result.userInfo = [UserInfo defaultInstance];
  return self;
}
- (BOOL) hasRoute {
  return result.hasRoute;
}
- (TouristRoute*) route {
  return result.route;
}
- (TravelResponse_Builder*) setRoute:(TouristRoute*) value {
  result.hasRoute = YES;
  result.route = value;
  return self;
}
- (TravelResponse_Builder*) setRouteBuilder:(TouristRoute_Builder*) builderForValue {
  return [self setRoute:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeRoute:(TouristRoute*) value {
  if (result.hasRoute &&
      result.route != [TouristRoute defaultInstance]) {
    result.route =
      [[[TouristRoute builderWithPrototype:result.route] mergeFrom:value] buildPartial];
  } else {
    result.route = value;
  }
  result.hasRoute = YES;
  return self;
}
- (TravelResponse_Builder*) clearRoute {
  result.hasRoute = NO;
  result.route = [TouristRoute defaultInstance];
  return self;
}
- (BOOL) hasRouteList {
  return result.hasRouteList;
}
- (TouristRouteList*) routeList {
  return result.routeList;
}
- (TravelResponse_Builder*) setRouteList:(TouristRouteList*) value {
  result.hasRouteList = YES;
  result.routeList = value;
  return self;
}
- (TravelResponse_Builder*) setRouteListBuilder:(TouristRouteList_Builder*) builderForValue {
  return [self setRouteList:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeRouteList:(TouristRouteList*) value {
  if (result.hasRouteList &&
      result.routeList != [TouristRouteList defaultInstance]) {
    result.routeList =
      [[[TouristRouteList builderWithPrototype:result.routeList] mergeFrom:value] buildPartial];
  } else {
    result.routeList = value;
  }
  result.hasRouteList = YES;
  return self;
}
- (TravelResponse_Builder*) clearRouteList {
  result.hasRouteList = NO;
  result.routeList = [TouristRouteList defaultInstance];
  return self;
}
- (BOOL) hasLocalRoute {
  return result.hasLocalRoute;
}
- (LocalRoute*) localRoute {
  return result.localRoute;
}
- (TravelResponse_Builder*) setLocalRoute:(LocalRoute*) value {
  result.hasLocalRoute = YES;
  result.localRoute = value;
  return self;
}
- (TravelResponse_Builder*) setLocalRouteBuilder:(LocalRoute_Builder*) builderForValue {
  return [self setLocalRoute:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeLocalRoute:(LocalRoute*) value {
  if (result.hasLocalRoute &&
      result.localRoute != [LocalRoute defaultInstance]) {
    result.localRoute =
      [[[LocalRoute builderWithPrototype:result.localRoute] mergeFrom:value] buildPartial];
  } else {
    result.localRoute = value;
  }
  result.hasLocalRoute = YES;
  return self;
}
- (TravelResponse_Builder*) clearLocalRoute {
  result.hasLocalRoute = NO;
  result.localRoute = [LocalRoute defaultInstance];
  return self;
}
- (BOOL) hasLocalRoutes {
  return result.hasLocalRoutes;
}
- (LocalRouteList*) localRoutes {
  return result.localRoutes;
}
- (TravelResponse_Builder*) setLocalRoutes:(LocalRouteList*) value {
  result.hasLocalRoutes = YES;
  result.localRoutes = value;
  return self;
}
- (TravelResponse_Builder*) setLocalRoutesBuilder:(LocalRouteList_Builder*) builderForValue {
  return [self setLocalRoutes:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeLocalRoutes:(LocalRouteList*) value {
  if (result.hasLocalRoutes &&
      result.localRoutes != [LocalRouteList defaultInstance]) {
    result.localRoutes =
      [[[LocalRouteList builderWithPrototype:result.localRoutes] mergeFrom:value] buildPartial];
  } else {
    result.localRoutes = value;
  }
  result.hasLocalRoutes = YES;
  return self;
}
- (TravelResponse_Builder*) clearLocalRoutes {
  result.hasLocalRoutes = NO;
  result.localRoutes = [LocalRouteList defaultInstance];
  return self;
}
- (BOOL) hasRouteStatistics {
  return result.hasRouteStatistics;
}
- (RouteStatistics*) routeStatistics {
  return result.routeStatistics;
}
- (TravelResponse_Builder*) setRouteStatistics:(RouteStatistics*) value {
  result.hasRouteStatistics = YES;
  result.routeStatistics = value;
  return self;
}
- (TravelResponse_Builder*) setRouteStatisticsBuilder:(RouteStatistics_Builder*) builderForValue {
  return [self setRouteStatistics:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeRouteStatistics:(RouteStatistics*) value {
  if (result.hasRouteStatistics &&
      result.routeStatistics != [RouteStatistics defaultInstance]) {
    result.routeStatistics =
      [[[RouteStatistics builderWithPrototype:result.routeStatistics] mergeFrom:value] buildPartial];
  } else {
    result.routeStatistics = value;
  }
  result.hasRouteStatistics = YES;
  return self;
}
- (TravelResponse_Builder*) clearRouteStatistics {
  result.hasRouteStatistics = NO;
  result.routeStatistics = [RouteStatistics defaultInstance];
  return self;
}
- (BOOL) hasRouteFeekbackList {
  return result.hasRouteFeekbackList;
}
- (RouteFeekbackList*) routeFeekbackList {
  return result.routeFeekbackList;
}
- (TravelResponse_Builder*) setRouteFeekbackList:(RouteFeekbackList*) value {
  result.hasRouteFeekbackList = YES;
  result.routeFeekbackList = value;
  return self;
}
- (TravelResponse_Builder*) setRouteFeekbackListBuilder:(RouteFeekbackList_Builder*) builderForValue {
  return [self setRouteFeekbackList:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeRouteFeekbackList:(RouteFeekbackList*) value {
  if (result.hasRouteFeekbackList &&
      result.routeFeekbackList != [RouteFeekbackList defaultInstance]) {
    result.routeFeekbackList =
      [[[RouteFeekbackList builderWithPrototype:result.routeFeekbackList] mergeFrom:value] buildPartial];
  } else {
    result.routeFeekbackList = value;
  }
  result.hasRouteFeekbackList = YES;
  return self;
}
- (TravelResponse_Builder*) clearRouteFeekbackList {
  result.hasRouteFeekbackList = NO;
  result.routeFeekbackList = [RouteFeekbackList defaultInstance];
  return self;
}
- (BOOL) hasOrderList {
  return result.hasOrderList;
}
- (OrderList*) orderList {
  return result.orderList;
}
- (TravelResponse_Builder*) setOrderList:(OrderList*) value {
  result.hasOrderList = YES;
  result.orderList = value;
  return self;
}
- (TravelResponse_Builder*) setOrderListBuilder:(OrderList_Builder*) builderForValue {
  return [self setOrderList:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeOrderList:(OrderList*) value {
  if (result.hasOrderList &&
      result.orderList != [OrderList defaultInstance]) {
    result.orderList =
      [[[OrderList builderWithPrototype:result.orderList] mergeFrom:value] buildPartial];
  } else {
    result.orderList = value;
  }
  result.hasOrderList = YES;
  return self;
}
- (TravelResponse_Builder*) clearOrderList {
  result.hasOrderList = NO;
  result.orderList = [OrderList defaultInstance];
  return self;
}
- (BOOL) hasCityImageList {
  return result.hasCityImageList;
}
- (CityImageList*) cityImageList {
  return result.cityImageList;
}
- (TravelResponse_Builder*) setCityImageList:(CityImageList*) value {
  result.hasCityImageList = YES;
  result.cityImageList = value;
  return self;
}
- (TravelResponse_Builder*) setCityImageListBuilder:(CityImageList_Builder*) builderForValue {
  return [self setCityImageList:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeCityImageList:(CityImageList*) value {
  if (result.hasCityImageList &&
      result.cityImageList != [CityImageList defaultInstance]) {
    result.cityImageList =
      [[[CityImageList builderWithPrototype:result.cityImageList] mergeFrom:value] buildPartial];
  } else {
    result.cityImageList = value;
  }
  result.hasCityImageList = YES;
  return self;
}
- (TravelResponse_Builder*) clearCityImageList {
  result.hasCityImageList = NO;
  result.cityImageList = [CityImageList defaultInstance];
  return self;
}
- (BOOL) hasFlightList {
  return result.hasFlightList;
}
- (FlightList*) flightList {
  return result.flightList;
}
- (TravelResponse_Builder*) setFlightList:(FlightList*) value {
  result.hasFlightList = YES;
  result.flightList = value;
  return self;
}
- (TravelResponse_Builder*) setFlightListBuilder:(FlightList_Builder*) builderForValue {
  return [self setFlightList:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeFlightList:(FlightList*) value {
  if (result.hasFlightList &&
      result.flightList != [FlightList defaultInstance]) {
    result.flightList =
      [[[FlightList builderWithPrototype:result.flightList] mergeFrom:value] buildPartial];
  } else {
    result.flightList = value;
  }
  result.hasFlightList = YES;
  return self;
}
- (TravelResponse_Builder*) clearFlightList {
  result.hasFlightList = NO;
  result.flightList = [FlightList defaultInstance];
  return self;
}
- (BOOL) hasAirHotelOrderList {
  return result.hasAirHotelOrderList;
}
- (AirHotelOrderList*) airHotelOrderList {
  return result.airHotelOrderList;
}
- (TravelResponse_Builder*) setAirHotelOrderList:(AirHotelOrderList*) value {
  result.hasAirHotelOrderList = YES;
  result.airHotelOrderList = value;
  return self;
}
- (TravelResponse_Builder*) setAirHotelOrderListBuilder:(AirHotelOrderList_Builder*) builderForValue {
  return [self setAirHotelOrderList:[builderForValue build]];
}
- (TravelResponse_Builder*) mergeAirHotelOrderList:(AirHotelOrderList*) value {
  if (result.hasAirHotelOrderList &&
      result.airHotelOrderList != [AirHotelOrderList defaultInstance]) {
    result.airHotelOrderList =
      [[[AirHotelOrderList builderWithPrototype:result.airHotelOrderList] mergeFrom:value] buildPartial];
  } else {
    result.airHotelOrderList = value;
  }
  result.hasAirHotelOrderList = YES;
  return self;
}
- (TravelResponse_Builder*) clearAirHotelOrderList {
  result.hasAirHotelOrderList = NO;
  result.airHotelOrderList = [AirHotelOrderList defaultInstance];
  return self;
}
@end

@interface TravelRequest ()
@property (retain) AirHotelOrder* airHotelOrder;
@end

@implementation TravelRequest

- (BOOL) hasAirHotelOrder {
  return !!hasAirHotelOrder_;
}
- (void) setHasAirHotelOrder:(BOOL) value {
  hasAirHotelOrder_ = !!value;
}
@synthesize airHotelOrder;
- (void) dealloc {
  self.airHotelOrder = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.airHotelOrder = [AirHotelOrder defaultInstance];
  }
  return self;
}
static TravelRequest* defaultTravelRequestInstance = nil;
+ (void) initialize {
  if (self == [TravelRequest class]) {
    defaultTravelRequestInstance = [[TravelRequest alloc] init];
  }
}
+ (TravelRequest*) defaultInstance {
  return defaultTravelRequestInstance;
}
- (TravelRequest*) defaultInstance {
  return defaultTravelRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasAirHotelOrder) {
    if (!self.airHotelOrder.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAirHotelOrder) {
    [output writeMessage:10 value:self.airHotelOrder];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAirHotelOrder) {
    size += computeMessageSize(10, self.airHotelOrder);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TravelRequest*) parseFromData:(NSData*) data {
  return (TravelRequest*)[[[TravelRequest builder] mergeFromData:data] build];
}
+ (TravelRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelRequest*)[[[TravelRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TravelRequest*) parseFromInputStream:(NSInputStream*) input {
  return (TravelRequest*)[[[TravelRequest builder] mergeFromInputStream:input] build];
}
+ (TravelRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelRequest*)[[[TravelRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TravelRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TravelRequest*)[[[TravelRequest builder] mergeFromCodedInputStream:input] build];
}
+ (TravelRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TravelRequest*)[[[TravelRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TravelRequest_Builder*) builder {
  return [[[TravelRequest_Builder alloc] init] autorelease];
}
+ (TravelRequest_Builder*) builderWithPrototype:(TravelRequest*) prototype {
  return [[TravelRequest builder] mergeFrom:prototype];
}
- (TravelRequest_Builder*) builder {
  return [TravelRequest builder];
}
@end

@interface TravelRequest_Builder()
@property (retain) TravelRequest* result;
@end

@implementation TravelRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TravelRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TravelRequest_Builder*) clear {
  self.result = [[[TravelRequest alloc] init] autorelease];
  return self;
}
- (TravelRequest_Builder*) clone {
  return [TravelRequest builderWithPrototype:result];
}
- (TravelRequest*) defaultInstance {
  return [TravelRequest defaultInstance];
}
- (TravelRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TravelRequest*) buildPartial {
  TravelRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TravelRequest_Builder*) mergeFrom:(TravelRequest*) other {
  if (other == [TravelRequest defaultInstance]) {
    return self;
  }
  if (other.hasAirHotelOrder) {
    [self mergeAirHotelOrder:other.airHotelOrder];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TravelRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TravelRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 82: {
        AirHotelOrder_Builder* subBuilder = [AirHotelOrder builder];
        if (self.hasAirHotelOrder) {
          [subBuilder mergeFrom:self.airHotelOrder];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAirHotelOrder:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasAirHotelOrder {
  return result.hasAirHotelOrder;
}
- (AirHotelOrder*) airHotelOrder {
  return result.airHotelOrder;
}
- (TravelRequest_Builder*) setAirHotelOrder:(AirHotelOrder*) value {
  result.hasAirHotelOrder = YES;
  result.airHotelOrder = value;
  return self;
}
- (TravelRequest_Builder*) setAirHotelOrderBuilder:(AirHotelOrder_Builder*) builderForValue {
  return [self setAirHotelOrder:[builderForValue build]];
}
- (TravelRequest_Builder*) mergeAirHotelOrder:(AirHotelOrder*) value {
  if (result.hasAirHotelOrder &&
      result.airHotelOrder != [AirHotelOrder defaultInstance]) {
    result.airHotelOrder =
      [[[AirHotelOrder builderWithPrototype:result.airHotelOrder] mergeFrom:value] buildPartial];
  } else {
    result.airHotelOrder = value;
  }
  result.hasAirHotelOrder = YES;
  return self;
}
- (TravelRequest_Builder*) clearAirHotelOrder {
  result.hasAirHotelOrder = NO;
  result.airHotelOrder = [AirHotelOrder defaultInstance];
  return self;
}
@end

