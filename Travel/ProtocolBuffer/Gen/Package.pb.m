// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Package.pb.h"

@implementation PackageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PackageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL LanguageTypeIsValidValue(LanguageType value) {
  switch (value) {
    case LanguageTypeZhHans:
    case LanguageTypeZhHant:
    case LanguageTypeEn:
      return YES;
    default:
      return NO;
  }
}
@interface Package ()
@property (retain) NSString* version;
@property (retain) NSString* cityId;
@property (retain) NSString* cityName;
@property LanguageType language;
@end

@implementation Package

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) value {
  hasCityName_ = !!value;
}
@synthesize cityName;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
- (void) dealloc {
  self.version = nil;
  self.cityId = nil;
  self.cityName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.version = @"";
    self.cityId = @"";
    self.cityName = @"";
    self.language = LanguageTypeZhHans;
  }
  return self;
}
static Package* defaultPackageInstance = nil;
+ (void) initialize {
  if (self == [Package class]) {
    defaultPackageInstance = [[Package alloc] init];
  }
}
+ (Package*) defaultInstance {
  return defaultPackageInstance;
}
- (Package*) defaultInstance {
  return defaultPackageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasVersion) {
    return NO;
  }
  if (!self.hasCityId) {
    return NO;
  }
  if (!self.hasCityName) {
    return NO;
  }
  if (!self.hasLanguage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeString:1 value:self.version];
  }
  if (self.hasCityId) {
    [output writeString:2 value:self.cityId];
  }
  if (self.hasCityName) {
    [output writeString:3 value:self.cityName];
  }
  if (self.hasLanguage) {
    [output writeEnum:4 value:self.language];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasVersion) {
    size += computeStringSize(1, self.version);
  }
  if (self.hasCityId) {
    size += computeStringSize(2, self.cityId);
  }
  if (self.hasCityName) {
    size += computeStringSize(3, self.cityName);
  }
  if (self.hasLanguage) {
    size += computeEnumSize(4, self.language);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Package*) parseFromData:(NSData*) data {
  return (Package*)[[[Package builder] mergeFromData:data] build];
}
+ (Package*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Package*)[[[Package builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Package*) parseFromInputStream:(NSInputStream*) input {
  return (Package*)[[[Package builder] mergeFromInputStream:input] build];
}
+ (Package*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Package*)[[[Package builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Package*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Package*)[[[Package builder] mergeFromCodedInputStream:input] build];
}
+ (Package*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Package*)[[[Package builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Package_Builder*) builder {
  return [[[Package_Builder alloc] init] autorelease];
}
+ (Package_Builder*) builderWithPrototype:(Package*) prototype {
  return [[Package builder] mergeFrom:prototype];
}
- (Package_Builder*) builder {
  return [Package builder];
}
@end

@interface Package_Builder()
@property (retain) Package* result;
@end

@implementation Package_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Package alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Package_Builder*) clear {
  self.result = [[[Package alloc] init] autorelease];
  return self;
}
- (Package_Builder*) clone {
  return [Package builderWithPrototype:result];
}
- (Package*) defaultInstance {
  return [Package defaultInstance];
}
- (Package*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Package*) buildPartial {
  Package* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Package_Builder*) mergeFrom:(Package*) other {
  if (other == [Package defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Package_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Package_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setVersion:[input readString]];
        break;
      }
      case 18: {
        [self setCityId:[input readString]];
        break;
      }
      case 26: {
        [self setCityName:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (LanguageTypeIsValidValue(value)) {
          [self setLanguage:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (NSString*) version {
  return result.version;
}
- (Package_Builder*) setVersion:(NSString*) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (Package_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = @"";
  return self;
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (NSString*) cityId {
  return result.cityId;
}
- (Package_Builder*) setCityId:(NSString*) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (Package_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = @"";
  return self;
}
- (BOOL) hasCityName {
  return result.hasCityName;
}
- (NSString*) cityName {
  return result.cityName;
}
- (Package_Builder*) setCityName:(NSString*) value {
  result.hasCityName = YES;
  result.cityName = value;
  return self;
}
- (Package_Builder*) clearCityName {
  result.hasCityName = NO;
  result.cityName = @"";
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (LanguageType) language {
  return result.language;
}
- (Package_Builder*) setLanguage:(LanguageType) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (Package_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = LanguageTypeZhHans;
  return self;
}
@end

