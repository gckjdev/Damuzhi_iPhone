// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "CityOverview.pb.h"

@implementation CityOverviewRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CityOverviewRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CommonOverview ()
@property (retain) NSMutableArray* mutableImagesList;
@property (retain) NSString* html;
@end

@implementation CommonOverview

@synthesize mutableImagesList;
- (BOOL) hasHtml {
  return !!hasHtml_;
}
- (void) setHasHtml:(BOOL) value {
  hasHtml_ = !!value;
}
@synthesize html;
- (void) dealloc {
  self.mutableImagesList = nil;
  self.html = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.html = @"";
  }
  return self;
}
static CommonOverview* defaultCommonOverviewInstance = nil;
+ (void) initialize {
  if (self == [CommonOverview class]) {
    defaultCommonOverviewInstance = [[CommonOverview alloc] init];
  }
}
+ (CommonOverview*) defaultInstance {
  return defaultCommonOverviewInstance;
}
- (CommonOverview*) defaultInstance {
  return defaultCommonOverviewInstance;
}
- (NSArray*) imagesList {
  return mutableImagesList;
}
- (NSString*) imagesAtIndex:(int32_t) index {
  id value = [mutableImagesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasHtml) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (NSString* element in self.mutableImagesList) {
    [output writeString:1 value:element];
  }
  if (self.hasHtml) {
    [output writeString:2 value:self.html];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableImagesList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableImagesList.count;
  }
  if (self.hasHtml) {
    size += computeStringSize(2, self.html);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CommonOverview*) parseFromData:(NSData*) data {
  return (CommonOverview*)[[[CommonOverview builder] mergeFromData:data] build];
}
+ (CommonOverview*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommonOverview*)[[[CommonOverview builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CommonOverview*) parseFromInputStream:(NSInputStream*) input {
  return (CommonOverview*)[[[CommonOverview builder] mergeFromInputStream:input] build];
}
+ (CommonOverview*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommonOverview*)[[[CommonOverview builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommonOverview*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CommonOverview*)[[[CommonOverview builder] mergeFromCodedInputStream:input] build];
}
+ (CommonOverview*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommonOverview*)[[[CommonOverview builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommonOverview_Builder*) builder {
  return [[[CommonOverview_Builder alloc] init] autorelease];
}
+ (CommonOverview_Builder*) builderWithPrototype:(CommonOverview*) prototype {
  return [[CommonOverview builder] mergeFrom:prototype];
}
- (CommonOverview_Builder*) builder {
  return [CommonOverview builder];
}
@end

@interface CommonOverview_Builder()
@property (retain) CommonOverview* result;
@end

@implementation CommonOverview_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CommonOverview alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CommonOverview_Builder*) clear {
  self.result = [[[CommonOverview alloc] init] autorelease];
  return self;
}
- (CommonOverview_Builder*) clone {
  return [CommonOverview builderWithPrototype:result];
}
- (CommonOverview*) defaultInstance {
  return [CommonOverview defaultInstance];
}
- (CommonOverview*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CommonOverview*) buildPartial {
  CommonOverview* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CommonOverview_Builder*) mergeFrom:(CommonOverview*) other {
  if (other == [CommonOverview defaultInstance]) {
    return self;
  }
  if (other.mutableImagesList.count > 0) {
    if (result.mutableImagesList == nil) {
      result.mutableImagesList = [NSMutableArray array];
    }
    [result.mutableImagesList addObjectsFromArray:other.mutableImagesList];
  }
  if (other.hasHtml) {
    [self setHtml:other.html];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CommonOverview_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CommonOverview_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addImages:[input readString]];
        break;
      }
      case 18: {
        [self setHtml:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) imagesList {
  if (result.mutableImagesList == nil) {
    return [NSArray array];
  }
  return result.mutableImagesList;
}
- (NSString*) imagesAtIndex:(int32_t) index {
  return [result imagesAtIndex:index];
}
- (CommonOverview_Builder*) replaceImagesAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableImagesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CommonOverview_Builder*) addImages:(NSString*) value {
  if (result.mutableImagesList == nil) {
    result.mutableImagesList = [NSMutableArray array];
  }
  [result.mutableImagesList addObject:value];
  return self;
}
- (CommonOverview_Builder*) addAllImages:(NSArray*) values {
  if (result.mutableImagesList == nil) {
    result.mutableImagesList = [NSMutableArray array];
  }
  [result.mutableImagesList addObjectsFromArray:values];
  return self;
}
- (CommonOverview_Builder*) clearImagesList {
  result.mutableImagesList = nil;
  return self;
}
- (BOOL) hasHtml {
  return result.hasHtml;
}
- (NSString*) html {
  return result.html;
}
- (CommonOverview_Builder*) setHtml:(NSString*) value {
  result.hasHtml = YES;
  result.html = value;
  return self;
}
- (CommonOverview_Builder*) clearHtml {
  result.hasHtml = NO;
  result.html = @"";
  return self;
}
@end

@interface CitySubArea ()
@property (retain) NSString* subAreaId;
@property (retain) NSString* areaName;
@end

@implementation CitySubArea

- (BOOL) hasSubAreaId {
  return !!hasSubAreaId_;
}
- (void) setHasSubAreaId:(BOOL) value {
  hasSubAreaId_ = !!value;
}
@synthesize subAreaId;
- (BOOL) hasAreaName {
  return !!hasAreaName_;
}
- (void) setHasAreaName:(BOOL) value {
  hasAreaName_ = !!value;
}
@synthesize areaName;
- (void) dealloc {
  self.subAreaId = nil;
  self.areaName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.subAreaId = @"";
    self.areaName = @"";
  }
  return self;
}
static CitySubArea* defaultCitySubAreaInstance = nil;
+ (void) initialize {
  if (self == [CitySubArea class]) {
    defaultCitySubAreaInstance = [[CitySubArea alloc] init];
  }
}
+ (CitySubArea*) defaultInstance {
  return defaultCitySubAreaInstance;
}
- (CitySubArea*) defaultInstance {
  return defaultCitySubAreaInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSubAreaId) {
    return NO;
  }
  if (!self.hasAreaName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSubAreaId) {
    [output writeString:1 value:self.subAreaId];
  }
  if (self.hasAreaName) {
    [output writeString:2 value:self.areaName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSubAreaId) {
    size += computeStringSize(1, self.subAreaId);
  }
  if (self.hasAreaName) {
    size += computeStringSize(2, self.areaName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CitySubArea*) parseFromData:(NSData*) data {
  return (CitySubArea*)[[[CitySubArea builder] mergeFromData:data] build];
}
+ (CitySubArea*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CitySubArea*)[[[CitySubArea builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CitySubArea*) parseFromInputStream:(NSInputStream*) input {
  return (CitySubArea*)[[[CitySubArea builder] mergeFromInputStream:input] build];
}
+ (CitySubArea*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CitySubArea*)[[[CitySubArea builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CitySubArea*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CitySubArea*)[[[CitySubArea builder] mergeFromCodedInputStream:input] build];
}
+ (CitySubArea*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CitySubArea*)[[[CitySubArea builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CitySubArea_Builder*) builder {
  return [[[CitySubArea_Builder alloc] init] autorelease];
}
+ (CitySubArea_Builder*) builderWithPrototype:(CitySubArea*) prototype {
  return [[CitySubArea builder] mergeFrom:prototype];
}
- (CitySubArea_Builder*) builder {
  return [CitySubArea builder];
}
@end

@interface CitySubArea_Builder()
@property (retain) CitySubArea* result;
@end

@implementation CitySubArea_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CitySubArea alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CitySubArea_Builder*) clear {
  self.result = [[[CitySubArea alloc] init] autorelease];
  return self;
}
- (CitySubArea_Builder*) clone {
  return [CitySubArea builderWithPrototype:result];
}
- (CitySubArea*) defaultInstance {
  return [CitySubArea defaultInstance];
}
- (CitySubArea*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CitySubArea*) buildPartial {
  CitySubArea* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CitySubArea_Builder*) mergeFrom:(CitySubArea*) other {
  if (other == [CitySubArea defaultInstance]) {
    return self;
  }
  if (other.hasSubAreaId) {
    [self setSubAreaId:other.subAreaId];
  }
  if (other.hasAreaName) {
    [self setAreaName:other.areaName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CitySubArea_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CitySubArea_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSubAreaId:[input readString]];
        break;
      }
      case 18: {
        [self setAreaName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSubAreaId {
  return result.hasSubAreaId;
}
- (NSString*) subAreaId {
  return result.subAreaId;
}
- (CitySubArea_Builder*) setSubAreaId:(NSString*) value {
  result.hasSubAreaId = YES;
  result.subAreaId = value;
  return self;
}
- (CitySubArea_Builder*) clearSubAreaId {
  result.hasSubAreaId = NO;
  result.subAreaId = @"";
  return self;
}
- (BOOL) hasAreaName {
  return result.hasAreaName;
}
- (NSString*) areaName {
  return result.areaName;
}
- (CitySubArea_Builder*) setAreaName:(NSString*) value {
  result.hasAreaName = YES;
  result.areaName = value;
  return self;
}
- (CitySubArea_Builder*) clearAreaName {
  result.hasAreaName = NO;
  result.areaName = @"";
  return self;
}
@end

@interface CityArea ()
@property (retain) NSString* areaId;
@property (retain) NSString* areaName;
@property (retain) NSMutableArray* mutableSubAreaListList;
@end

@implementation CityArea

- (BOOL) hasAreaId {
  return !!hasAreaId_;
}
- (void) setHasAreaId:(BOOL) value {
  hasAreaId_ = !!value;
}
@synthesize areaId;
- (BOOL) hasAreaName {
  return !!hasAreaName_;
}
- (void) setHasAreaName:(BOOL) value {
  hasAreaName_ = !!value;
}
@synthesize areaName;
@synthesize mutableSubAreaListList;
- (void) dealloc {
  self.areaId = nil;
  self.areaName = nil;
  self.mutableSubAreaListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.areaId = @"";
    self.areaName = @"";
  }
  return self;
}
static CityArea* defaultCityAreaInstance = nil;
+ (void) initialize {
  if (self == [CityArea class]) {
    defaultCityAreaInstance = [[CityArea alloc] init];
  }
}
+ (CityArea*) defaultInstance {
  return defaultCityAreaInstance;
}
- (CityArea*) defaultInstance {
  return defaultCityAreaInstance;
}
- (NSArray*) subAreaListList {
  return mutableSubAreaListList;
}
- (NSString*) subAreaListAtIndex:(int32_t) index {
  id value = [mutableSubAreaListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasAreaId) {
    return NO;
  }
  if (!self.hasAreaName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAreaId) {
    [output writeString:1 value:self.areaId];
  }
  if (self.hasAreaName) {
    [output writeString:2 value:self.areaName];
  }
  for (NSString* element in self.mutableSubAreaListList) {
    [output writeString:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAreaId) {
    size += computeStringSize(1, self.areaId);
  }
  if (self.hasAreaName) {
    size += computeStringSize(2, self.areaName);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableSubAreaListList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableSubAreaListList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityArea*) parseFromData:(NSData*) data {
  return (CityArea*)[[[CityArea builder] mergeFromData:data] build];
}
+ (CityArea*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityArea*)[[[CityArea builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityArea*) parseFromInputStream:(NSInputStream*) input {
  return (CityArea*)[[[CityArea builder] mergeFromInputStream:input] build];
}
+ (CityArea*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityArea*)[[[CityArea builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityArea*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityArea*)[[[CityArea builder] mergeFromCodedInputStream:input] build];
}
+ (CityArea*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityArea*)[[[CityArea builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityArea_Builder*) builder {
  return [[[CityArea_Builder alloc] init] autorelease];
}
+ (CityArea_Builder*) builderWithPrototype:(CityArea*) prototype {
  return [[CityArea builder] mergeFrom:prototype];
}
- (CityArea_Builder*) builder {
  return [CityArea builder];
}
@end

@interface CityArea_Builder()
@property (retain) CityArea* result;
@end

@implementation CityArea_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityArea alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityArea_Builder*) clear {
  self.result = [[[CityArea alloc] init] autorelease];
  return self;
}
- (CityArea_Builder*) clone {
  return [CityArea builderWithPrototype:result];
}
- (CityArea*) defaultInstance {
  return [CityArea defaultInstance];
}
- (CityArea*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityArea*) buildPartial {
  CityArea* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityArea_Builder*) mergeFrom:(CityArea*) other {
  if (other == [CityArea defaultInstance]) {
    return self;
  }
  if (other.hasAreaId) {
    [self setAreaId:other.areaId];
  }
  if (other.hasAreaName) {
    [self setAreaName:other.areaName];
  }
  if (other.mutableSubAreaListList.count > 0) {
    if (result.mutableSubAreaListList == nil) {
      result.mutableSubAreaListList = [NSMutableArray array];
    }
    [result.mutableSubAreaListList addObjectsFromArray:other.mutableSubAreaListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityArea_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityArea_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAreaId:[input readString]];
        break;
      }
      case 18: {
        [self setAreaName:[input readString]];
        break;
      }
      case 26: {
        [self addSubAreaList:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAreaId {
  return result.hasAreaId;
}
- (NSString*) areaId {
  return result.areaId;
}
- (CityArea_Builder*) setAreaId:(NSString*) value {
  result.hasAreaId = YES;
  result.areaId = value;
  return self;
}
- (CityArea_Builder*) clearAreaId {
  result.hasAreaId = NO;
  result.areaId = @"";
  return self;
}
- (BOOL) hasAreaName {
  return result.hasAreaName;
}
- (NSString*) areaName {
  return result.areaName;
}
- (CityArea_Builder*) setAreaName:(NSString*) value {
  result.hasAreaName = YES;
  result.areaName = value;
  return self;
}
- (CityArea_Builder*) clearAreaName {
  result.hasAreaName = NO;
  result.areaName = @"";
  return self;
}
- (NSArray*) subAreaListList {
  if (result.mutableSubAreaListList == nil) {
    return [NSArray array];
  }
  return result.mutableSubAreaListList;
}
- (NSString*) subAreaListAtIndex:(int32_t) index {
  return [result subAreaListAtIndex:index];
}
- (CityArea_Builder*) replaceSubAreaListAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableSubAreaListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CityArea_Builder*) addSubAreaList:(NSString*) value {
  if (result.mutableSubAreaListList == nil) {
    result.mutableSubAreaListList = [NSMutableArray array];
  }
  [result.mutableSubAreaListList addObject:value];
  return self;
}
- (CityArea_Builder*) addAllSubAreaList:(NSArray*) values {
  if (result.mutableSubAreaListList == nil) {
    result.mutableSubAreaListList = [NSMutableArray array];
  }
  [result.mutableSubAreaListList addObjectsFromArray:values];
  return self;
}
- (CityArea_Builder*) clearSubAreaListList {
  result.mutableSubAreaListList = nil;
  return self;
}
@end

@interface CityOverview ()
@property (retain) CommonOverview* cityBasic;
@property (retain) CommonOverview* travelPrepration;
@property (retain) CommonOverview* travelUtility;
@property (retain) CommonOverview* travelTransportation;
@property (retain) NSMutableArray* mutableAreaListList;
@end

@implementation CityOverview

- (BOOL) hasCityBasic {
  return !!hasCityBasic_;
}
- (void) setHasCityBasic:(BOOL) value {
  hasCityBasic_ = !!value;
}
@synthesize cityBasic;
- (BOOL) hasTravelPrepration {
  return !!hasTravelPrepration_;
}
- (void) setHasTravelPrepration:(BOOL) value {
  hasTravelPrepration_ = !!value;
}
@synthesize travelPrepration;
- (BOOL) hasTravelUtility {
  return !!hasTravelUtility_;
}
- (void) setHasTravelUtility:(BOOL) value {
  hasTravelUtility_ = !!value;
}
@synthesize travelUtility;
- (BOOL) hasTravelTransportation {
  return !!hasTravelTransportation_;
}
- (void) setHasTravelTransportation:(BOOL) value {
  hasTravelTransportation_ = !!value;
}
@synthesize travelTransportation;
@synthesize mutableAreaListList;
- (void) dealloc {
  self.cityBasic = nil;
  self.travelPrepration = nil;
  self.travelUtility = nil;
  self.travelTransportation = nil;
  self.mutableAreaListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cityBasic = [CommonOverview defaultInstance];
    self.travelPrepration = [CommonOverview defaultInstance];
    self.travelUtility = [CommonOverview defaultInstance];
    self.travelTransportation = [CommonOverview defaultInstance];
  }
  return self;
}
static CityOverview* defaultCityOverviewInstance = nil;
+ (void) initialize {
  if (self == [CityOverview class]) {
    defaultCityOverviewInstance = [[CityOverview alloc] init];
  }
}
+ (CityOverview*) defaultInstance {
  return defaultCityOverviewInstance;
}
- (CityOverview*) defaultInstance {
  return defaultCityOverviewInstance;
}
- (NSArray*) areaListList {
  return mutableAreaListList;
}
- (CityArea*) areaListAtIndex:(int32_t) index {
  id value = [mutableAreaListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (self.hasCityBasic) {
    if (!self.cityBasic.isInitialized) {
      return NO;
    }
  }
  if (self.hasTravelPrepration) {
    if (!self.travelPrepration.isInitialized) {
      return NO;
    }
  }
  if (self.hasTravelUtility) {
    if (!self.travelUtility.isInitialized) {
      return NO;
    }
  }
  if (self.hasTravelTransportation) {
    if (!self.travelTransportation.isInitialized) {
      return NO;
    }
  }
  for (CityArea* element in self.areaListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCityBasic) {
    [output writeMessage:1 value:self.cityBasic];
  }
  if (self.hasTravelPrepration) {
    [output writeMessage:2 value:self.travelPrepration];
  }
  if (self.hasTravelUtility) {
    [output writeMessage:3 value:self.travelUtility];
  }
  if (self.hasTravelTransportation) {
    [output writeMessage:4 value:self.travelTransportation];
  }
  for (CityArea* element in self.areaListList) {
    [output writeMessage:5 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCityBasic) {
    size += computeMessageSize(1, self.cityBasic);
  }
  if (self.hasTravelPrepration) {
    size += computeMessageSize(2, self.travelPrepration);
  }
  if (self.hasTravelUtility) {
    size += computeMessageSize(3, self.travelUtility);
  }
  if (self.hasTravelTransportation) {
    size += computeMessageSize(4, self.travelTransportation);
  }
  for (CityArea* element in self.areaListList) {
    size += computeMessageSize(5, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityOverview*) parseFromData:(NSData*) data {
  return (CityOverview*)[[[CityOverview builder] mergeFromData:data] build];
}
+ (CityOverview*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityOverview*)[[[CityOverview builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityOverview*) parseFromInputStream:(NSInputStream*) input {
  return (CityOverview*)[[[CityOverview builder] mergeFromInputStream:input] build];
}
+ (CityOverview*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityOverview*)[[[CityOverview builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityOverview*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityOverview*)[[[CityOverview builder] mergeFromCodedInputStream:input] build];
}
+ (CityOverview*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityOverview*)[[[CityOverview builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityOverview_Builder*) builder {
  return [[[CityOverview_Builder alloc] init] autorelease];
}
+ (CityOverview_Builder*) builderWithPrototype:(CityOverview*) prototype {
  return [[CityOverview builder] mergeFrom:prototype];
}
- (CityOverview_Builder*) builder {
  return [CityOverview builder];
}
@end

@interface CityOverview_Builder()
@property (retain) CityOverview* result;
@end

@implementation CityOverview_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityOverview alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityOverview_Builder*) clear {
  self.result = [[[CityOverview alloc] init] autorelease];
  return self;
}
- (CityOverview_Builder*) clone {
  return [CityOverview builderWithPrototype:result];
}
- (CityOverview*) defaultInstance {
  return [CityOverview defaultInstance];
}
- (CityOverview*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityOverview*) buildPartial {
  CityOverview* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityOverview_Builder*) mergeFrom:(CityOverview*) other {
  if (other == [CityOverview defaultInstance]) {
    return self;
  }
  if (other.hasCityBasic) {
    [self mergeCityBasic:other.cityBasic];
  }
  if (other.hasTravelPrepration) {
    [self mergeTravelPrepration:other.travelPrepration];
  }
  if (other.hasTravelUtility) {
    [self mergeTravelUtility:other.travelUtility];
  }
  if (other.hasTravelTransportation) {
    [self mergeTravelTransportation:other.travelTransportation];
  }
  if (other.mutableAreaListList.count > 0) {
    if (result.mutableAreaListList == nil) {
      result.mutableAreaListList = [NSMutableArray array];
    }
    [result.mutableAreaListList addObjectsFromArray:other.mutableAreaListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityOverview_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityOverview_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CommonOverview_Builder* subBuilder = [CommonOverview builder];
        if (self.hasCityBasic) {
          [subBuilder mergeFrom:self.cityBasic];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCityBasic:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CommonOverview_Builder* subBuilder = [CommonOverview builder];
        if (self.hasTravelPrepration) {
          [subBuilder mergeFrom:self.travelPrepration];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTravelPrepration:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        CommonOverview_Builder* subBuilder = [CommonOverview builder];
        if (self.hasTravelUtility) {
          [subBuilder mergeFrom:self.travelUtility];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTravelUtility:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        CommonOverview_Builder* subBuilder = [CommonOverview builder];
        if (self.hasTravelTransportation) {
          [subBuilder mergeFrom:self.travelTransportation];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTravelTransportation:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        CityArea_Builder* subBuilder = [CityArea builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAreaList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCityBasic {
  return result.hasCityBasic;
}
- (CommonOverview*) cityBasic {
  return result.cityBasic;
}
- (CityOverview_Builder*) setCityBasic:(CommonOverview*) value {
  result.hasCityBasic = YES;
  result.cityBasic = value;
  return self;
}
- (CityOverview_Builder*) setCityBasicBuilder:(CommonOverview_Builder*) builderForValue {
  return [self setCityBasic:[builderForValue build]];
}
- (CityOverview_Builder*) mergeCityBasic:(CommonOverview*) value {
  if (result.hasCityBasic &&
      result.cityBasic != [CommonOverview defaultInstance]) {
    result.cityBasic =
      [[[CommonOverview builderWithPrototype:result.cityBasic] mergeFrom:value] buildPartial];
  } else {
    result.cityBasic = value;
  }
  result.hasCityBasic = YES;
  return self;
}
- (CityOverview_Builder*) clearCityBasic {
  result.hasCityBasic = NO;
  result.cityBasic = [CommonOverview defaultInstance];
  return self;
}
- (BOOL) hasTravelPrepration {
  return result.hasTravelPrepration;
}
- (CommonOverview*) travelPrepration {
  return result.travelPrepration;
}
- (CityOverview_Builder*) setTravelPrepration:(CommonOverview*) value {
  result.hasTravelPrepration = YES;
  result.travelPrepration = value;
  return self;
}
- (CityOverview_Builder*) setTravelPreprationBuilder:(CommonOverview_Builder*) builderForValue {
  return [self setTravelPrepration:[builderForValue build]];
}
- (CityOverview_Builder*) mergeTravelPrepration:(CommonOverview*) value {
  if (result.hasTravelPrepration &&
      result.travelPrepration != [CommonOverview defaultInstance]) {
    result.travelPrepration =
      [[[CommonOverview builderWithPrototype:result.travelPrepration] mergeFrom:value] buildPartial];
  } else {
    result.travelPrepration = value;
  }
  result.hasTravelPrepration = YES;
  return self;
}
- (CityOverview_Builder*) clearTravelPrepration {
  result.hasTravelPrepration = NO;
  result.travelPrepration = [CommonOverview defaultInstance];
  return self;
}
- (BOOL) hasTravelUtility {
  return result.hasTravelUtility;
}
- (CommonOverview*) travelUtility {
  return result.travelUtility;
}
- (CityOverview_Builder*) setTravelUtility:(CommonOverview*) value {
  result.hasTravelUtility = YES;
  result.travelUtility = value;
  return self;
}
- (CityOverview_Builder*) setTravelUtilityBuilder:(CommonOverview_Builder*) builderForValue {
  return [self setTravelUtility:[builderForValue build]];
}
- (CityOverview_Builder*) mergeTravelUtility:(CommonOverview*) value {
  if (result.hasTravelUtility &&
      result.travelUtility != [CommonOverview defaultInstance]) {
    result.travelUtility =
      [[[CommonOverview builderWithPrototype:result.travelUtility] mergeFrom:value] buildPartial];
  } else {
    result.travelUtility = value;
  }
  result.hasTravelUtility = YES;
  return self;
}
- (CityOverview_Builder*) clearTravelUtility {
  result.hasTravelUtility = NO;
  result.travelUtility = [CommonOverview defaultInstance];
  return self;
}
- (BOOL) hasTravelTransportation {
  return result.hasTravelTransportation;
}
- (CommonOverview*) travelTransportation {
  return result.travelTransportation;
}
- (CityOverview_Builder*) setTravelTransportation:(CommonOverview*) value {
  result.hasTravelTransportation = YES;
  result.travelTransportation = value;
  return self;
}
- (CityOverview_Builder*) setTravelTransportationBuilder:(CommonOverview_Builder*) builderForValue {
  return [self setTravelTransportation:[builderForValue build]];
}
- (CityOverview_Builder*) mergeTravelTransportation:(CommonOverview*) value {
  if (result.hasTravelTransportation &&
      result.travelTransportation != [CommonOverview defaultInstance]) {
    result.travelTransportation =
      [[[CommonOverview builderWithPrototype:result.travelTransportation] mergeFrom:value] buildPartial];
  } else {
    result.travelTransportation = value;
  }
  result.hasTravelTransportation = YES;
  return self;
}
- (CityOverview_Builder*) clearTravelTransportation {
  result.hasTravelTransportation = NO;
  result.travelTransportation = [CommonOverview defaultInstance];
  return self;
}
- (NSArray*) areaListList {
  if (result.mutableAreaListList == nil) { return [NSArray array]; }
  return result.mutableAreaListList;
}
- (CityArea*) areaListAtIndex:(int32_t) index {
  return [result areaListAtIndex:index];
}
- (CityOverview_Builder*) replaceAreaListAtIndex:(int32_t) index with:(CityArea*) value {
  [result.mutableAreaListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CityOverview_Builder*) addAllAreaList:(NSArray*) values {
  if (result.mutableAreaListList == nil) {
    result.mutableAreaListList = [NSMutableArray array];
  }
  [result.mutableAreaListList addObjectsFromArray:values];
  return self;
}
- (CityOverview_Builder*) clearAreaListList {
  result.mutableAreaListList = nil;
  return self;
}
- (CityOverview_Builder*) addAreaList:(CityArea*) value {
  if (result.mutableAreaListList == nil) {
    result.mutableAreaListList = [NSMutableArray array];
  }
  [result.mutableAreaListList addObject:value];
  return self;
}
@end

